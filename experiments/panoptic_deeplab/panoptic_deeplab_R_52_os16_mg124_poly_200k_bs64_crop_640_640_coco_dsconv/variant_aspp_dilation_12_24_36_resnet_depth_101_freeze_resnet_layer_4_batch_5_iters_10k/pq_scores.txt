env: DETECTRON2_DATASETS=/content/datasets
Command Line Args: Namespace(config_file='./detectron2/projects/Panoptic-DeepLab/configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.RESNETS.NORM', 'BN', 'MODEL.INS_EMBED_HEAD.NORM', 'BN', 'MODEL.SEM_SEG_HEAD.NORM', 'BN', 'SOLVER.MAX_ITER', '10000', 'SOLVER.IMS_PER_BATCH', '5', 'SOLVER.BASE_LR', '0.0025', 'MODEL.BACKBONE.FREEZE_AT', '4', 'MODEL.RESNETS.DEPTH', '101', 'MODEL.WEIGHTS', 'detectron2://DeepLab/R-103.pkl', 'MODEL.SEM_SEG_HEAD.ASPP_DILATIONS', '[12, 24, 36]', 'MODEL.INS_EMBED_HEAD.ASPP_DILATIONS', '[12, 24, 36]'], resume=False)
Loading config ./detectron2/projects/Panoptic-DeepLab/configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv.yaml with yaml.unsafe_load. Your machine may be at risk if the file contains malicious content.
[12/12 02:37:44 detectron2]: Rank of current process: 0. World size: 1
[12/12 02:37:45 detectron2]: Environment info:
----------------------  ----------------------------------------------------------------
sys.platform            linux
Python                  3.7.12 (default, Jan 15 2022, 18:48:18) [GCC 7.5.0]
numpy                   1.21.5
detectron2              0.6 @/content/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.1
detectron2 arch flags   7.0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.10.0+cu111 @/usr/local/lib/python3.7/dist-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0                   Tesla V100-SXM2-16GB (arch=7.0)
Driver version          460.32.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.1.2
torchvision             0.11.1+cu111 @/usr/local/lib/python3.7/dist-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20221122
iopath                  0.1.9
cv2                     4.1.2
----------------------  ----------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[12/12 02:37:45 detectron2]: Command line arguments: Namespace(config_file='./detectron2/projects/Panoptic-DeepLab/configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.RESNETS.NORM', 'BN', 'MODEL.INS_EMBED_HEAD.NORM', 'BN', 'MODEL.SEM_SEG_HEAD.NORM', 'BN', 'SOLVER.MAX_ITER', '10000', 'SOLVER.IMS_PER_BATCH', '5', 'SOLVER.BASE_LR', '0.0025', 'MODEL.BACKBONE.FREEZE_AT', '4', 'MODEL.RESNETS.DEPTH', '101', 'MODEL.WEIGHTS', 'detectron2://DeepLab/R-103.pkl', 'MODEL.SEM_SEG_HEAD.ASPP_DILATIONS', '[12, 24, 36]', 'MODEL.INS_EMBED_HEAD.ASPP_DILATIONS', '[12, 24, 36]'], resume=False)
[12/12 02:37:45 detectron2]: Contents of args.config_file=./detectron2/projects/Panoptic-DeepLab/configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv.yaml:
_BASE_: ../Cityscapes-PanopticSegmentation/Base-PanopticDeepLab-OS16.yaml
MODEL:
  WEIGHTS: "detectron2://DeepLab/R-52.pkl"
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  BACKBONE:
    NAME: "build_resnet_deeplab_backbone"
  RESNETS:
    DEPTH: 50
    NORM: "SyncBN"
    RES5_MULTI_GRID: [1, 2, 4]
    STEM_TYPE: "deeplab"
    STEM_OUT_CHANNELS: 128
    STRIDE_IN_1X1: False
  SEM_SEG_HEAD:
    NUM_CLASSES: 133
    LOSS_TOP_K: 1.0
    USE_DEPTHWISE_SEPARABLE_CONV: True
  PANOPTIC_DEEPLAB:
    STUFF_AREA: 4096
    NMS_KERNEL: 41
    SIZE_DIVISIBILITY: 640
    USE_DEPTHWISE_SEPARABLE_CONV: True
DATASETS:
  TRAIN: ("coco_2017_train_panoptic",)
  TEST: ("coco_2017_val_panoptic",)
SOLVER:
  BASE_LR: 0.0005
  MAX_ITER: 200000
  IMS_PER_BATCH: 64
INPUT:
  FORMAT: "RGB"
  GAUSSIAN_SIGMA: 8
  MIN_SIZE_TRAIN: !!python/object/apply:eval ["[int(x * 0.1 * 640) for x in range(5, 16)]"]
  MIN_SIZE_TRAIN_SAMPLING: "choice"
  MIN_SIZE_TEST: 640
  MAX_SIZE_TRAIN: 960
  MAX_SIZE_TEST: 640
  CROP:
    ENABLED: True
    TYPE: "absolute"
    SIZE: (640, 640)

[12/12 02:37:45 detectron2]: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 10
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - coco_2017_val_panoptic
  TRAIN:
  - coco_2017_train_panoptic
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: true
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 640
    - 640
    TYPE: absolute
  FORMAT: RGB
  GAUSSIAN_SIGMA: 8
  IGNORE_CROWD_IN_SEMANTIC: false
  IGNORE_STUFF_IN_OFFSET: true
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 640
  MAX_SIZE_TRAIN: 960
  MIN_SIZE_TEST: 640
  MIN_SIZE_TRAIN:
  - 320
  - 384
  - 448
  - 512
  - 576
  - 640
  - 704
  - 768
  - 832
  - 896
  - 960
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SMALL_INSTANCE_AREA: 4096
  SMALL_INSTANCE_WEIGHT: 3
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 4
    NAME: build_resnet_deeplab_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  INS_EMBED_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 12
    - 24
    - 36
    ASPP_DROPOUT: 0.1
    CENTER_LOSS_WEIGHT: 200.0
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    HEAD_CHANNELS: 32
    IN_FEATURES:
    - res2
    - res3
    - res5
    NAME: PanopticDeepLabInsEmbedHead
    NORM: BN
    OFFSET_LOSS_WEIGHT: 0.01
    PROJECT_CHANNELS:
    - 32
    - 64
    PROJECT_FEATURES:
    - res2
    - res3
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: PanopticDeepLab
  PANOPTIC_DEEPLAB:
    BENCHMARK_NETWORK_SPEED: false
    CENTER_THRESHOLD: 0.1
    NMS_KERNEL: 41
    PREDICT_INSTANCES: true
    SIZE_DIVISIBILITY: 640
    STUFF_AREA: 4096
    TOP_K_INSTANCE: 200
    USE_DEPTHWISE_SEPARABLE_CONV: true
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 101
    NORM: BN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 2
    RES5_MULTI_GRID:
    - 1
    - 2
    - 4
    STEM_OUT_CHANNELS: 128
    STEM_TYPE: deeplab
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id001
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS:
    - 10.0
    - 10.0
    - 5.0
    - 5.0
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 12
    - 24
    - 36
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    HEAD_CHANNELS: 256
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res5
    LOSS_TOP_K: 1.0
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    NAME: PanopticDeepLabSemSegHead
    NORM: BN
    NUM_CLASSES: 133
    PROJECT_CHANNELS:
    - 32
    - 64
    PROJECT_FEATURES:
    - res2
    - res3
    USE_DEPTHWISE_SEPARABLE_CONV: true
  WEIGHTS: detectron2://DeepLab/R-103.pkl
OUTPUT_DIR: ./output
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.0025
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 5
  LR_SCHEDULER_NAME: WarmupPolyLR
  MAX_ITER: 10000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAM
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 30000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0
  WEIGHT_DECAY_BIAS: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/12 02:37:45 detectron2]: Full config saved to ./output/config.yaml
[12/12 02:37:45 d2.utils.env]: Using a generated random seed 45900370
[12/12 02:37:50 d2.engine.defaults]: Model:
PanopticDeepLab(
  (backbone): ResNet(
    (stem): DeepLabStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
      )
      (conv2): Conv2d(
        64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
      )
      (conv3): Conv2d(
        64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv1): Conv2d(
          128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=512, eps=1e-05)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (6): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (7): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (8): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (9): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (10): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (11): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (12): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (13): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (14): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (15): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (16): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (17): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (18): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (19): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (20): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (21): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
      (22): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=1024, eps=1e-05)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(8, 8), dilation=(8, 8), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (sem_seg_head): PanopticDeepLabSemSegHead(
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            288, 288, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=288, bias=False
            (norm): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            288, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(24, 24), dilation=(24, 24), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(36, 36), dilation=(36, 36), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AvgPool2d(kernel_size=(40, 40), stride=1, padding=0)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=256, bias=False
        (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (predictor): Conv2d(256, 133, kernel_size=(1, 1), stride=(1, 1))
    (loss): DeepLabCE(
      (criterion): CrossEntropyLoss()
    )
  )
  (ins_embed_head): PanopticDeepLabInsEmbedHead(
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            160, 160, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=160, bias=False
            (norm): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(24, 24), dilation=(24, 24), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(36, 36), dilation=(36, 36), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AvgPool2d(kernel_size=(40, 40), stride=1, padding=0)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (center_head): Sequential(
      (0): Conv2d(
        128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): Conv2d(
        128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (center_predictor): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
    (offset_head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=128, bias=False
        (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (offset_predictor): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
    (center_loss): MSELoss()
    (offset_loss): L1Loss()
  )
)
[12/12 02:37:50 d2.projects.panoptic_deeplab.dataset_mapper]: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960), max_size=960, sample_style='choice'), RandomCrop(crop_type='absolute', crop_size=[640, 640]), RandomFlip()]
[12/12 02:37:57 d2.data.build]: Using training sampler TrainingSampler
[12/12 02:37:57 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/12 02:37:57 d2.data.common]: Serializing 118287 elements to byte tensors and concatenating them all ...
[12/12 02:37:58 d2.data.common]: Serialized dataset takes 80.32 MiB
/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 10 worker processes in total. Our suggested max number of worker in current system is 8, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  cpuset_checked))
[12/12 02:38:02 fvcore.common.checkpoint]: [Checkpointer] Loading from detectron2://DeepLab/R-103.pkl ...
[12/12 02:38:02 fvcore.common.checkpoint]: Reading a file from 'torchvision'
[12/12 02:38:02 d2.checkpoint.c2_model_loading]: Following weights matched with submodule backbone:
| Names in Model    | Names in Checkpoint                                                                                        | Shapes                                             |
|:------------------|:-----------------------------------------------------------------------------------------------------------|:---------------------------------------------------|
| res2.0.conv1.*    | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,128,1,1)               |
| res2.0.conv2.*    | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,64,3,3)                |
| res2.0.conv3.*    | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,64,1,1)           |
| res2.0.shortcut.* | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                          | (256,) (256,) (256,) (256,) (256,128,1,1)          |
| res2.1.conv1.*    | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,256,1,1)               |
| res2.1.conv2.*    | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,64,3,3)                |
| res2.1.conv3.*    | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,64,1,1)           |
| res2.2.conv1.*    | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,256,1,1)               |
| res2.2.conv2.*    | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,64,3,3)                |
| res2.2.conv3.*    | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,64,1,1)           |
| res3.0.conv1.*    | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (128,) (128,) (128,) (128,) (128,256,1,1)          |
| res3.0.conv2.*    | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (128,) (128,) (128,) (128,) (128,128,3,3)          |
| res3.0.conv3.*    | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (512,) (512,) (512,) (512,) (512,128,1,1)          |
| res3.0.shortcut.* | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                          | (512,) (512,) (512,) (512,) (512,256,1,1)          |
| res3.1.conv1.*    | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (128,) (128,) (128,) (128,) (128,512,1,1)          |
| res3.1.conv2.*    | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (128,) (128,) (128,) (128,) (128,128,3,3)          |
| res3.1.conv3.*    | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (512,) (512,) (512,) (512,) (512,128,1,1)          |
| res3.2.conv1.*    | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (128,) (128,) (128,) (128,) (128,512,1,1)          |
| res3.2.conv2.*    | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (128,) (128,) (128,) (128,) (128,128,3,3)          |
| res3.2.conv3.*    | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (512,) (512,) (512,) (512,) (512,128,1,1)          |
| res3.3.conv1.*    | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (128,) (128,) (128,) (128,) (128,512,1,1)          |
| res3.3.conv2.*    | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (128,) (128,) (128,) (128,) (128,128,3,3)          |
| res3.3.conv3.*    | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (512,) (512,) (512,) (512,) (512,128,1,1)          |
| res4.0.conv1.*    | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,512,1,1)          |
| res4.0.conv2.*    | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,256,3,3)          |
| res4.0.conv3.*    | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)     |
| res4.0.shortcut.* | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                          | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)     |
| res4.1.conv1.*    | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,1024,1,1)         |
| res4.1.conv2.*    | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,256,3,3)          |
| res4.1.conv3.*    | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)     |
| res4.10.conv1.*   | res4.10.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (256,) (256,) (256,) (256,) (256,1024,1,1)         |
| res4.10.conv2.*   | res4.10.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (256,) (256,) (256,) (256,) (256,256,3,3)          |
| res4.10.conv3.*   | res4.10.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)     |
| res4.11.conv1.*   | res4.11.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (256,) (256,) (256,) (256,) (256,1024,1,1)         |
| res4.11.conv2.*   | res4.11.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (256,) (256,) (256,) (256,) (256,256,3,3)          |
| res4.11.conv3.*   | res4.11.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)     |
| res4.12.conv1.*   | res4.12.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (256,) (256,) (256,) (256,) (256,1024,1,1)         |
| res4.12.conv2.*   | res4.12.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (256,) (256,) (256,) (256,) (256,256,3,3)          |
| res4.12.conv3.*   | res4.12.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)     |
| res4.13.conv1.*   | res4.13.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (256,) (256,) (256,) (256,) (256,1024,1,1)         |
| res4.13.conv2.*   | res4.13.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (256,) (256,) (256,) (256,) (256,256,3,3)          |
| res4.13.conv3.*   | res4.13.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)     |
| res4.14.conv1.*   | res4.14.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (256,) (256,) (256,) (256,) (256,1024,1,1)         |
| res4.14.conv2.*   | res4.14.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (256,) (256,) (256,) (256,) (256,256,3,3)          |
| res4.14.conv3.*   | res4.14.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)     |
| res4.15.conv1.*   | res4.15.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (256,) (256,) (256,) (256,) (256,1024,1,1)         |
| res4.15.conv2.*   | res4.15.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (256,) (256,) (256,) (256,) (256,256,3,3)          |
| res4.15.conv3.*   | res4.15.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)     |
| res4.16.conv1.*   | res4.16.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (256,) (256,) (256,) (256,) (256,1024,1,1)         |
| res4.16.conv2.*   | res4.16.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (256,) (256,) (256,) (256,) (256,256,3,3)          |
| res4.16.conv3.*   | res4.16.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)     |
| res4.17.conv1.*   | res4.17.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (256,) (256,) (256,) (256,) (256,1024,1,1)         |
| res4.17.conv2.*   | res4.17.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (256,) (256,) (256,) (256,) (256,256,3,3)          |
| res4.17.conv3.*   | res4.17.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)     |
| res4.18.conv1.*   | res4.18.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (256,) (256,) (256,) (256,) (256,1024,1,1)         |
| res4.18.conv2.*   | res4.18.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (256,) (256,) (256,) (256,) (256,256,3,3)          |
| res4.18.conv3.*   | res4.18.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)     |
| res4.19.conv1.*   | res4.19.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (256,) (256,) (256,) (256,) (256,1024,1,1)         |
| res4.19.conv2.*   | res4.19.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (256,) (256,) (256,) (256,) (256,256,3,3)          |
| res4.19.conv3.*   | res4.19.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)     |
| res4.2.conv1.*    | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,1024,1,1)         |
| res4.2.conv2.*    | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,256,3,3)          |
| res4.2.conv3.*    | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)     |
| res4.20.conv1.*   | res4.20.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (256,) (256,) (256,) (256,) (256,1024,1,1)         |
| res4.20.conv2.*   | res4.20.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (256,) (256,) (256,) (256,) (256,256,3,3)          |
| res4.20.conv3.*   | res4.20.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)     |
| res4.21.conv1.*   | res4.21.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (256,) (256,) (256,) (256,) (256,1024,1,1)         |
| res4.21.conv2.*   | res4.21.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (256,) (256,) (256,) (256,) (256,256,3,3)          |
| res4.21.conv3.*   | res4.21.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)     |
| res4.22.conv1.*   | res4.22.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (256,) (256,) (256,) (256,) (256,1024,1,1)         |
| res4.22.conv2.*   | res4.22.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (256,) (256,) (256,) (256,) (256,256,3,3)          |
| res4.22.conv3.*   | res4.22.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                            | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)     |
| res4.3.conv1.*    | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,1024,1,1)         |
| res4.3.conv2.*    | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,256,3,3)          |
| res4.3.conv3.*    | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)     |
| res4.4.conv1.*    | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,1024,1,1)         |
| res4.4.conv2.*    | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,256,3,3)          |
| res4.4.conv3.*    | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)     |
| res4.5.conv1.*    | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,1024,1,1)         |
| res4.5.conv2.*    | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,256,3,3)          |
| res4.5.conv3.*    | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)     |
| res4.6.conv1.*    | res4.6.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,1024,1,1)         |
| res4.6.conv2.*    | res4.6.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,256,3,3)          |
| res4.6.conv3.*    | res4.6.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)     |
| res4.7.conv1.*    | res4.7.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,1024,1,1)         |
| res4.7.conv2.*    | res4.7.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,256,3,3)          |
| res4.7.conv3.*    | res4.7.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)     |
| res4.8.conv1.*    | res4.8.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,1024,1,1)         |
| res4.8.conv2.*    | res4.8.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,256,3,3)          |
| res4.8.conv3.*    | res4.8.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)     |
| res4.9.conv1.*    | res4.9.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,1024,1,1)         |
| res4.9.conv2.*    | res4.9.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,256,3,3)          |
| res4.9.conv3.*    | res4.9.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)     |
| res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) () (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) () (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) () (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) () (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.*      | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                               | (64,) (64,) (64,) (64,) (64,3,3,3)                 |
| stem.conv2.*      | stem.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                               | (64,) (64,) (64,) (64,) (64,64,3,3)                |
| stem.conv3.*      | stem.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                               | (128,) (128,) (128,) (128,) (128,64,3,3)           |
WARNING [12/12 02:38:03 fvcore.common.checkpoint]: Some model parameters or buffers are not found in the checkpoint:
ins_embed_head.center_head.0.norm.{bias, running_mean, running_var, weight}
ins_embed_head.center_head.0.weight
ins_embed_head.center_head.1.norm.{bias, running_mean, running_var, weight}
ins_embed_head.center_head.1.weight
ins_embed_head.center_predictor.{bias, weight}
ins_embed_head.decoder.res2.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res2.fuse_conv.depthwise.weight
ins_embed_head.decoder.res2.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res2.fuse_conv.pointwise.weight
ins_embed_head.decoder.res2.project_conv.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res2.project_conv.weight
ins_embed_head.decoder.res3.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res3.fuse_conv.depthwise.weight
ins_embed_head.decoder.res3.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res3.fuse_conv.pointwise.weight
ins_embed_head.decoder.res3.project_conv.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res3.project_conv.weight
ins_embed_head.decoder.res5.project_conv.convs.0.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.0.weight
ins_embed_head.decoder.res5.project_conv.convs.1.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.1.depthwise.weight
ins_embed_head.decoder.res5.project_conv.convs.1.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.1.pointwise.weight
ins_embed_head.decoder.res5.project_conv.convs.2.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.2.depthwise.weight
ins_embed_head.decoder.res5.project_conv.convs.2.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.2.pointwise.weight
ins_embed_head.decoder.res5.project_conv.convs.3.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.3.depthwise.weight
ins_embed_head.decoder.res5.project_conv.convs.3.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.3.pointwise.weight
ins_embed_head.decoder.res5.project_conv.convs.4.1.{bias, weight}
ins_embed_head.decoder.res5.project_conv.project.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.project.weight
ins_embed_head.offset_head.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.offset_head.depthwise.weight
ins_embed_head.offset_head.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.offset_head.pointwise.weight
ins_embed_head.offset_predictor.{bias, weight}
sem_seg_head.decoder.res2.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res2.fuse_conv.depthwise.weight
sem_seg_head.decoder.res2.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res2.fuse_conv.pointwise.weight
sem_seg_head.decoder.res2.project_conv.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res2.project_conv.weight
sem_seg_head.decoder.res3.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res3.fuse_conv.depthwise.weight
sem_seg_head.decoder.res3.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res3.fuse_conv.pointwise.weight
sem_seg_head.decoder.res3.project_conv.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res3.project_conv.weight
sem_seg_head.decoder.res5.project_conv.convs.0.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.0.weight
sem_seg_head.decoder.res5.project_conv.convs.1.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.1.depthwise.weight
sem_seg_head.decoder.res5.project_conv.convs.1.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.1.pointwise.weight
sem_seg_head.decoder.res5.project_conv.convs.2.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.2.depthwise.weight
sem_seg_head.decoder.res5.project_conv.convs.2.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.2.pointwise.weight
sem_seg_head.decoder.res5.project_conv.convs.3.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.3.depthwise.weight
sem_seg_head.decoder.res5.project_conv.convs.3.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.3.pointwise.weight
sem_seg_head.decoder.res5.project_conv.convs.4.1.{bias, weight}
sem_seg_head.decoder.res5.project_conv.project.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.project.weight
sem_seg_head.head.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.head.depthwise.weight
sem_seg_head.head.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.head.pointwise.weight
sem_seg_head.predictor.{bias, weight}
WARNING [12/12 02:38:03 fvcore.common.checkpoint]: The checkpoint state_dict contains keys that are not used by the model:
  res2.0.conv1.norm.num_batches_tracked
  res2.0.conv2.norm.num_batches_tracked
  res2.0.conv3.norm.num_batches_tracked
  res2.0.shortcut.norm.num_batches_tracked
  res2.1.conv1.norm.num_batches_tracked
  res2.1.conv2.norm.num_batches_tracked
  res2.1.conv3.norm.num_batches_tracked
  res2.2.conv1.norm.num_batches_tracked
  res2.2.conv2.norm.num_batches_tracked
  res2.2.conv3.norm.num_batches_tracked
  res3.0.conv1.norm.num_batches_tracked
  res3.0.conv2.norm.num_batches_tracked
  res3.0.conv3.norm.num_batches_tracked
  res3.0.shortcut.norm.num_batches_tracked
  res3.1.conv1.norm.num_batches_tracked
  res3.1.conv2.norm.num_batches_tracked
  res3.1.conv3.norm.num_batches_tracked
  res3.2.conv1.norm.num_batches_tracked
  res3.2.conv2.norm.num_batches_tracked
  res3.2.conv3.norm.num_batches_tracked
  res3.3.conv1.norm.num_batches_tracked
  res3.3.conv2.norm.num_batches_tracked
  res3.3.conv3.norm.num_batches_tracked
  res4.0.conv1.norm.num_batches_tracked
  res4.0.conv2.norm.num_batches_tracked
  res4.0.conv3.norm.num_batches_tracked
  res4.0.shortcut.norm.num_batches_tracked
  res4.1.conv1.norm.num_batches_tracked
  res4.1.conv2.norm.num_batches_tracked
  res4.1.conv3.norm.num_batches_tracked
  res4.10.conv1.norm.num_batches_tracked
  res4.10.conv2.norm.num_batches_tracked
  res4.10.conv3.norm.num_batches_tracked
  res4.11.conv1.norm.num_batches_tracked
  res4.11.conv2.norm.num_batches_tracked
  res4.11.conv3.norm.num_batches_tracked
  res4.12.conv1.norm.num_batches_tracked
  res4.12.conv2.norm.num_batches_tracked
  res4.12.conv3.norm.num_batches_tracked
  res4.13.conv1.norm.num_batches_tracked
  res4.13.conv2.norm.num_batches_tracked
  res4.13.conv3.norm.num_batches_tracked
  res4.14.conv1.norm.num_batches_tracked
  res4.14.conv2.norm.num_batches_tracked
  res4.14.conv3.norm.num_batches_tracked
  res4.15.conv1.norm.num_batches_tracked
  res4.15.conv2.norm.num_batches_tracked
  res4.15.conv3.norm.num_batches_tracked
  res4.16.conv1.norm.num_batches_tracked
  res4.16.conv2.norm.num_batches_tracked
  res4.16.conv3.norm.num_batches_tracked
  res4.17.conv1.norm.num_batches_tracked
  res4.17.conv2.norm.num_batches_tracked
  res4.17.conv3.norm.num_batches_tracked
  res4.18.conv1.norm.num_batches_tracked
  res4.18.conv2.norm.num_batches_tracked
  res4.18.conv3.norm.num_batches_tracked
  res4.19.conv1.norm.num_batches_tracked
  res4.19.conv2.norm.num_batches_tracked
  res4.19.conv3.norm.num_batches_tracked
  res4.2.conv1.norm.num_batches_tracked
  res4.2.conv2.norm.num_batches_tracked
  res4.2.conv3.norm.num_batches_tracked
  res4.20.conv1.norm.num_batches_tracked
  res4.20.conv2.norm.num_batches_tracked
  res4.20.conv3.norm.num_batches_tracked
  res4.21.conv1.norm.num_batches_tracked
  res4.21.conv2.norm.num_batches_tracked
  res4.21.conv3.norm.num_batches_tracked
  res4.22.conv1.norm.num_batches_tracked
  res4.22.conv2.norm.num_batches_tracked
  res4.22.conv3.norm.num_batches_tracked
  res4.3.conv1.norm.num_batches_tracked
  res4.3.conv2.norm.num_batches_tracked
  res4.3.conv3.norm.num_batches_tracked
  res4.4.conv1.norm.num_batches_tracked
  res4.4.conv2.norm.num_batches_tracked
  res4.4.conv3.norm.num_batches_tracked
  res4.5.conv1.norm.num_batches_tracked
  res4.5.conv2.norm.num_batches_tracked
  res4.5.conv3.norm.num_batches_tracked
  res4.6.conv1.norm.num_batches_tracked
  res4.6.conv2.norm.num_batches_tracked
  res4.6.conv3.norm.num_batches_tracked
  res4.7.conv1.norm.num_batches_tracked
  res4.7.conv2.norm.num_batches_tracked
  res4.7.conv3.norm.num_batches_tracked
  res4.8.conv1.norm.num_batches_tracked
  res4.8.conv2.norm.num_batches_tracked
  res4.8.conv3.norm.num_batches_tracked
  res4.9.conv1.norm.num_batches_tracked
  res4.9.conv2.norm.num_batches_tracked
  res4.9.conv3.norm.num_batches_tracked
  stem.conv1.norm.num_batches_tracked
  stem.conv2.norm.num_batches_tracked
  stem.conv3.norm.num_batches_tracked
  stem.fc.{bias, weight}
[12/12 02:38:03 d2.engine.train_loop]: Starting training from iteration 0
/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 10 worker processes in total. Our suggested max number of worker in current system is 8, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  cpuset_checked))
[12/12 02:38:11 d2.utils.events]:  eta: 0:57:20  iter: 19  total_loss: 5.94  loss_sem_seg: 3.665  loss_center: 0.6576  loss_offset: 1.787  time: 0.3469  data_time: 0.0705  lr: 4.9867e-05  max_mem: 7418M
[12/12 02:38:18 d2.utils.events]:  eta: 0:57:22  iter: 39  total_loss: 6.043  loss_sem_seg: 3.796  loss_center: 0.852  loss_offset: 1.482  time: 0.3476  data_time: 0.0250  lr: 9.9552e-05  max_mem: 7418M
[12/12 02:38:25 d2.utils.events]:  eta: 0:56:52  iter: 59  total_loss: 6.309  loss_sem_seg: 3.775  loss_center: 0.8347  loss_offset: 1.723  time: 0.3463  data_time: 0.0244  lr: 0.00014906  max_mem: 7418M
[12/12 02:38:32 d2.utils.events]:  eta: 0:56:54  iter: 79  total_loss: 5.811  loss_sem_seg: 3.428  loss_center: 0.511  loss_offset: 1.626  time: 0.3472  data_time: 0.0254  lr: 0.00019838  max_mem: 7418M
[12/12 02:38:39 d2.utils.events]:  eta: 0:56:56  iter: 99  total_loss: 5.643  loss_sem_seg: 3.201  loss_center: 0.6111  loss_offset: 1.754  time: 0.3479  data_time: 0.0257  lr: 0.00024753  max_mem: 7418M
[12/12 02:38:46 d2.utils.events]:  eta: 0:57:06  iter: 119  total_loss: 5.504  loss_sem_seg: 3.237  loss_center: 0.5658  loss_offset: 1.686  time: 0.3488  data_time: 0.0273  lr: 0.00029649  max_mem: 7418M
[12/12 02:38:53 d2.utils.events]:  eta: 0:57:09  iter: 139  total_loss: 5.247  loss_sem_seg: 3.069  loss_center: 0.6173  loss_offset: 1.71  time: 0.3492  data_time: 0.0271  lr: 0.00034528  max_mem: 7418M
[12/12 02:39:00 d2.utils.events]:  eta: 0:57:02  iter: 159  total_loss: 4.815  loss_sem_seg: 2.669  loss_center: 0.5697  loss_offset: 1.568  time: 0.3494  data_time: 0.0273  lr: 0.00039388  max_mem: 7418M
[12/12 02:39:07 d2.utils.events]:  eta: 0:56:58  iter: 179  total_loss: 4.941  loss_sem_seg: 2.73  loss_center: 0.6385  loss_offset: 1.661  time: 0.3497  data_time: 0.0274  lr: 0.0004423  max_mem: 7418M
[12/12 02:39:14 d2.utils.events]:  eta: 0:56:52  iter: 199  total_loss: 4.767  loss_sem_seg: 2.394  loss_center: 0.6459  loss_offset: 1.62  time: 0.3496  data_time: 0.0253  lr: 0.00049055  max_mem: 7418M
[12/12 02:39:21 d2.utils.events]:  eta: 0:56:43  iter: 219  total_loss: 4.556  loss_sem_seg: 2.394  loss_center: 0.6446  loss_offset: 1.519  time: 0.3494  data_time: 0.0253  lr: 0.00053861  max_mem: 7418M
[12/12 02:39:28 d2.utils.events]:  eta: 0:56:33  iter: 239  total_loss: 4.742  loss_sem_seg: 2.406  loss_center: 0.6332  loss_offset: 1.57  time: 0.3494  data_time: 0.0267  lr: 0.00058649  max_mem: 7418M
[12/12 02:39:35 d2.utils.events]:  eta: 0:56:29  iter: 259  total_loss: 4.582  loss_sem_seg: 2.59  loss_center: 0.6424  loss_offset: 1.477  time: 0.3497  data_time: 0.0285  lr: 0.0006342  max_mem: 7418M
[12/12 02:39:42 d2.utils.events]:  eta: 0:56:24  iter: 279  total_loss: 4.072  loss_sem_seg: 2.372  loss_center: 0.5875  loss_offset: 1.147  time: 0.3498  data_time: 0.0269  lr: 0.00068172  max_mem: 7418M
[12/12 02:39:49 d2.utils.events]:  eta: 0:56:15  iter: 299  total_loss: 4.484  loss_sem_seg: 2.36  loss_center: 0.7091  loss_offset: 1.301  time: 0.3494  data_time: 0.0237  lr: 0.00072906  max_mem: 7418M
[12/12 02:39:56 d2.utils.events]:  eta: 0:56:08  iter: 319  total_loss: 4.106  loss_sem_seg: 2.102  loss_center: 0.7747  loss_offset: 1.186  time: 0.3494  data_time: 0.0258  lr: 0.00077622  max_mem: 7418M
[12/12 02:40:03 d2.utils.events]:  eta: 0:56:01  iter: 339  total_loss: 4.135  loss_sem_seg: 2.177  loss_center: 0.6207  loss_offset: 1.247  time: 0.3493  data_time: 0.0253  lr: 0.0008232  max_mem: 7418M
[12/12 02:40:10 d2.utils.events]:  eta: 0:55:55  iter: 359  total_loss: 4.1  loss_sem_seg: 2.067  loss_center: 0.6994  loss_offset: 1.267  time: 0.3492  data_time: 0.0249  lr: 0.00087  max_mem: 7418M
[12/12 02:40:17 d2.utils.events]:  eta: 0:55:49  iter: 379  total_loss: 4.144  loss_sem_seg: 2.057  loss_center: 0.6254  loss_offset: 1.233  time: 0.3492  data_time: 0.0258  lr: 0.00091662  max_mem: 7418M
[12/12 02:40:24 d2.utils.events]:  eta: 0:55:43  iter: 399  total_loss: 3.926  loss_sem_seg: 2.103  loss_center: 0.6655  loss_offset: 1.064  time: 0.3493  data_time: 0.0258  lr: 0.00096306  max_mem: 7418M
[12/12 02:40:31 d2.utils.events]:  eta: 0:55:36  iter: 419  total_loss: 3.925  loss_sem_seg: 2.002  loss_center: 0.6306  loss_offset: 1.207  time: 0.3494  data_time: 0.0270  lr: 0.0010093  max_mem: 7418M
[12/12 02:40:38 d2.utils.events]:  eta: 0:55:28  iter: 439  total_loss: 3.892  loss_sem_seg: 2.037  loss_center: 0.5637  loss_offset: 1.062  time: 0.3494  data_time: 0.0242  lr: 0.0010554  max_mem: 7418M
[12/12 02:40:45 d2.utils.events]:  eta: 0:55:20  iter: 459  total_loss: 3.668  loss_sem_seg: 1.906  loss_center: 0.5297  loss_offset: 1.104  time: 0.3492  data_time: 0.0244  lr: 0.0011013  max_mem: 7418M
[12/12 02:40:52 d2.utils.events]:  eta: 0:55:12  iter: 479  total_loss: 3.81  loss_sem_seg: 1.967  loss_center: 0.5254  loss_offset: 0.9565  time: 0.3492  data_time: 0.0256  lr: 0.001147  max_mem: 7418M
[12/12 02:40:59 d2.utils.events]:  eta: 0:55:05  iter: 499  total_loss: 3.632  loss_sem_seg: 2.043  loss_center: 0.6374  loss_offset: 0.9371  time: 0.3491  data_time: 0.0248  lr: 0.0011925  max_mem: 7418M
[12/12 02:41:06 d2.utils.events]:  eta: 0:55:00  iter: 519  total_loss: 3.561  loss_sem_seg: 1.924  loss_center: 0.5645  loss_offset: 0.979  time: 0.3493  data_time: 0.0277  lr: 0.0012379  max_mem: 7418M
[12/12 02:41:13 d2.utils.events]:  eta: 0:54:53  iter: 539  total_loss: 3.395  loss_sem_seg: 1.898  loss_center: 0.5339  loss_offset: 0.9985  time: 0.3493  data_time: 0.0251  lr: 0.001283  max_mem: 7418M
[12/12 02:41:20 d2.utils.events]:  eta: 0:54:46  iter: 559  total_loss: 3.358  loss_sem_seg: 1.762  loss_center: 0.6918  loss_offset: 0.8855  time: 0.3494  data_time: 0.0264  lr: 0.001328  max_mem: 7418M
[12/12 02:41:27 d2.utils.events]:  eta: 0:54:40  iter: 579  total_loss: 3.595  loss_sem_seg: 1.99  loss_center: 0.6466  loss_offset: 0.8577  time: 0.3494  data_time: 0.0264  lr: 0.0013728  max_mem: 7418M
[12/12 02:41:34 d2.utils.events]:  eta: 0:54:32  iter: 599  total_loss: 3.308  loss_sem_seg: 1.721  loss_center: 0.5575  loss_offset: 0.8162  time: 0.3494  data_time: 0.0261  lr: 0.0014175  max_mem: 7418M
[12/12 02:41:41 d2.utils.events]:  eta: 0:54:25  iter: 619  total_loss: 3.658  loss_sem_seg: 1.989  loss_center: 0.4635  loss_offset: 0.9366  time: 0.3493  data_time: 0.0254  lr: 0.0014619  max_mem: 7418M
[12/12 02:41:48 d2.utils.events]:  eta: 0:54:18  iter: 639  total_loss: 3.636  loss_sem_seg: 1.977  loss_center: 0.5657  loss_offset: 0.9067  time: 0.3494  data_time: 0.0277  lr: 0.0015062  max_mem: 7418M
[12/12 02:41:55 d2.utils.events]:  eta: 0:54:12  iter: 659  total_loss: 3.263  loss_sem_seg: 1.775  loss_center: 0.5219  loss_offset: 0.8731  time: 0.3493  data_time: 0.0255  lr: 0.0015503  max_mem: 7418M
[12/12 02:42:02 d2.utils.events]:  eta: 0:54:04  iter: 679  total_loss: 3.452  loss_sem_seg: 1.751  loss_center: 0.5405  loss_offset: 0.9362  time: 0.3494  data_time: 0.0266  lr: 0.0015942  max_mem: 7418M
[12/12 02:42:09 d2.utils.events]:  eta: 0:53:57  iter: 699  total_loss: 3.425  loss_sem_seg: 1.933  loss_center: 0.6231  loss_offset: 0.8437  time: 0.3494  data_time: 0.0250  lr: 0.0016379  max_mem: 7418M
[12/12 02:42:16 d2.utils.events]:  eta: 0:53:50  iter: 719  total_loss: 3.32  loss_sem_seg: 1.779  loss_center: 0.6039  loss_offset: 0.8205  time: 0.3493  data_time: 0.0254  lr: 0.0016814  max_mem: 7418M
[12/12 02:42:23 d2.utils.events]:  eta: 0:53:43  iter: 739  total_loss: 3.252  loss_sem_seg: 1.734  loss_center: 0.59  loss_offset: 0.77  time: 0.3494  data_time: 0.0257  lr: 0.0017248  max_mem: 7418M
[12/12 02:42:30 d2.utils.events]:  eta: 0:53:35  iter: 759  total_loss: 3.652  loss_sem_seg: 2.07  loss_center: 0.6367  loss_offset: 0.9026  time: 0.3493  data_time: 0.0244  lr: 0.0017679  max_mem: 7418M
[12/12 02:42:37 d2.utils.events]:  eta: 0:53:28  iter: 779  total_loss: 3.373  loss_sem_seg: 1.77  loss_center: 0.6183  loss_offset: 0.8427  time: 0.3492  data_time: 0.0246  lr: 0.0018109  max_mem: 7418M
[12/12 02:42:44 d2.utils.events]:  eta: 0:53:21  iter: 799  total_loss: 3.416  loss_sem_seg: 1.829  loss_center: 0.6856  loss_offset: 0.7765  time: 0.3492  data_time: 0.0243  lr: 0.0018537  max_mem: 7418M
[12/12 02:42:51 d2.utils.events]:  eta: 0:53:14  iter: 819  total_loss: 3.108  loss_sem_seg: 1.785  loss_center: 0.6098  loss_offset: 0.7678  time: 0.3492  data_time: 0.0250  lr: 0.0018964  max_mem: 7418M
[12/12 02:42:58 d2.utils.events]:  eta: 0:53:07  iter: 839  total_loss: 3.518  loss_sem_seg: 1.977  loss_center: 0.6842  loss_offset: 0.8313  time: 0.3493  data_time: 0.0270  lr: 0.0019388  max_mem: 7418M
[12/12 02:43:05 d2.utils.events]:  eta: 0:53:01  iter: 859  total_loss: 3.393  loss_sem_seg: 1.687  loss_center: 0.7249  loss_offset: 0.8113  time: 0.3492  data_time: 0.0251  lr: 0.0019811  max_mem: 7418M
[12/12 02:43:12 d2.utils.events]:  eta: 0:52:54  iter: 879  total_loss: 3.141  loss_sem_seg: 1.578  loss_center: 0.6397  loss_offset: 0.734  time: 0.3492  data_time: 0.0261  lr: 0.0020231  max_mem: 7418M
[12/12 02:43:19 d2.utils.events]:  eta: 0:52:47  iter: 899  total_loss: 3.394  loss_sem_seg: 1.816  loss_center: 0.7688  loss_offset: 0.7732  time: 0.3493  data_time: 0.0255  lr: 0.002065  max_mem: 7418M
[12/12 02:43:26 d2.utils.events]:  eta: 0:52:40  iter: 919  total_loss: 3.035  loss_sem_seg: 1.729  loss_center: 0.4849  loss_offset: 0.8365  time: 0.3493  data_time: 0.0246  lr: 0.0021068  max_mem: 7418M
[12/12 02:43:33 d2.utils.events]:  eta: 0:52:34  iter: 939  total_loss: 3.424  loss_sem_seg: 1.821  loss_center: 0.6794  loss_offset: 0.8477  time: 0.3493  data_time: 0.0263  lr: 0.0021483  max_mem: 7418M
[12/12 02:43:40 d2.utils.events]:  eta: 0:52:27  iter: 959  total_loss: 3.363  loss_sem_seg: 1.871  loss_center: 0.5688  loss_offset: 0.9154  time: 0.3493  data_time: 0.0277  lr: 0.0021896  max_mem: 7418M
[12/12 02:43:47 d2.utils.events]:  eta: 0:52:20  iter: 979  total_loss: 3.063  loss_sem_seg: 1.509  loss_center: 0.573  loss_offset: 0.7364  time: 0.3493  data_time: 0.0266  lr: 0.0022308  max_mem: 7418M
[12/12 02:43:54 d2.utils.events]:  eta: 0:52:14  iter: 999  total_loss: 3.181  loss_sem_seg: 1.742  loss_center: 0.5402  loss_offset: 0.8271  time: 0.3493  data_time: 0.0245  lr: 0.0022718  max_mem: 7418M
[12/12 02:44:01 d2.utils.events]:  eta: 0:52:07  iter: 1019  total_loss: 3.209  loss_sem_seg: 1.703  loss_center: 0.6972  loss_offset: 0.8452  time: 0.3492  data_time: 0.0257  lr: 0.0022695  max_mem: 7418M
[12/12 02:44:08 d2.utils.events]:  eta: 0:51:59  iter: 1039  total_loss: 3.274  loss_sem_seg: 1.834  loss_center: 0.5149  loss_offset: 0.8169  time: 0.3492  data_time: 0.0260  lr: 0.002265  max_mem: 7418M
[12/12 02:44:15 d2.utils.events]:  eta: 0:51:54  iter: 1059  total_loss: 3.228  loss_sem_seg: 1.558  loss_center: 0.6985  loss_offset: 0.9014  time: 0.3492  data_time: 0.0238  lr: 0.0022604  max_mem: 7418M
[12/12 02:44:22 d2.utils.events]:  eta: 0:51:45  iter: 1079  total_loss: 3.302  loss_sem_seg: 1.802  loss_center: 0.6321  loss_offset: 0.7606  time: 0.3491  data_time: 0.0254  lr: 0.0022559  max_mem: 7418M
[12/12 02:44:29 d2.utils.events]:  eta: 0:51:38  iter: 1099  total_loss: 3.083  loss_sem_seg: 1.605  loss_center: 0.5889  loss_offset: 0.7347  time: 0.3491  data_time: 0.0230  lr: 0.0022513  max_mem: 7418M
[12/12 02:44:36 d2.utils.events]:  eta: 0:51:31  iter: 1119  total_loss: 3.33  loss_sem_seg: 1.878  loss_center: 0.4466  loss_offset: 0.8032  time: 0.3491  data_time: 0.0277  lr: 0.0022468  max_mem: 7418M
[12/12 02:44:43 d2.utils.events]:  eta: 0:51:25  iter: 1139  total_loss: 2.944  loss_sem_seg: 1.632  loss_center: 0.4345  loss_offset: 0.7054  time: 0.3492  data_time: 0.0252  lr: 0.0022422  max_mem: 7418M
[12/12 02:44:50 d2.utils.events]:  eta: 0:51:18  iter: 1159  total_loss: 3.565  loss_sem_seg: 2.114  loss_center: 0.544  loss_offset: 0.8448  time: 0.3492  data_time: 0.0247  lr: 0.0022376  max_mem: 7418M
[12/12 02:44:57 d2.utils.events]:  eta: 0:51:12  iter: 1179  total_loss: 3.098  loss_sem_seg: 1.552  loss_center: 0.7588  loss_offset: 0.736  time: 0.3492  data_time: 0.0268  lr: 0.0022331  max_mem: 7418M
[12/12 02:45:04 d2.utils.events]:  eta: 0:51:05  iter: 1199  total_loss: 2.915  loss_sem_seg: 1.46  loss_center: 0.6254  loss_offset: 0.7542  time: 0.3492  data_time: 0.0256  lr: 0.0022285  max_mem: 7418M
[12/12 02:45:11 d2.utils.events]:  eta: 0:50:58  iter: 1219  total_loss: 2.978  loss_sem_seg: 1.611  loss_center: 0.6874  loss_offset: 0.6832  time: 0.3492  data_time: 0.0260  lr: 0.002224  max_mem: 7418M
[12/12 02:45:18 d2.utils.events]:  eta: 0:50:51  iter: 1239  total_loss: 3.072  loss_sem_seg: 1.619  loss_center: 0.5646  loss_offset: 0.8353  time: 0.3492  data_time: 0.0257  lr: 0.0022194  max_mem: 7418M
[12/12 02:45:25 d2.utils.events]:  eta: 0:50:44  iter: 1259  total_loss: 3.432  loss_sem_seg: 1.67  loss_center: 0.7577  loss_offset: 0.7693  time: 0.3492  data_time: 0.0247  lr: 0.0022149  max_mem: 7418M
[12/12 02:45:32 d2.utils.events]:  eta: 0:50:37  iter: 1279  total_loss: 2.802  loss_sem_seg: 1.503  loss_center: 0.5661  loss_offset: 0.6641  time: 0.3492  data_time: 0.0261  lr: 0.0022103  max_mem: 7418M
[12/12 02:45:39 d2.utils.events]:  eta: 0:50:30  iter: 1299  total_loss: 2.807  loss_sem_seg: 1.499  loss_center: 0.4024  loss_offset: 0.8518  time: 0.3492  data_time: 0.0243  lr: 0.0022057  max_mem: 7418M
[12/12 02:45:46 d2.utils.events]:  eta: 0:50:24  iter: 1319  total_loss: 2.837  loss_sem_seg: 1.529  loss_center: 0.5243  loss_offset: 0.7227  time: 0.3492  data_time: 0.0264  lr: 0.0022012  max_mem: 7418M
[12/12 02:45:53 d2.utils.events]:  eta: 0:50:16  iter: 1339  total_loss: 3.048  loss_sem_seg: 1.629  loss_center: 0.6497  loss_offset: 0.707  time: 0.3492  data_time: 0.0261  lr: 0.0021966  max_mem: 7418M
[12/12 02:46:00 d2.utils.events]:  eta: 0:50:09  iter: 1359  total_loss: 3.213  loss_sem_seg: 1.456  loss_center: 0.7027  loss_offset: 0.8175  time: 0.3492  data_time: 0.0261  lr: 0.002192  max_mem: 7418M
[12/12 02:46:07 d2.utils.events]:  eta: 0:50:02  iter: 1379  total_loss: 2.877  loss_sem_seg: 1.438  loss_center: 0.5649  loss_offset: 0.7614  time: 0.3492  data_time: 0.0257  lr: 0.0021875  max_mem: 7418M
[12/12 02:46:14 d2.utils.events]:  eta: 0:49:55  iter: 1399  total_loss: 2.848  loss_sem_seg: 1.451  loss_center: 0.646  loss_offset: 0.6465  time: 0.3492  data_time: 0.0254  lr: 0.0021829  max_mem: 7418M
[12/12 02:46:21 d2.utils.events]:  eta: 0:49:48  iter: 1419  total_loss: 2.983  loss_sem_seg: 1.622  loss_center: 0.5135  loss_offset: 0.7178  time: 0.3493  data_time: 0.0267  lr: 0.0021783  max_mem: 7418M
[12/12 02:46:28 d2.utils.events]:  eta: 0:49:41  iter: 1439  total_loss: 3.224  loss_sem_seg: 1.528  loss_center: 0.8402  loss_offset: 0.781  time: 0.3492  data_time: 0.0261  lr: 0.0021738  max_mem: 7418M
[12/12 02:46:35 d2.utils.events]:  eta: 0:49:36  iter: 1459  total_loss: 2.843  loss_sem_seg: 1.576  loss_center: 0.5127  loss_offset: 0.7577  time: 0.3492  data_time: 0.0264  lr: 0.0021692  max_mem: 7418M
[12/12 02:46:42 d2.utils.events]:  eta: 0:49:29  iter: 1479  total_loss: 3.164  loss_sem_seg: 1.502  loss_center: 0.7502  loss_offset: 0.6756  time: 0.3492  data_time: 0.0272  lr: 0.0021646  max_mem: 7418M
[12/12 02:46:49 d2.utils.events]:  eta: 0:49:23  iter: 1499  total_loss: 3.208  loss_sem_seg: 1.623  loss_center: 0.6085  loss_offset: 0.8226  time: 0.3492  data_time: 0.0253  lr: 0.00216  max_mem: 7418M
[12/12 02:46:56 d2.utils.events]:  eta: 0:49:14  iter: 1519  total_loss: 2.791  loss_sem_seg: 1.42  loss_center: 0.5325  loss_offset: 0.7979  time: 0.3493  data_time: 0.0270  lr: 0.0021555  max_mem: 7418M
[12/12 02:47:03 d2.utils.events]:  eta: 0:49:07  iter: 1539  total_loss: 2.888  loss_sem_seg: 1.451  loss_center: 0.495  loss_offset: 0.6447  time: 0.3493  data_time: 0.0259  lr: 0.0021509  max_mem: 7418M
[12/12 02:47:10 d2.utils.events]:  eta: 0:49:01  iter: 1559  total_loss: 2.862  loss_sem_seg: 1.46  loss_center: 0.5256  loss_offset: 0.722  time: 0.3493  data_time: 0.0281  lr: 0.0021463  max_mem: 7418M
[12/12 02:47:17 d2.utils.events]:  eta: 0:48:53  iter: 1579  total_loss: 2.744  loss_sem_seg: 1.324  loss_center: 0.5917  loss_offset: 0.735  time: 0.3493  data_time: 0.0250  lr: 0.0021417  max_mem: 7418M
[12/12 02:47:24 d2.utils.events]:  eta: 0:48:46  iter: 1599  total_loss: 2.872  loss_sem_seg: 1.417  loss_center: 0.6316  loss_offset: 0.7603  time: 0.3493  data_time: 0.0251  lr: 0.0021372  max_mem: 7418M
[12/12 02:47:31 d2.utils.events]:  eta: 0:48:41  iter: 1619  total_loss: 2.973  loss_sem_seg: 1.48  loss_center: 0.6023  loss_offset: 0.8111  time: 0.3493  data_time: 0.0254  lr: 0.0021326  max_mem: 7418M
[12/12 02:47:38 d2.utils.events]:  eta: 0:48:32  iter: 1639  total_loss: 2.889  loss_sem_seg: 1.595  loss_center: 0.6362  loss_offset: 0.7137  time: 0.3493  data_time: 0.0252  lr: 0.002128  max_mem: 7418M
[12/12 02:47:45 d2.utils.events]:  eta: 0:48:25  iter: 1659  total_loss: 3.126  loss_sem_seg: 1.569  loss_center: 0.6005  loss_offset: 0.8137  time: 0.3494  data_time: 0.0258  lr: 0.0021234  max_mem: 7418M
[12/12 02:47:52 d2.utils.events]:  eta: 0:48:20  iter: 1679  total_loss: 2.699  loss_sem_seg: 1.48  loss_center: 0.5748  loss_offset: 0.6977  time: 0.3494  data_time: 0.0247  lr: 0.0021188  max_mem: 7418M
[12/12 02:47:59 d2.utils.events]:  eta: 0:48:13  iter: 1699  total_loss: 2.643  loss_sem_seg: 1.411  loss_center: 0.5994  loss_offset: 0.6401  time: 0.3494  data_time: 0.0257  lr: 0.0021143  max_mem: 7418M
[12/12 02:48:06 d2.utils.events]:  eta: 0:48:06  iter: 1719  total_loss: 2.937  loss_sem_seg: 1.464  loss_center: 0.5441  loss_offset: 0.6793  time: 0.3494  data_time: 0.0253  lr: 0.0021097  max_mem: 7418M
[12/12 02:48:13 d2.utils.events]:  eta: 0:47:59  iter: 1739  total_loss: 3.071  loss_sem_seg: 1.658  loss_center: 0.708  loss_offset: 0.7672  time: 0.3494  data_time: 0.0275  lr: 0.0021051  max_mem: 7418M
[12/12 02:48:20 d2.utils.events]:  eta: 0:47:53  iter: 1759  total_loss: 2.864  loss_sem_seg: 1.451  loss_center: 0.5748  loss_offset: 0.6667  time: 0.3494  data_time: 0.0250  lr: 0.0021005  max_mem: 7418M
[12/12 02:48:27 d2.utils.events]:  eta: 0:47:46  iter: 1779  total_loss: 2.878  loss_sem_seg: 1.524  loss_center: 0.506  loss_offset: 0.6856  time: 0.3494  data_time: 0.0265  lr: 0.0020959  max_mem: 7418M
[12/12 02:48:34 d2.utils.events]:  eta: 0:47:40  iter: 1799  total_loss: 3.21  loss_sem_seg: 1.604  loss_center: 0.6281  loss_offset: 0.7618  time: 0.3494  data_time: 0.0274  lr: 0.0020913  max_mem: 7418M
[12/12 02:48:41 d2.utils.events]:  eta: 0:47:32  iter: 1819  total_loss: 2.618  loss_sem_seg: 1.36  loss_center: 0.666  loss_offset: 0.5984  time: 0.3494  data_time: 0.0248  lr: 0.0020867  max_mem: 7418M
[12/12 02:48:48 d2.utils.events]:  eta: 0:47:26  iter: 1839  total_loss: 2.879  loss_sem_seg: 1.601  loss_center: 0.6023  loss_offset: 0.7649  time: 0.3494  data_time: 0.0279  lr: 0.0020821  max_mem: 7418M
[12/12 02:48:55 d2.utils.events]:  eta: 0:47:18  iter: 1859  total_loss: 2.79  loss_sem_seg: 1.311  loss_center: 0.7251  loss_offset: 0.7026  time: 0.3494  data_time: 0.0248  lr: 0.0020775  max_mem: 7418M
[12/12 02:49:02 d2.utils.events]:  eta: 0:47:12  iter: 1879  total_loss: 2.75  loss_sem_seg: 1.663  loss_center: 0.4585  loss_offset: 0.6777  time: 0.3494  data_time: 0.0273  lr: 0.0020729  max_mem: 7418M
[12/12 02:49:09 d2.utils.events]:  eta: 0:47:04  iter: 1899  total_loss: 3.128  loss_sem_seg: 1.529  loss_center: 0.6526  loss_offset: 0.7127  time: 0.3494  data_time: 0.0268  lr: 0.0020684  max_mem: 7418M
[12/12 02:49:16 d2.utils.events]:  eta: 0:46:57  iter: 1919  total_loss: 2.567  loss_sem_seg: 1.372  loss_center: 0.5623  loss_offset: 0.6654  time: 0.3494  data_time: 0.0255  lr: 0.0020638  max_mem: 7418M
[12/12 02:49:23 d2.utils.events]:  eta: 0:46:50  iter: 1939  total_loss: 2.995  loss_sem_seg: 1.462  loss_center: 0.7127  loss_offset: 0.7511  time: 0.3495  data_time: 0.0278  lr: 0.0020592  max_mem: 7418M
[12/12 02:49:30 d2.utils.events]:  eta: 0:46:43  iter: 1959  total_loss: 3.023  loss_sem_seg: 1.536  loss_center: 0.6304  loss_offset: 0.7587  time: 0.3495  data_time: 0.0256  lr: 0.0020546  max_mem: 7418M
[12/12 02:49:37 d2.utils.events]:  eta: 0:46:36  iter: 1979  total_loss: 2.719  loss_sem_seg: 1.351  loss_center: 0.4724  loss_offset: 0.6029  time: 0.3495  data_time: 0.0266  lr: 0.00205  max_mem: 7418M
[12/12 02:49:44 d2.utils.events]:  eta: 0:46:29  iter: 1999  total_loss: 2.903  loss_sem_seg: 1.386  loss_center: 0.6193  loss_offset: 0.8078  time: 0.3495  data_time: 0.0267  lr: 0.0020454  max_mem: 7418M
[12/12 02:49:51 d2.utils.events]:  eta: 0:46:21  iter: 2019  total_loss: 2.824  loss_sem_seg: 1.34  loss_center: 0.6907  loss_offset: 0.6627  time: 0.3495  data_time: 0.0259  lr: 0.0020408  max_mem: 7418M
[12/12 02:49:58 d2.utils.events]:  eta: 0:46:16  iter: 2039  total_loss: 2.9  loss_sem_seg: 1.41  loss_center: 0.4875  loss_offset: 0.6273  time: 0.3495  data_time: 0.0269  lr: 0.0020362  max_mem: 7418M
[12/12 02:50:05 d2.utils.events]:  eta: 0:46:09  iter: 2059  total_loss: 2.558  loss_sem_seg: 1.207  loss_center: 0.6235  loss_offset: 0.6037  time: 0.3495  data_time: 0.0253  lr: 0.0020316  max_mem: 7418M
[12/12 02:50:12 d2.utils.events]:  eta: 0:46:03  iter: 2079  total_loss: 2.579  loss_sem_seg: 1.285  loss_center: 0.4883  loss_offset: 0.6982  time: 0.3495  data_time: 0.0274  lr: 0.0020269  max_mem: 7418M
[12/12 02:50:19 d2.utils.events]:  eta: 0:45:56  iter: 2099  total_loss: 3.042  loss_sem_seg: 1.54  loss_center: 0.5868  loss_offset: 0.8115  time: 0.3495  data_time: 0.0263  lr: 0.0020223  max_mem: 7418M
[12/12 02:50:26 d2.utils.events]:  eta: 0:45:49  iter: 2119  total_loss: 2.748  loss_sem_seg: 1.395  loss_center: 0.5768  loss_offset: 0.6886  time: 0.3495  data_time: 0.0273  lr: 0.0020177  max_mem: 7418M
[12/12 02:50:33 d2.utils.events]:  eta: 0:45:42  iter: 2139  total_loss: 2.616  loss_sem_seg: 1.325  loss_center: 0.5182  loss_offset: 0.6391  time: 0.3495  data_time: 0.0255  lr: 0.0020131  max_mem: 7418M
[12/12 02:50:40 d2.utils.events]:  eta: 0:45:34  iter: 2159  total_loss: 2.775  loss_sem_seg: 1.543  loss_center: 0.5511  loss_offset: 0.693  time: 0.3495  data_time: 0.0251  lr: 0.0020085  max_mem: 7418M
[12/12 02:50:47 d2.utils.events]:  eta: 0:45:27  iter: 2179  total_loss: 2.813  loss_sem_seg: 1.297  loss_center: 0.6475  loss_offset: 0.796  time: 0.3495  data_time: 0.0250  lr: 0.0020039  max_mem: 7418M
[12/12 02:50:54 d2.utils.events]:  eta: 0:45:19  iter: 2199  total_loss: 2.523  loss_sem_seg: 1.283  loss_center: 0.4837  loss_offset: 0.6887  time: 0.3495  data_time: 0.0261  lr: 0.0019993  max_mem: 7418M
[12/12 02:51:01 d2.utils.events]:  eta: 0:45:13  iter: 2219  total_loss: 2.695  loss_sem_seg: 1.411  loss_center: 0.592  loss_offset: 0.6715  time: 0.3495  data_time: 0.0265  lr: 0.0019947  max_mem: 7418M
[12/12 02:51:08 d2.utils.events]:  eta: 0:45:06  iter: 2239  total_loss: 2.774  loss_sem_seg: 1.296  loss_center: 0.6061  loss_offset: 0.7661  time: 0.3495  data_time: 0.0265  lr: 0.0019901  max_mem: 7418M
[12/12 02:51:15 d2.utils.events]:  eta: 0:44:59  iter: 2259  total_loss: 2.67  loss_sem_seg: 1.197  loss_center: 0.5932  loss_offset: 0.6382  time: 0.3495  data_time: 0.0267  lr: 0.0019854  max_mem: 7418M
[12/12 02:51:22 d2.utils.events]:  eta: 0:44:53  iter: 2279  total_loss: 2.79  loss_sem_seg: 1.343  loss_center: 0.6626  loss_offset: 0.6466  time: 0.3495  data_time: 0.0259  lr: 0.0019808  max_mem: 7418M
[12/12 02:51:29 d2.utils.events]:  eta: 0:44:46  iter: 2299  total_loss: 2.741  loss_sem_seg: 1.418  loss_center: 0.4747  loss_offset: 0.6889  time: 0.3495  data_time: 0.0258  lr: 0.0019762  max_mem: 7418M
[12/12 02:51:36 d2.utils.events]:  eta: 0:44:38  iter: 2319  total_loss: 2.518  loss_sem_seg: 1.318  loss_center: 0.577  loss_offset: 0.5237  time: 0.3495  data_time: 0.0242  lr: 0.0019716  max_mem: 7418M
[12/12 02:51:43 d2.utils.events]:  eta: 0:44:32  iter: 2339  total_loss: 2.53  loss_sem_seg: 1.263  loss_center: 0.6238  loss_offset: 0.7724  time: 0.3495  data_time: 0.0278  lr: 0.001967  max_mem: 7418M
[12/12 02:51:50 d2.utils.events]:  eta: 0:44:25  iter: 2359  total_loss: 2.569  loss_sem_seg: 1.29  loss_center: 0.5139  loss_offset: 0.6486  time: 0.3495  data_time: 0.0257  lr: 0.0019623  max_mem: 7418M
[12/12 02:51:57 d2.utils.events]:  eta: 0:44:19  iter: 2379  total_loss: 2.69  loss_sem_seg: 1.242  loss_center: 0.5902  loss_offset: 0.5803  time: 0.3495  data_time: 0.0262  lr: 0.0019577  max_mem: 7418M
[12/12 02:52:04 d2.utils.events]:  eta: 0:44:12  iter: 2399  total_loss: 2.543  loss_sem_seg: 1.093  loss_center: 0.6081  loss_offset: 0.858  time: 0.3495  data_time: 0.0263  lr: 0.0019531  max_mem: 7418M
[12/12 02:52:11 d2.utils.events]:  eta: 0:44:05  iter: 2419  total_loss: 2.574  loss_sem_seg: 1.34  loss_center: 0.5574  loss_offset: 0.6858  time: 0.3495  data_time: 0.0265  lr: 0.0019485  max_mem: 7418M
[12/12 02:52:18 d2.utils.events]:  eta: 0:43:58  iter: 2439  total_loss: 2.368  loss_sem_seg: 1.257  loss_center: 0.5082  loss_offset: 0.6163  time: 0.3496  data_time: 0.0278  lr: 0.0019438  max_mem: 7418M
[12/12 02:52:25 d2.utils.events]:  eta: 0:43:52  iter: 2459  total_loss: 2.401  loss_sem_seg: 1.269  loss_center: 0.4904  loss_offset: 0.5983  time: 0.3496  data_time: 0.0265  lr: 0.0019392  max_mem: 7418M
[12/12 02:52:32 d2.utils.events]:  eta: 0:43:45  iter: 2479  total_loss: 2.862  loss_sem_seg: 1.356  loss_center: 0.6233  loss_offset: 0.7016  time: 0.3496  data_time: 0.0261  lr: 0.0019346  max_mem: 7418M
[12/12 02:52:39 d2.utils.events]:  eta: 0:43:38  iter: 2499  total_loss: 2.415  loss_sem_seg: 1.18  loss_center: 0.5333  loss_offset: 0.7351  time: 0.3496  data_time: 0.0257  lr: 0.00193  max_mem: 7418M
[12/12 02:52:46 d2.utils.events]:  eta: 0:43:32  iter: 2519  total_loss: 2.505  loss_sem_seg: 1.311  loss_center: 0.5869  loss_offset: 0.5741  time: 0.3496  data_time: 0.0268  lr: 0.0019253  max_mem: 7418M
[12/12 02:52:53 d2.utils.events]:  eta: 0:43:25  iter: 2539  total_loss: 2.306  loss_sem_seg: 1.112  loss_center: 0.471  loss_offset: 0.6905  time: 0.3496  data_time: 0.0259  lr: 0.0019207  max_mem: 7418M
[12/12 02:53:00 d2.utils.events]:  eta: 0:43:16  iter: 2559  total_loss: 2.663  loss_sem_seg: 1.353  loss_center: 0.5338  loss_offset: 0.6296  time: 0.3496  data_time: 0.0254  lr: 0.0019161  max_mem: 7418M
[12/12 02:53:07 d2.utils.events]:  eta: 0:43:10  iter: 2579  total_loss: 2.56  loss_sem_seg: 1.446  loss_center: 0.5313  loss_offset: 0.6516  time: 0.3496  data_time: 0.0267  lr: 0.0019114  max_mem: 7418M
[12/12 02:53:14 d2.utils.events]:  eta: 0:43:04  iter: 2599  total_loss: 2.619  loss_sem_seg: 1.279  loss_center: 0.6236  loss_offset: 0.6988  time: 0.3496  data_time: 0.0261  lr: 0.0019068  max_mem: 7418M
[12/12 02:53:21 d2.utils.events]:  eta: 0:42:56  iter: 2619  total_loss: 2.644  loss_sem_seg: 1.463  loss_center: 0.5878  loss_offset: 0.6753  time: 0.3496  data_time: 0.0255  lr: 0.0019021  max_mem: 7418M
[12/12 02:53:28 d2.utils.events]:  eta: 0:42:50  iter: 2639  total_loss: 2.668  loss_sem_seg: 1.467  loss_center: 0.4047  loss_offset: 0.6884  time: 0.3497  data_time: 0.0272  lr: 0.0018975  max_mem: 7418M
[12/12 02:53:35 d2.utils.events]:  eta: 0:42:43  iter: 2659  total_loss: 2.717  loss_sem_seg: 1.263  loss_center: 0.6889  loss_offset: 0.6416  time: 0.3497  data_time: 0.0268  lr: 0.0018929  max_mem: 7418M
[12/12 02:53:42 d2.utils.events]:  eta: 0:42:35  iter: 2679  total_loss: 2.716  loss_sem_seg: 1.306  loss_center: 0.7133  loss_offset: 0.6485  time: 0.3497  data_time: 0.0272  lr: 0.0018882  max_mem: 7418M
[12/12 02:53:49 d2.utils.events]:  eta: 0:42:28  iter: 2699  total_loss: 2.534  loss_sem_seg: 1.367  loss_center: 0.5672  loss_offset: 0.6779  time: 0.3497  data_time: 0.0273  lr: 0.0018836  max_mem: 7418M
[12/12 02:53:56 d2.utils.events]:  eta: 0:42:21  iter: 2719  total_loss: 2.655  loss_sem_seg: 1.284  loss_center: 0.4671  loss_offset: 0.6531  time: 0.3497  data_time: 0.0262  lr: 0.0018789  max_mem: 7418M
[12/12 02:54:03 d2.utils.events]:  eta: 0:42:14  iter: 2739  total_loss: 2.852  loss_sem_seg: 1.354  loss_center: 0.6813  loss_offset: 0.7402  time: 0.3497  data_time: 0.0270  lr: 0.0018743  max_mem: 7418M
[12/12 02:54:10 d2.utils.events]:  eta: 0:42:07  iter: 2759  total_loss: 2.666  loss_sem_seg: 1.372  loss_center: 0.5375  loss_offset: 0.7106  time: 0.3497  data_time: 0.0269  lr: 0.0018696  max_mem: 7418M
[12/12 02:54:18 d2.utils.events]:  eta: 0:42:01  iter: 2779  total_loss: 2.372  loss_sem_seg: 1.127  loss_center: 0.679  loss_offset: 0.6075  time: 0.3497  data_time: 0.0259  lr: 0.001865  max_mem: 7418M
[12/12 02:54:25 d2.utils.events]:  eta: 0:41:53  iter: 2799  total_loss: 2.612  loss_sem_seg: 1.263  loss_center: 0.614  loss_offset: 0.5367  time: 0.3497  data_time: 0.0271  lr: 0.0018603  max_mem: 7418M
[12/12 02:54:32 d2.utils.events]:  eta: 0:41:46  iter: 2819  total_loss: 2.396  loss_sem_seg: 1.179  loss_center: 0.4861  loss_offset: 0.5441  time: 0.3498  data_time: 0.0291  lr: 0.0018557  max_mem: 7418M
[12/12 02:54:39 d2.utils.events]:  eta: 0:41:39  iter: 2839  total_loss: 2.778  loss_sem_seg: 1.227  loss_center: 0.5777  loss_offset: 0.7809  time: 0.3498  data_time: 0.0254  lr: 0.001851  max_mem: 7418M
[12/12 02:54:46 d2.utils.events]:  eta: 0:41:32  iter: 2859  total_loss: 2.416  loss_sem_seg: 1.166  loss_center: 0.5159  loss_offset: 0.5984  time: 0.3498  data_time: 0.0267  lr: 0.0018464  max_mem: 7418M
[12/12 02:54:53 d2.utils.events]:  eta: 0:41:25  iter: 2879  total_loss: 2.659  loss_sem_seg: 1.273  loss_center: 0.6148  loss_offset: 0.657  time: 0.3498  data_time: 0.0265  lr: 0.0018417  max_mem: 7418M
[12/12 02:55:00 d2.utils.events]:  eta: 0:41:19  iter: 2899  total_loss: 2.405  loss_sem_seg: 1.296  loss_center: 0.5333  loss_offset: 0.6659  time: 0.3498  data_time: 0.0270  lr: 0.0018371  max_mem: 7418M
[12/12 02:55:07 d2.utils.events]:  eta: 0:41:12  iter: 2919  total_loss: 2.759  loss_sem_seg: 1.362  loss_center: 0.4713  loss_offset: 0.7447  time: 0.3498  data_time: 0.0261  lr: 0.0018324  max_mem: 7418M
[12/12 02:55:14 d2.utils.events]:  eta: 0:41:04  iter: 2939  total_loss: 2.921  loss_sem_seg: 1.392  loss_center: 0.6047  loss_offset: 0.7001  time: 0.3498  data_time: 0.0277  lr: 0.0018278  max_mem: 7418M
[12/12 02:55:21 d2.utils.events]:  eta: 0:40:58  iter: 2959  total_loss: 2.586  loss_sem_seg: 1.297  loss_center: 0.4677  loss_offset: 0.589  time: 0.3498  data_time: 0.0262  lr: 0.0018231  max_mem: 7418M
[12/12 02:55:28 d2.utils.events]:  eta: 0:40:52  iter: 2979  total_loss: 2.629  loss_sem_seg: 1.484  loss_center: 0.5014  loss_offset: 0.6826  time: 0.3498  data_time: 0.0273  lr: 0.0018184  max_mem: 7418M
[12/12 02:55:35 d2.utils.events]:  eta: 0:40:45  iter: 2999  total_loss: 2.522  loss_sem_seg: 1.262  loss_center: 0.4677  loss_offset: 0.7976  time: 0.3498  data_time: 0.0249  lr: 0.0018138  max_mem: 7418M
[12/12 02:55:42 d2.utils.events]:  eta: 0:40:38  iter: 3019  total_loss: 2.6  loss_sem_seg: 1.196  loss_center: 0.47  loss_offset: 0.5909  time: 0.3498  data_time: 0.0261  lr: 0.0018091  max_mem: 7418M
[12/12 02:55:49 d2.utils.events]:  eta: 0:40:31  iter: 3039  total_loss: 2.269  loss_sem_seg: 1.288  loss_center: 0.5285  loss_offset: 0.5773  time: 0.3498  data_time: 0.0277  lr: 0.0018044  max_mem: 7418M
[12/12 02:55:56 d2.utils.events]:  eta: 0:40:24  iter: 3059  total_loss: 2.27  loss_sem_seg: 1.215  loss_center: 0.4483  loss_offset: 0.6054  time: 0.3498  data_time: 0.0259  lr: 0.0017998  max_mem: 7418M
[12/12 02:56:03 d2.utils.events]:  eta: 0:40:16  iter: 3079  total_loss: 2.118  loss_sem_seg: 1.183  loss_center: 0.5106  loss_offset: 0.5256  time: 0.3498  data_time: 0.0244  lr: 0.0017951  max_mem: 7418M
[12/12 02:56:10 d2.utils.events]:  eta: 0:40:09  iter: 3099  total_loss: 2.271  loss_sem_seg: 1.143  loss_center: 0.5014  loss_offset: 0.5094  time: 0.3498  data_time: 0.0273  lr: 0.0017904  max_mem: 7418M
[12/12 02:56:17 d2.utils.events]:  eta: 0:40:02  iter: 3119  total_loss: 2.546  loss_sem_seg: 1.405  loss_center: 0.5083  loss_offset: 0.5583  time: 0.3498  data_time: 0.0283  lr: 0.0017858  max_mem: 7418M
[12/12 02:56:24 d2.utils.events]:  eta: 0:39:56  iter: 3139  total_loss: 2.229  loss_sem_seg: 1.111  loss_center: 0.5545  loss_offset: 0.5457  time: 0.3498  data_time: 0.0270  lr: 0.0017811  max_mem: 7418M
[12/12 02:56:31 d2.utils.events]:  eta: 0:39:49  iter: 3159  total_loss: 2.327  loss_sem_seg: 1.205  loss_center: 0.5939  loss_offset: 0.6295  time: 0.3498  data_time: 0.0258  lr: 0.0017764  max_mem: 7418M
[12/12 02:56:38 d2.utils.events]:  eta: 0:39:43  iter: 3179  total_loss: 2.596  loss_sem_seg: 1.359  loss_center: 0.6149  loss_offset: 0.6097  time: 0.3498  data_time: 0.0267  lr: 0.0017718  max_mem: 7418M
[12/12 02:56:45 d2.utils.events]:  eta: 0:39:36  iter: 3199  total_loss: 2.503  loss_sem_seg: 1.262  loss_center: 0.517  loss_offset: 0.7837  time: 0.3499  data_time: 0.0276  lr: 0.0017671  max_mem: 7418M
[12/12 02:56:52 d2.utils.events]:  eta: 0:39:29  iter: 3219  total_loss: 2.569  loss_sem_seg: 1.345  loss_center: 0.5552  loss_offset: 0.5761  time: 0.3498  data_time: 0.0261  lr: 0.0017624  max_mem: 7418M
[12/12 02:56:59 d2.utils.events]:  eta: 0:39:25  iter: 3239  total_loss: 2.344  loss_sem_seg: 1.247  loss_center: 0.5041  loss_offset: 0.4684  time: 0.3499  data_time: 0.0273  lr: 0.0017577  max_mem: 7418M
[12/12 02:57:06 d2.utils.events]:  eta: 0:39:19  iter: 3259  total_loss: 2.499  loss_sem_seg: 1.18  loss_center: 0.5495  loss_offset: 0.6114  time: 0.3499  data_time: 0.0270  lr: 0.001753  max_mem: 7418M
[12/12 02:57:13 d2.utils.events]:  eta: 0:39:13  iter: 3279  total_loss: 2.541  loss_sem_seg: 1.158  loss_center: 0.588  loss_offset: 0.6199  time: 0.3499  data_time: 0.0267  lr: 0.0017484  max_mem: 7418M
[12/12 02:57:20 d2.utils.events]:  eta: 0:39:05  iter: 3299  total_loss: 2.739  loss_sem_seg: 1.127  loss_center: 0.7904  loss_offset: 0.6377  time: 0.3499  data_time: 0.0259  lr: 0.0017437  max_mem: 7418M
[12/12 02:57:27 d2.utils.events]:  eta: 0:39:00  iter: 3319  total_loss: 2.518  loss_sem_seg: 1.333  loss_center: 0.461  loss_offset: 0.6936  time: 0.3499  data_time: 0.0267  lr: 0.001739  max_mem: 7418M
[12/12 02:57:34 d2.utils.events]:  eta: 0:38:51  iter: 3339  total_loss: 2.307  loss_sem_seg: 1.117  loss_center: 0.5018  loss_offset: 0.5501  time: 0.3499  data_time: 0.0267  lr: 0.0017343  max_mem: 7418M
[12/12 02:57:41 d2.utils.events]:  eta: 0:38:45  iter: 3359  total_loss: 2.397  loss_sem_seg: 1.076  loss_center: 0.7  loss_offset: 0.6198  time: 0.3499  data_time: 0.0255  lr: 0.0017296  max_mem: 7418M
[12/12 02:57:48 d2.utils.events]:  eta: 0:38:37  iter: 3379  total_loss: 2.115  loss_sem_seg: 0.99  loss_center: 0.4843  loss_offset: 0.5299  time: 0.3499  data_time: 0.0262  lr: 0.0017249  max_mem: 7418M
[12/12 02:57:55 d2.utils.events]:  eta: 0:38:30  iter: 3399  total_loss: 2.359  loss_sem_seg: 1.131  loss_center: 0.3933  loss_offset: 0.7401  time: 0.3498  data_time: 0.0250  lr: 0.0017202  max_mem: 7418M
[12/12 02:58:02 d2.utils.events]:  eta: 0:38:25  iter: 3419  total_loss: 2.557  loss_sem_seg: 1.332  loss_center: 0.55  loss_offset: 0.5993  time: 0.3498  data_time: 0.0260  lr: 0.0017155  max_mem: 7418M
[12/12 02:58:09 d2.utils.events]:  eta: 0:38:16  iter: 3439  total_loss: 2.437  loss_sem_seg: 1.116  loss_center: 0.5863  loss_offset: 0.6368  time: 0.3498  data_time: 0.0264  lr: 0.0017109  max_mem: 7418M
[12/12 02:58:16 d2.utils.events]:  eta: 0:38:08  iter: 3459  total_loss: 2.746  loss_sem_seg: 1.253  loss_center: 0.6298  loss_offset: 0.6267  time: 0.3498  data_time: 0.0266  lr: 0.0017062  max_mem: 7418M
[12/12 02:58:23 d2.utils.events]:  eta: 0:38:01  iter: 3479  total_loss: 2.27  loss_sem_seg: 1.053  loss_center: 0.5263  loss_offset: 0.5317  time: 0.3498  data_time: 0.0270  lr: 0.0017015  max_mem: 7418M
[12/12 02:58:30 d2.utils.events]:  eta: 0:37:55  iter: 3499  total_loss: 2.282  loss_sem_seg: 1.164  loss_center: 0.4671  loss_offset: 0.5808  time: 0.3498  data_time: 0.0270  lr: 0.0016968  max_mem: 7418M
[12/12 02:58:37 d2.utils.events]:  eta: 0:37:47  iter: 3519  total_loss: 2.71  loss_sem_seg: 1.435  loss_center: 0.4722  loss_offset: 0.4882  time: 0.3498  data_time: 0.0253  lr: 0.0016921  max_mem: 7418M
[12/12 02:58:44 d2.utils.events]:  eta: 0:37:39  iter: 3539  total_loss: 2.504  loss_sem_seg: 1.261  loss_center: 0.5534  loss_offset: 0.5306  time: 0.3498  data_time: 0.0265  lr: 0.0016874  max_mem: 7418M
[12/12 02:58:51 d2.utils.events]:  eta: 0:37:33  iter: 3559  total_loss: 2.37  loss_sem_seg: 1.084  loss_center: 0.5793  loss_offset: 0.5836  time: 0.3498  data_time: 0.0246  lr: 0.0016827  max_mem: 7418M
[12/12 02:58:58 d2.utils.events]:  eta: 0:37:26  iter: 3579  total_loss: 2.602  loss_sem_seg: 1.235  loss_center: 0.619  loss_offset: 0.6183  time: 0.3498  data_time: 0.0260  lr: 0.001678  max_mem: 7418M
[12/12 02:59:05 d2.utils.events]:  eta: 0:37:20  iter: 3599  total_loss: 2.231  loss_sem_seg: 1.197  loss_center: 0.5141  loss_offset: 0.6096  time: 0.3498  data_time: 0.0268  lr: 0.0016733  max_mem: 7418M
[12/12 02:59:12 d2.utils.events]:  eta: 0:37:15  iter: 3619  total_loss: 2.36  loss_sem_seg: 1.169  loss_center: 0.5865  loss_offset: 0.5591  time: 0.3498  data_time: 0.0265  lr: 0.0016686  max_mem: 7418M
[12/12 02:59:19 d2.utils.events]:  eta: 0:37:06  iter: 3639  total_loss: 2.366  loss_sem_seg: 1.084  loss_center: 0.4634  loss_offset: 0.6617  time: 0.3498  data_time: 0.0262  lr: 0.0016638  max_mem: 7418M
[12/12 02:59:26 d2.utils.events]:  eta: 0:36:59  iter: 3659  total_loss: 2.393  loss_sem_seg: 1.156  loss_center: 0.5957  loss_offset: 0.613  time: 0.3498  data_time: 0.0269  lr: 0.0016591  max_mem: 7418M
[12/12 02:59:33 d2.utils.events]:  eta: 0:36:52  iter: 3679  total_loss: 2.397  loss_sem_seg: 1.068  loss_center: 0.5332  loss_offset: 0.6437  time: 0.3498  data_time: 0.0252  lr: 0.0016544  max_mem: 7418M
[12/12 02:59:40 d2.utils.events]:  eta: 0:36:46  iter: 3699  total_loss: 2.267  loss_sem_seg: 1.004  loss_center: 0.4892  loss_offset: 0.5796  time: 0.3499  data_time: 0.0288  lr: 0.0016497  max_mem: 7418M
[12/12 02:59:47 d2.utils.events]:  eta: 0:36:40  iter: 3719  total_loss: 2.381  loss_sem_seg: 1.156  loss_center: 0.5829  loss_offset: 0.6404  time: 0.3499  data_time: 0.0262  lr: 0.001645  max_mem: 7418M
[12/12 02:59:54 d2.utils.events]:  eta: 0:36:32  iter: 3739  total_loss: 2.262  loss_sem_seg: 1.12  loss_center: 0.5366  loss_offset: 0.523  time: 0.3499  data_time: 0.0270  lr: 0.0016403  max_mem: 7418M
[12/12 03:00:01 d2.utils.events]:  eta: 0:36:26  iter: 3759  total_loss: 2.524  loss_sem_seg: 1.161  loss_center: 0.4784  loss_offset: 0.5919  time: 0.3499  data_time: 0.0271  lr: 0.0016356  max_mem: 7418M
[12/12 03:00:08 d2.utils.events]:  eta: 0:36:17  iter: 3779  total_loss: 2.328  loss_sem_seg: 1.346  loss_center: 0.5311  loss_offset: 0.5333  time: 0.3499  data_time: 0.0263  lr: 0.0016309  max_mem: 7418M
[12/12 03:00:15 d2.utils.events]:  eta: 0:36:12  iter: 3799  total_loss: 2.593  loss_sem_seg: 1.339  loss_center: 0.5254  loss_offset: 0.6585  time: 0.3499  data_time: 0.0271  lr: 0.0016261  max_mem: 7418M
[12/12 03:00:22 d2.utils.events]:  eta: 0:36:03  iter: 3819  total_loss: 2.491  loss_sem_seg: 1.207  loss_center: 0.7017  loss_offset: 0.5516  time: 0.3499  data_time: 0.0274  lr: 0.0016214  max_mem: 7418M
[12/12 03:00:29 d2.utils.events]:  eta: 0:35:58  iter: 3839  total_loss: 2.624  loss_sem_seg: 1.215  loss_center: 0.5763  loss_offset: 0.6155  time: 0.3499  data_time: 0.0257  lr: 0.0016167  max_mem: 7418M
[12/12 03:00:36 d2.utils.events]:  eta: 0:35:50  iter: 3859  total_loss: 2.452  loss_sem_seg: 1.055  loss_center: 0.4822  loss_offset: 0.6787  time: 0.3499  data_time: 0.0240  lr: 0.001612  max_mem: 7418M
[12/12 03:00:43 d2.utils.events]:  eta: 0:35:44  iter: 3879  total_loss: 2.365  loss_sem_seg: 1.132  loss_center: 0.7109  loss_offset: 0.6043  time: 0.3499  data_time: 0.0261  lr: 0.0016072  max_mem: 7418M
[12/12 03:00:50 d2.utils.events]:  eta: 0:35:37  iter: 3899  total_loss: 2.508  loss_sem_seg: 1.228  loss_center: 0.465  loss_offset: 0.6845  time: 0.3499  data_time: 0.0273  lr: 0.0016025  max_mem: 7418M
[12/12 03:00:57 d2.utils.events]:  eta: 0:35:31  iter: 3919  total_loss: 2.293  loss_sem_seg: 1.248  loss_center: 0.4728  loss_offset: 0.5293  time: 0.3499  data_time: 0.0269  lr: 0.0015978  max_mem: 7418M
[12/12 03:01:04 d2.utils.events]:  eta: 0:35:25  iter: 3939  total_loss: 2.464  loss_sem_seg: 1.192  loss_center: 0.5669  loss_offset: 0.5288  time: 0.3499  data_time: 0.0275  lr: 0.0015931  max_mem: 7418M
[12/12 03:01:11 d2.utils.events]:  eta: 0:35:16  iter: 3959  total_loss: 2.348  loss_sem_seg: 1.224  loss_center: 0.4185  loss_offset: 0.669  time: 0.3499  data_time: 0.0272  lr: 0.0015883  max_mem: 7418M
[12/12 03:01:18 d2.utils.events]:  eta: 0:35:09  iter: 3979  total_loss: 2.468  loss_sem_seg: 1.148  loss_center: 0.5326  loss_offset: 0.6994  time: 0.3499  data_time: 0.0273  lr: 0.0015836  max_mem: 7418M
[12/12 03:01:25 d2.utils.events]:  eta: 0:35:01  iter: 3999  total_loss: 2.328  loss_sem_seg: 1.193  loss_center: 0.573  loss_offset: 0.559  time: 0.3499  data_time: 0.0264  lr: 0.0015789  max_mem: 7418M
[12/12 03:01:33 d2.utils.events]:  eta: 0:34:54  iter: 4019  total_loss: 2.448  loss_sem_seg: 1.17  loss_center: 0.4405  loss_offset: 0.5554  time: 0.3499  data_time: 0.0275  lr: 0.0015741  max_mem: 7418M
[12/12 03:01:40 d2.utils.events]:  eta: 0:34:47  iter: 4039  total_loss: 2.455  loss_sem_seg: 0.9869  loss_center: 0.631  loss_offset: 0.5503  time: 0.3499  data_time: 0.0256  lr: 0.0015694  max_mem: 7418M
[12/12 03:01:46 d2.utils.events]:  eta: 0:34:40  iter: 4059  total_loss: 2.447  loss_sem_seg: 1.21  loss_center: 0.5129  loss_offset: 0.6802  time: 0.3499  data_time: 0.0265  lr: 0.0015646  max_mem: 7418M
[12/12 03:01:54 d2.utils.events]:  eta: 0:34:34  iter: 4079  total_loss: 2.353  loss_sem_seg: 1.155  loss_center: 0.5301  loss_offset: 0.7377  time: 0.3499  data_time: 0.0287  lr: 0.0015599  max_mem: 7418M
[12/12 03:02:01 d2.utils.events]:  eta: 0:34:27  iter: 4099  total_loss: 2.552  loss_sem_seg: 1.249  loss_center: 0.5782  loss_offset: 0.6502  time: 0.3500  data_time: 0.0286  lr: 0.0015552  max_mem: 7418M
[12/12 03:02:08 d2.utils.events]:  eta: 0:34:20  iter: 4119  total_loss: 2.605  loss_sem_seg: 1.255  loss_center: 0.5218  loss_offset: 0.615  time: 0.3500  data_time: 0.0249  lr: 0.0015504  max_mem: 7418M
[12/12 03:02:15 d2.utils.events]:  eta: 0:34:13  iter: 4139  total_loss: 2.338  loss_sem_seg: 1.186  loss_center: 0.6292  loss_offset: 0.5635  time: 0.3500  data_time: 0.0266  lr: 0.0015457  max_mem: 7418M
[12/12 03:02:22 d2.utils.events]:  eta: 0:34:07  iter: 4159  total_loss: 2.531  loss_sem_seg: 1.234  loss_center: 0.5722  loss_offset: 0.6571  time: 0.3500  data_time: 0.0265  lr: 0.0015409  max_mem: 7418M
[12/12 03:02:29 d2.utils.events]:  eta: 0:33:59  iter: 4179  total_loss: 2.682  loss_sem_seg: 1.262  loss_center: 0.5584  loss_offset: 0.6736  time: 0.3500  data_time: 0.0284  lr: 0.0015362  max_mem: 7418M
[12/12 03:02:36 d2.utils.events]:  eta: 0:33:52  iter: 4199  total_loss: 2.37  loss_sem_seg: 1.033  loss_center: 0.5704  loss_offset: 0.6929  time: 0.3500  data_time: 0.0244  lr: 0.0015314  max_mem: 7418M
[12/12 03:02:43 d2.utils.events]:  eta: 0:33:45  iter: 4219  total_loss: 2.652  loss_sem_seg: 1.221  loss_center: 0.609  loss_offset: 0.7585  time: 0.3500  data_time: 0.0278  lr: 0.0015267  max_mem: 7418M
[12/12 03:02:50 d2.utils.events]:  eta: 0:33:36  iter: 4239  total_loss: 2.348  loss_sem_seg: 1.168  loss_center: 0.5268  loss_offset: 0.7081  time: 0.3500  data_time: 0.0237  lr: 0.0015219  max_mem: 7418M
[12/12 03:02:57 d2.utils.events]:  eta: 0:33:29  iter: 4259  total_loss: 2.54  loss_sem_seg: 1.1  loss_center: 0.5327  loss_offset: 0.6463  time: 0.3499  data_time: 0.0247  lr: 0.0015172  max_mem: 7418M
[12/12 03:03:04 d2.utils.events]:  eta: 0:33:22  iter: 4279  total_loss: 2.605  loss_sem_seg: 1.152  loss_center: 0.6083  loss_offset: 0.6327  time: 0.3499  data_time: 0.0261  lr: 0.0015124  max_mem: 7418M
[12/12 03:03:11 d2.utils.events]:  eta: 0:33:14  iter: 4299  total_loss: 2.302  loss_sem_seg: 1.269  loss_center: 0.4126  loss_offset: 0.5393  time: 0.3499  data_time: 0.0252  lr: 0.0015076  max_mem: 7418M
[12/12 03:03:18 d2.utils.events]:  eta: 0:33:07  iter: 4319  total_loss: 2.309  loss_sem_seg: 1.195  loss_center: 0.5243  loss_offset: 0.5749  time: 0.3499  data_time: 0.0266  lr: 0.0015029  max_mem: 7418M
[12/12 03:03:25 d2.utils.events]:  eta: 0:33:00  iter: 4339  total_loss: 2.498  loss_sem_seg: 1.225  loss_center: 0.576  loss_offset: 0.5711  time: 0.3499  data_time: 0.0256  lr: 0.0014981  max_mem: 7418M
[12/12 03:03:32 d2.utils.events]:  eta: 0:32:54  iter: 4359  total_loss: 2.672  loss_sem_seg: 1.343  loss_center: 0.5683  loss_offset: 0.7451  time: 0.3499  data_time: 0.0264  lr: 0.0014933  max_mem: 7418M
[12/12 03:03:39 d2.utils.events]:  eta: 0:32:46  iter: 4379  total_loss: 2.787  loss_sem_seg: 1.381  loss_center: 0.6617  loss_offset: 0.6481  time: 0.3499  data_time: 0.0268  lr: 0.0014886  max_mem: 7418M
[12/12 03:03:46 d2.utils.events]:  eta: 0:32:39  iter: 4399  total_loss: 2.169  loss_sem_seg: 1.038  loss_center: 0.5958  loss_offset: 0.5531  time: 0.3499  data_time: 0.0280  lr: 0.0014838  max_mem: 7418M
[12/12 03:03:53 d2.utils.events]:  eta: 0:32:32  iter: 4419  total_loss: 2.511  loss_sem_seg: 1.297  loss_center: 0.6212  loss_offset: 0.554  time: 0.3499  data_time: 0.0263  lr: 0.001479  max_mem: 7418M
[12/12 03:04:00 d2.utils.events]:  eta: 0:32:25  iter: 4439  total_loss: 2.27  loss_sem_seg: 1.121  loss_center: 0.5194  loss_offset: 0.5873  time: 0.3500  data_time: 0.0286  lr: 0.0014743  max_mem: 7418M
[12/12 03:04:07 d2.utils.events]:  eta: 0:32:19  iter: 4459  total_loss: 2.409  loss_sem_seg: 1.12  loss_center: 0.5424  loss_offset: 0.6274  time: 0.3500  data_time: 0.0257  lr: 0.0014695  max_mem: 7418M
[12/12 03:04:14 d2.utils.events]:  eta: 0:32:11  iter: 4479  total_loss: 2.259  loss_sem_seg: 1.067  loss_center: 0.5192  loss_offset: 0.6615  time: 0.3499  data_time: 0.0258  lr: 0.0014647  max_mem: 7418M
[12/12 03:04:21 d2.utils.events]:  eta: 0:32:04  iter: 4499  total_loss: 2.162  loss_sem_seg: 1.095  loss_center: 0.5499  loss_offset: 0.5659  time: 0.3500  data_time: 0.0269  lr: 0.0014599  max_mem: 7418M
[12/12 03:04:28 d2.utils.events]:  eta: 0:31:57  iter: 4519  total_loss: 2.356  loss_sem_seg: 1.1  loss_center: 0.4963  loss_offset: 0.6005  time: 0.3499  data_time: 0.0262  lr: 0.0014552  max_mem: 7418M
[12/12 03:04:35 d2.utils.events]:  eta: 0:31:50  iter: 4539  total_loss: 2.356  loss_sem_seg: 1.031  loss_center: 0.6015  loss_offset: 0.5365  time: 0.3500  data_time: 0.0256  lr: 0.0014504  max_mem: 7418M
[12/12 03:04:42 d2.utils.events]:  eta: 0:31:43  iter: 4559  total_loss: 2.517  loss_sem_seg: 1.181  loss_center: 0.53  loss_offset: 0.6187  time: 0.3500  data_time: 0.0267  lr: 0.0014456  max_mem: 7418M
[12/12 03:04:49 d2.utils.events]:  eta: 0:31:36  iter: 4579  total_loss: 2.498  loss_sem_seg: 1.152  loss_center: 0.577  loss_offset: 0.7111  time: 0.3500  data_time: 0.0255  lr: 0.0014408  max_mem: 7418M
[12/12 03:04:56 d2.utils.events]:  eta: 0:31:29  iter: 4599  total_loss: 2.545  loss_sem_seg: 1.151  loss_center: 0.535  loss_offset: 0.7182  time: 0.3500  data_time: 0.0259  lr: 0.001436  max_mem: 7418M
[12/12 03:05:03 d2.utils.events]:  eta: 0:31:22  iter: 4619  total_loss: 2.517  loss_sem_seg: 1.109  loss_center: 0.6816  loss_offset: 0.7272  time: 0.3500  data_time: 0.0269  lr: 0.0014313  max_mem: 7418M
[12/12 03:05:10 d2.utils.events]:  eta: 0:31:15  iter: 4639  total_loss: 2.569  loss_sem_seg: 1.318  loss_center: 0.4932  loss_offset: 0.675  time: 0.3500  data_time: 0.0265  lr: 0.0014265  max_mem: 7418M
[12/12 03:05:17 d2.utils.events]:  eta: 0:31:08  iter: 4659  total_loss: 2.032  loss_sem_seg: 1.011  loss_center: 0.5744  loss_offset: 0.4943  time: 0.3500  data_time: 0.0251  lr: 0.0014217  max_mem: 7418M
[12/12 03:05:24 d2.utils.events]:  eta: 0:31:01  iter: 4679  total_loss: 2.601  loss_sem_seg: 1.186  loss_center: 0.4994  loss_offset: 0.6817  time: 0.3500  data_time: 0.0261  lr: 0.0014169  max_mem: 7418M
[12/12 03:05:31 d2.utils.events]:  eta: 0:30:54  iter: 4699  total_loss: 2.265  loss_sem_seg: 1.137  loss_center: 0.5314  loss_offset: 0.5695  time: 0.3500  data_time: 0.0277  lr: 0.0014121  max_mem: 7418M
[12/12 03:05:38 d2.utils.events]:  eta: 0:30:47  iter: 4719  total_loss: 2.206  loss_sem_seg: 1.097  loss_center: 0.5598  loss_offset: 0.6032  time: 0.3500  data_time: 0.0246  lr: 0.0014073  max_mem: 7418M
[12/12 03:05:45 d2.utils.events]:  eta: 0:30:39  iter: 4739  total_loss: 2.342  loss_sem_seg: 1.132  loss_center: 0.5225  loss_offset: 0.5352  time: 0.3499  data_time: 0.0254  lr: 0.0014025  max_mem: 7418M
[12/12 03:05:52 d2.utils.events]:  eta: 0:30:31  iter: 4759  total_loss: 2.147  loss_sem_seg: 1.135  loss_center: 0.491  loss_offset: 0.5455  time: 0.3499  data_time: 0.0258  lr: 0.0013977  max_mem: 7418M
[12/12 03:05:59 d2.utils.events]:  eta: 0:30:25  iter: 4779  total_loss: 2.447  loss_sem_seg: 0.9349  loss_center: 0.5902  loss_offset: 0.6522  time: 0.3499  data_time: 0.0260  lr: 0.0013929  max_mem: 7418M
[12/12 03:06:06 d2.utils.events]:  eta: 0:30:18  iter: 4799  total_loss: 2.518  loss_sem_seg: 1.232  loss_center: 0.5693  loss_offset: 0.5754  time: 0.3499  data_time: 0.0257  lr: 0.0013881  max_mem: 7418M
[12/12 03:06:13 d2.utils.events]:  eta: 0:30:12  iter: 4819  total_loss: 2.279  loss_sem_seg: 1.105  loss_center: 0.49  loss_offset: 0.5226  time: 0.3499  data_time: 0.0262  lr: 0.0013833  max_mem: 7418M
[12/12 03:06:20 d2.utils.events]:  eta: 0:30:04  iter: 4839  total_loss: 2.626  loss_sem_seg: 1.287  loss_center: 0.5265  loss_offset: 0.7734  time: 0.3499  data_time: 0.0264  lr: 0.0013785  max_mem: 7418M
[12/12 03:06:27 d2.utils.events]:  eta: 0:29:57  iter: 4859  total_loss: 2.436  loss_sem_seg: 1.1  loss_center: 0.5209  loss_offset: 0.6396  time: 0.3499  data_time: 0.0258  lr: 0.0013737  max_mem: 7418M
[12/12 03:06:34 d2.utils.events]:  eta: 0:29:50  iter: 4879  total_loss: 2.083  loss_sem_seg: 0.9883  loss_center: 0.4247  loss_offset: 0.4228  time: 0.3499  data_time: 0.0266  lr: 0.0013689  max_mem: 7418M
[12/12 03:06:41 d2.utils.events]:  eta: 0:29:43  iter: 4899  total_loss: 2.602  loss_sem_seg: 1.247  loss_center: 0.5609  loss_offset: 0.6018  time: 0.3500  data_time: 0.0280  lr: 0.001364  max_mem: 7418M
[12/12 03:06:48 d2.utils.events]:  eta: 0:29:36  iter: 4919  total_loss: 2.416  loss_sem_seg: 1.375  loss_center: 0.4698  loss_offset: 0.5281  time: 0.3500  data_time: 0.0266  lr: 0.0013592  max_mem: 7418M
[12/12 03:06:55 d2.utils.events]:  eta: 0:29:28  iter: 4939  total_loss: 2.227  loss_sem_seg: 1.138  loss_center: 0.5091  loss_offset: 0.5003  time: 0.3500  data_time: 0.0250  lr: 0.0013544  max_mem: 7418M
[12/12 03:07:02 d2.utils.events]:  eta: 0:29:22  iter: 4959  total_loss: 2.521  loss_sem_seg: 1.082  loss_center: 0.5842  loss_offset: 0.5477  time: 0.3500  data_time: 0.0264  lr: 0.0013496  max_mem: 7418M
[12/12 03:07:09 d2.utils.events]:  eta: 0:29:14  iter: 4979  total_loss: 2.452  loss_sem_seg: 1.012  loss_center: 0.5698  loss_offset: 0.5159  time: 0.3500  data_time: 0.0264  lr: 0.0013448  max_mem: 7418M
[12/12 03:07:16 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0004999.pth
[12/12 03:07:17 d2.utils.events]:  eta: 0:29:06  iter: 4999  total_loss: 2.238  loss_sem_seg: 1.169  loss_center: 0.5468  loss_offset: 0.5952  time: 0.3500  data_time: 0.0262  lr: 0.00134  max_mem: 7418M
[12/12 03:07:24 d2.utils.events]:  eta: 0:28:59  iter: 5019  total_loss: 2.433  loss_sem_seg: 1.253  loss_center: 0.5757  loss_offset: 0.5398  time: 0.3500  data_time: 0.0279  lr: 0.0013351  max_mem: 7418M
[12/12 03:07:31 d2.utils.events]:  eta: 0:28:52  iter: 5039  total_loss: 2.395  loss_sem_seg: 1.178  loss_center: 0.5573  loss_offset: 0.6415  time: 0.3500  data_time: 0.0248  lr: 0.0013303  max_mem: 7418M
[12/12 03:07:38 d2.utils.events]:  eta: 0:28:44  iter: 5059  total_loss: 2.391  loss_sem_seg: 1.11  loss_center: 0.5221  loss_offset: 0.637  time: 0.3500  data_time: 0.0248  lr: 0.0013255  max_mem: 7418M
[12/12 03:07:45 d2.utils.events]:  eta: 0:28:37  iter: 5079  total_loss: 2.382  loss_sem_seg: 1.154  loss_center: 0.5961  loss_offset: 0.5996  time: 0.3499  data_time: 0.0244  lr: 0.0013207  max_mem: 7418M
[12/12 03:07:52 d2.utils.events]:  eta: 0:28:30  iter: 5099  total_loss: 1.997  loss_sem_seg: 1.066  loss_center: 0.429  loss_offset: 0.5339  time: 0.3499  data_time: 0.0252  lr: 0.0013158  max_mem: 7418M
[12/12 03:07:59 d2.utils.events]:  eta: 0:28:22  iter: 5119  total_loss: 2.135  loss_sem_seg: 1.056  loss_center: 0.4964  loss_offset: 0.5377  time: 0.3499  data_time: 0.0250  lr: 0.001311  max_mem: 7418M
[12/12 03:08:06 d2.utils.events]:  eta: 0:28:14  iter: 5139  total_loss: 2.52  loss_sem_seg: 1.296  loss_center: 0.5454  loss_offset: 0.6201  time: 0.3499  data_time: 0.0243  lr: 0.0013062  max_mem: 7418M
[12/12 03:08:13 d2.utils.events]:  eta: 0:28:06  iter: 5159  total_loss: 2.322  loss_sem_seg: 1.215  loss_center: 0.4693  loss_offset: 0.6501  time: 0.3499  data_time: 0.0255  lr: 0.0013013  max_mem: 7418M
[12/12 03:08:20 d2.utils.events]:  eta: 0:27:59  iter: 5179  total_loss: 2.513  loss_sem_seg: 1.251  loss_center: 0.5707  loss_offset: 0.5121  time: 0.3499  data_time: 0.0251  lr: 0.0012965  max_mem: 7418M
[12/12 03:08:27 d2.utils.events]:  eta: 0:27:52  iter: 5199  total_loss: 2.139  loss_sem_seg: 1.041  loss_center: 0.4614  loss_offset: 0.522  time: 0.3499  data_time: 0.0249  lr: 0.0012916  max_mem: 7418M
[12/12 03:08:34 d2.utils.events]:  eta: 0:27:45  iter: 5219  total_loss: 2.236  loss_sem_seg: 1.185  loss_center: 0.506  loss_offset: 0.5864  time: 0.3499  data_time: 0.0273  lr: 0.0012868  max_mem: 7418M
[12/12 03:08:41 d2.utils.events]:  eta: 0:27:38  iter: 5239  total_loss: 2.358  loss_sem_seg: 1.209  loss_center: 0.5614  loss_offset: 0.504  time: 0.3499  data_time: 0.0258  lr: 0.0012819  max_mem: 7418M
[12/12 03:08:48 d2.utils.events]:  eta: 0:27:31  iter: 5259  total_loss: 2.185  loss_sem_seg: 1.197  loss_center: 0.4308  loss_offset: 0.5457  time: 0.3499  data_time: 0.0261  lr: 0.0012771  max_mem: 7418M
[12/12 03:08:55 d2.utils.events]:  eta: 0:27:24  iter: 5279  total_loss: 2.449  loss_sem_seg: 1.26  loss_center: 0.5022  loss_offset: 0.6538  time: 0.3499  data_time: 0.0259  lr: 0.0012722  max_mem: 7418M
[12/12 03:09:02 d2.utils.events]:  eta: 0:27:18  iter: 5299  total_loss: 2.167  loss_sem_seg: 0.9202  loss_center: 0.6117  loss_offset: 0.5396  time: 0.3499  data_time: 0.0258  lr: 0.0012674  max_mem: 7418M
[12/12 03:09:09 d2.utils.events]:  eta: 0:27:11  iter: 5319  total_loss: 2.455  loss_sem_seg: 1.197  loss_center: 0.5283  loss_offset: 0.6391  time: 0.3499  data_time: 0.0255  lr: 0.0012625  max_mem: 7418M
[12/12 03:09:16 d2.utils.events]:  eta: 0:27:05  iter: 5339  total_loss: 2.317  loss_sem_seg: 1.248  loss_center: 0.4664  loss_offset: 0.5647  time: 0.3499  data_time: 0.0263  lr: 0.0012577  max_mem: 7418M
[12/12 03:09:23 d2.utils.events]:  eta: 0:26:57  iter: 5359  total_loss: 2.217  loss_sem_seg: 1.033  loss_center: 0.5518  loss_offset: 0.6217  time: 0.3499  data_time: 0.0265  lr: 0.0012528  max_mem: 7418M
[12/12 03:09:30 d2.utils.events]:  eta: 0:26:50  iter: 5379  total_loss: 2.33  loss_sem_seg: 1.095  loss_center: 0.4643  loss_offset: 0.6507  time: 0.3499  data_time: 0.0255  lr: 0.001248  max_mem: 7418M
[12/12 03:09:37 d2.utils.events]:  eta: 0:26:44  iter: 5399  total_loss: 2.232  loss_sem_seg: 1.081  loss_center: 0.4864  loss_offset: 0.6385  time: 0.3499  data_time: 0.0266  lr: 0.0012431  max_mem: 7418M
[12/12 03:09:44 d2.utils.events]:  eta: 0:26:37  iter: 5419  total_loss: 2.187  loss_sem_seg: 1.083  loss_center: 0.4756  loss_offset: 0.5774  time: 0.3499  data_time: 0.0260  lr: 0.0012382  max_mem: 7418M
[12/12 03:09:51 d2.utils.events]:  eta: 0:26:30  iter: 5439  total_loss: 2.249  loss_sem_seg: 1.004  loss_center: 0.5849  loss_offset: 0.5241  time: 0.3499  data_time: 0.0265  lr: 0.0012334  max_mem: 7418M
[12/12 03:09:58 d2.utils.events]:  eta: 0:26:22  iter: 5459  total_loss: 2.249  loss_sem_seg: 0.9555  loss_center: 0.5174  loss_offset: 0.6168  time: 0.3499  data_time: 0.0267  lr: 0.0012285  max_mem: 7418M
[12/12 03:10:05 d2.utils.events]:  eta: 0:26:16  iter: 5479  total_loss: 2.12  loss_sem_seg: 0.8718  loss_center: 0.4939  loss_offset: 0.6266  time: 0.3499  data_time: 0.0267  lr: 0.0012236  max_mem: 7418M
[12/12 03:10:12 d2.utils.events]:  eta: 0:26:09  iter: 5499  total_loss: 2.15  loss_sem_seg: 0.9647  loss_center: 0.5371  loss_offset: 0.5055  time: 0.3499  data_time: 0.0252  lr: 0.0012188  max_mem: 7418M
[12/12 03:10:19 d2.utils.events]:  eta: 0:26:03  iter: 5519  total_loss: 2.333  loss_sem_seg: 1.315  loss_center: 0.5299  loss_offset: 0.58  time: 0.3499  data_time: 0.0266  lr: 0.0012139  max_mem: 7418M
[12/12 03:10:26 d2.utils.events]:  eta: 0:25:56  iter: 5539  total_loss: 2.372  loss_sem_seg: 1.143  loss_center: 0.6288  loss_offset: 0.545  time: 0.3499  data_time: 0.0268  lr: 0.001209  max_mem: 7418M
[12/12 03:10:33 d2.utils.events]:  eta: 0:25:48  iter: 5559  total_loss: 2.527  loss_sem_seg: 1.273  loss_center: 0.4415  loss_offset: 0.7353  time: 0.3499  data_time: 0.0266  lr: 0.0012041  max_mem: 7418M
[12/12 03:10:41 d2.utils.events]:  eta: 0:25:41  iter: 5579  total_loss: 2.283  loss_sem_seg: 1.026  loss_center: 0.6144  loss_offset: 0.5543  time: 0.3499  data_time: 0.0267  lr: 0.0011992  max_mem: 7418M
[12/12 03:10:48 d2.utils.events]:  eta: 0:25:33  iter: 5599  total_loss: 2.196  loss_sem_seg: 1.14  loss_center: 0.5673  loss_offset: 0.5064  time: 0.3499  data_time: 0.0270  lr: 0.0011944  max_mem: 7418M
[12/12 03:10:55 d2.utils.events]:  eta: 0:25:27  iter: 5619  total_loss: 2.244  loss_sem_seg: 0.9803  loss_center: 0.5716  loss_offset: 0.5896  time: 0.3500  data_time: 0.0264  lr: 0.0011895  max_mem: 7418M
[12/12 03:11:02 d2.utils.events]:  eta: 0:25:20  iter: 5639  total_loss: 2.507  loss_sem_seg: 1.103  loss_center: 0.6855  loss_offset: 0.6334  time: 0.3500  data_time: 0.0262  lr: 0.0011846  max_mem: 7418M
[12/12 03:11:09 d2.utils.events]:  eta: 0:25:13  iter: 5659  total_loss: 2.375  loss_sem_seg: 1.115  loss_center: 0.5904  loss_offset: 0.5279  time: 0.3500  data_time: 0.0262  lr: 0.0011797  max_mem: 7418M
[12/12 03:11:16 d2.utils.events]:  eta: 0:25:06  iter: 5679  total_loss: 2.06  loss_sem_seg: 0.9677  loss_center: 0.4557  loss_offset: 0.5486  time: 0.3500  data_time: 0.0270  lr: 0.0011748  max_mem: 7418M
[12/12 03:11:23 d2.utils.events]:  eta: 0:24:59  iter: 5699  total_loss: 2.249  loss_sem_seg: 1.095  loss_center: 0.4758  loss_offset: 0.6619  time: 0.3500  data_time: 0.0255  lr: 0.0011699  max_mem: 7418M
[12/12 03:11:30 d2.utils.events]:  eta: 0:24:52  iter: 5719  total_loss: 2.088  loss_sem_seg: 1.168  loss_center: 0.4342  loss_offset: 0.5142  time: 0.3500  data_time: 0.0255  lr: 0.001165  max_mem: 7418M
[12/12 03:11:37 d2.utils.events]:  eta: 0:24:46  iter: 5739  total_loss: 2.257  loss_sem_seg: 1.192  loss_center: 0.3998  loss_offset: 0.6528  time: 0.3500  data_time: 0.0271  lr: 0.0011601  max_mem: 7418M
[12/12 03:11:44 d2.utils.events]:  eta: 0:24:39  iter: 5759  total_loss: 2.28  loss_sem_seg: 1.115  loss_center: 0.4833  loss_offset: 0.4883  time: 0.3500  data_time: 0.0268  lr: 0.0011552  max_mem: 7418M
[12/12 03:11:51 d2.utils.events]:  eta: 0:24:32  iter: 5779  total_loss: 2.179  loss_sem_seg: 1.067  loss_center: 0.5089  loss_offset: 0.5658  time: 0.3500  data_time: 0.0248  lr: 0.0011503  max_mem: 7418M
[12/12 03:11:58 d2.utils.events]:  eta: 0:24:26  iter: 5799  total_loss: 1.989  loss_sem_seg: 1.077  loss_center: 0.4497  loss_offset: 0.548  time: 0.3500  data_time: 0.0283  lr: 0.0011454  max_mem: 7418M
[12/12 03:12:05 d2.utils.events]:  eta: 0:24:19  iter: 5819  total_loss: 2.169  loss_sem_seg: 1.006  loss_center: 0.5572  loss_offset: 0.5956  time: 0.3500  data_time: 0.0265  lr: 0.0011405  max_mem: 7418M
[12/12 03:12:12 d2.utils.events]:  eta: 0:24:11  iter: 5839  total_loss: 2.273  loss_sem_seg: 1.129  loss_center: 0.5292  loss_offset: 0.5323  time: 0.3500  data_time: 0.0294  lr: 0.0011356  max_mem: 7418M
[12/12 03:12:19 d2.utils.events]:  eta: 0:24:05  iter: 5859  total_loss: 2.202  loss_sem_seg: 1.09  loss_center: 0.4855  loss_offset: 0.5467  time: 0.3500  data_time: 0.0274  lr: 0.0011307  max_mem: 7418M
[12/12 03:12:26 d2.utils.events]:  eta: 0:23:57  iter: 5879  total_loss: 2.103  loss_sem_seg: 1.02  loss_center: 0.5131  loss_offset: 0.5197  time: 0.3500  data_time: 0.0259  lr: 0.0011258  max_mem: 7418M
[12/12 03:12:33 d2.utils.events]:  eta: 0:23:50  iter: 5899  total_loss: 2.452  loss_sem_seg: 1.125  loss_center: 0.7  loss_offset: 0.5722  time: 0.3500  data_time: 0.0236  lr: 0.0011208  max_mem: 7418M
[12/12 03:12:40 d2.utils.events]:  eta: 0:23:43  iter: 5919  total_loss: 2.117  loss_sem_seg: 1.004  loss_center: 0.4668  loss_offset: 0.5711  time: 0.3500  data_time: 0.0269  lr: 0.0011159  max_mem: 7418M
[12/12 03:12:47 d2.utils.events]:  eta: 0:23:36  iter: 5939  total_loss: 2.128  loss_sem_seg: 0.9169  loss_center: 0.5137  loss_offset: 0.5314  time: 0.3500  data_time: 0.0265  lr: 0.001111  max_mem: 7418M
[12/12 03:12:54 d2.utils.events]:  eta: 0:23:29  iter: 5959  total_loss: 2.494  loss_sem_seg: 1.293  loss_center: 0.5115  loss_offset: 0.5894  time: 0.3500  data_time: 0.0259  lr: 0.0011061  max_mem: 7418M
[12/12 03:13:01 d2.utils.events]:  eta: 0:23:23  iter: 5979  total_loss: 2.135  loss_sem_seg: 0.9757  loss_center: 0.5027  loss_offset: 0.5575  time: 0.3500  data_time: 0.0259  lr: 0.0011011  max_mem: 7418M
[12/12 03:13:08 d2.utils.events]:  eta: 0:23:16  iter: 5999  total_loss: 2.377  loss_sem_seg: 1.06  loss_center: 0.6014  loss_offset: 0.5594  time: 0.3500  data_time: 0.0243  lr: 0.0010962  max_mem: 7418M
[12/12 03:13:15 d2.utils.events]:  eta: 0:23:09  iter: 6019  total_loss: 2.211  loss_sem_seg: 1.071  loss_center: 0.5045  loss_offset: 0.495  time: 0.3500  data_time: 0.0239  lr: 0.0010913  max_mem: 7418M
[12/12 03:13:22 d2.utils.events]:  eta: 0:23:02  iter: 6039  total_loss: 2.15  loss_sem_seg: 0.8987  loss_center: 0.4999  loss_offset: 0.6139  time: 0.3500  data_time: 0.0272  lr: 0.0010863  max_mem: 7418M
[12/12 03:13:29 d2.utils.events]:  eta: 0:22:55  iter: 6059  total_loss: 2.299  loss_sem_seg: 0.9845  loss_center: 0.493  loss_offset: 0.5501  time: 0.3500  data_time: 0.0256  lr: 0.0010814  max_mem: 7418M
[12/12 03:13:36 d2.utils.events]:  eta: 0:22:49  iter: 6079  total_loss: 2.25  loss_sem_seg: 1.005  loss_center: 0.4373  loss_offset: 0.6016  time: 0.3500  data_time: 0.0257  lr: 0.0010765  max_mem: 7418M
[12/12 03:13:43 d2.utils.events]:  eta: 0:22:42  iter: 6099  total_loss: 2.353  loss_sem_seg: 1.09  loss_center: 0.5242  loss_offset: 0.6067  time: 0.3500  data_time: 0.0272  lr: 0.0010715  max_mem: 7418M
[12/12 03:13:50 d2.utils.events]:  eta: 0:22:35  iter: 6119  total_loss: 2.218  loss_sem_seg: 1.013  loss_center: 0.619  loss_offset: 0.5291  time: 0.3500  data_time: 0.0263  lr: 0.0010666  max_mem: 7418M
[12/12 03:13:57 d2.utils.events]:  eta: 0:22:28  iter: 6139  total_loss: 2.205  loss_sem_seg: 0.9299  loss_center: 0.7502  loss_offset: 0.5516  time: 0.3500  data_time: 0.0271  lr: 0.0010616  max_mem: 7418M
[12/12 03:14:04 d2.utils.events]:  eta: 0:22:21  iter: 6159  total_loss: 2.119  loss_sem_seg: 1.096  loss_center: 0.5539  loss_offset: 0.5141  time: 0.3500  data_time: 0.0256  lr: 0.0010567  max_mem: 7418M
[12/12 03:14:11 d2.utils.events]:  eta: 0:22:14  iter: 6179  total_loss: 2.219  loss_sem_seg: 0.9723  loss_center: 0.53  loss_offset: 0.5304  time: 0.3500  data_time: 0.0249  lr: 0.0010517  max_mem: 7418M
[12/12 03:14:18 d2.utils.events]:  eta: 0:22:07  iter: 6199  total_loss: 2.254  loss_sem_seg: 0.9614  loss_center: 0.7128  loss_offset: 0.5009  time: 0.3500  data_time: 0.0266  lr: 0.0010468  max_mem: 7418M
[12/12 03:14:25 d2.utils.events]:  eta: 0:22:00  iter: 6219  total_loss: 2.371  loss_sem_seg: 1.129  loss_center: 0.5792  loss_offset: 0.5871  time: 0.3500  data_time: 0.0264  lr: 0.0010418  max_mem: 7418M
[12/12 03:14:32 d2.utils.events]:  eta: 0:21:53  iter: 6239  total_loss: 2.291  loss_sem_seg: 1.088  loss_center: 0.5693  loss_offset: 0.6294  time: 0.3500  data_time: 0.0270  lr: 0.0010368  max_mem: 7418M
[12/12 03:14:39 d2.utils.events]:  eta: 0:21:46  iter: 6259  total_loss: 2.352  loss_sem_seg: 1.177  loss_center: 0.4492  loss_offset: 0.5471  time: 0.3500  data_time: 0.0263  lr: 0.0010319  max_mem: 7418M
[12/12 03:14:46 d2.utils.events]:  eta: 0:21:39  iter: 6279  total_loss: 2.046  loss_sem_seg: 1.044  loss_center: 0.3535  loss_offset: 0.55  time: 0.3500  data_time: 0.0270  lr: 0.0010269  max_mem: 7418M
[12/12 03:14:53 d2.utils.events]:  eta: 0:21:32  iter: 6299  total_loss: 2.536  loss_sem_seg: 1.139  loss_center: 0.6076  loss_offset: 0.5987  time: 0.3500  data_time: 0.0246  lr: 0.0010219  max_mem: 7418M
[12/12 03:15:00 d2.utils.events]:  eta: 0:21:25  iter: 6319  total_loss: 2.205  loss_sem_seg: 1.025  loss_center: 0.5494  loss_offset: 0.5234  time: 0.3500  data_time: 0.0253  lr: 0.001017  max_mem: 7418M
[12/12 03:15:07 d2.utils.events]:  eta: 0:21:18  iter: 6339  total_loss: 2.164  loss_sem_seg: 0.9683  loss_center: 0.471  loss_offset: 0.5993  time: 0.3500  data_time: 0.0277  lr: 0.001012  max_mem: 7418M
[12/12 03:15:14 d2.utils.events]:  eta: 0:21:11  iter: 6359  total_loss: 1.945  loss_sem_seg: 0.9966  loss_center: 0.4113  loss_offset: 0.4554  time: 0.3500  data_time: 0.0259  lr: 0.001007  max_mem: 7418M
[12/12 03:15:21 d2.utils.events]:  eta: 0:21:04  iter: 6379  total_loss: 2.058  loss_sem_seg: 1.029  loss_center: 0.579  loss_offset: 0.6038  time: 0.3500  data_time: 0.0259  lr: 0.001002  max_mem: 7418M
[12/12 03:15:28 d2.utils.events]:  eta: 0:20:57  iter: 6399  total_loss: 2.311  loss_sem_seg: 1.065  loss_center: 0.641  loss_offset: 0.575  time: 0.3500  data_time: 0.0266  lr: 0.00099706  max_mem: 7418M
[12/12 03:15:35 d2.utils.events]:  eta: 0:20:50  iter: 6419  total_loss: 2.034  loss_sem_seg: 0.9753  loss_center: 0.467  loss_offset: 0.5068  time: 0.3500  data_time: 0.0259  lr: 0.00099207  max_mem: 7418M
[12/12 03:15:42 d2.utils.events]:  eta: 0:20:43  iter: 6439  total_loss: 2.206  loss_sem_seg: 0.9684  loss_center: 0.6311  loss_offset: 0.4642  time: 0.3500  data_time: 0.0268  lr: 0.00098709  max_mem: 7418M
[12/12 03:15:49 d2.utils.events]:  eta: 0:20:36  iter: 6459  total_loss: 2.303  loss_sem_seg: 1.085  loss_center: 0.6224  loss_offset: 0.6088  time: 0.3500  data_time: 0.0267  lr: 0.00098209  max_mem: 7418M
[12/12 03:15:56 d2.utils.events]:  eta: 0:20:29  iter: 6479  total_loss: 2.198  loss_sem_seg: 0.8764  loss_center: 0.5869  loss_offset: 0.5315  time: 0.3500  data_time: 0.0256  lr: 0.0009771  max_mem: 7418M
[12/12 03:16:03 d2.utils.events]:  eta: 0:20:22  iter: 6499  total_loss: 1.881  loss_sem_seg: 0.9632  loss_center: 0.4896  loss_offset: 0.5102  time: 0.3500  data_time: 0.0268  lr: 0.0009721  max_mem: 7418M
[12/12 03:16:10 d2.utils.events]:  eta: 0:20:15  iter: 6519  total_loss: 2.265  loss_sem_seg: 1.109  loss_center: 0.5793  loss_offset: 0.5668  time: 0.3500  data_time: 0.0274  lr: 0.00096711  max_mem: 7418M
[12/12 03:16:17 d2.utils.events]:  eta: 0:20:08  iter: 6539  total_loss: 2.231  loss_sem_seg: 0.966  loss_center: 0.6193  loss_offset: 0.5015  time: 0.3500  data_time: 0.0244  lr: 0.0009621  max_mem: 7418M
[12/12 03:16:24 d2.utils.events]:  eta: 0:20:01  iter: 6559  total_loss: 2.027  loss_sem_seg: 0.9398  loss_center: 0.5292  loss_offset: 0.5523  time: 0.3500  data_time: 0.0269  lr: 0.0009571  max_mem: 7418M
[12/12 03:16:31 d2.utils.events]:  eta: 0:19:54  iter: 6579  total_loss: 2.25  loss_sem_seg: 0.9865  loss_center: 0.5799  loss_offset: 0.5939  time: 0.3500  data_time: 0.0254  lr: 0.00095209  max_mem: 7418M
[12/12 03:16:38 d2.utils.events]:  eta: 0:19:47  iter: 6599  total_loss: 2.066  loss_sem_seg: 1.057  loss_center: 0.4752  loss_offset: 0.4099  time: 0.3500  data_time: 0.0271  lr: 0.00094708  max_mem: 7418M
[12/12 03:16:45 d2.utils.events]:  eta: 0:19:39  iter: 6619  total_loss: 2.074  loss_sem_seg: 0.9482  loss_center: 0.6546  loss_offset: 0.5545  time: 0.3500  data_time: 0.0263  lr: 0.00094206  max_mem: 7418M
[12/12 03:16:52 d2.utils.events]:  eta: 0:19:32  iter: 6639  total_loss: 2.062  loss_sem_seg: 1.033  loss_center: 0.566  loss_offset: 0.5458  time: 0.3500  data_time: 0.0263  lr: 0.00093705  max_mem: 7418M
[12/12 03:16:59 d2.utils.events]:  eta: 0:19:25  iter: 6659  total_loss: 2.148  loss_sem_seg: 0.9502  loss_center: 0.5711  loss_offset: 0.5043  time: 0.3500  data_time: 0.0253  lr: 0.00093203  max_mem: 7418M
[12/12 03:17:06 d2.utils.events]:  eta: 0:19:18  iter: 6679  total_loss: 2.127  loss_sem_seg: 0.9899  loss_center: 0.552  loss_offset: 0.4286  time: 0.3500  data_time: 0.0259  lr: 0.000927  max_mem: 7418M
[12/12 03:17:13 d2.utils.events]:  eta: 0:19:11  iter: 6699  total_loss: 2.23  loss_sem_seg: 1.093  loss_center: 0.6123  loss_offset: 0.7085  time: 0.3500  data_time: 0.0256  lr: 0.00092198  max_mem: 7418M
[12/12 03:17:20 d2.utils.events]:  eta: 0:19:04  iter: 6719  total_loss: 1.99  loss_sem_seg: 0.9538  loss_center: 0.467  loss_offset: 0.4921  time: 0.3500  data_time: 0.0251  lr: 0.00091695  max_mem: 7418M
[12/12 03:17:27 d2.utils.events]:  eta: 0:18:57  iter: 6739  total_loss: 2.399  loss_sem_seg: 1.042  loss_center: 0.5767  loss_offset: 0.5376  time: 0.3499  data_time: 0.0256  lr: 0.00091192  max_mem: 7418M
[12/12 03:17:34 d2.utils.events]:  eta: 0:18:50  iter: 6759  total_loss: 2.276  loss_sem_seg: 1.044  loss_center: 0.5753  loss_offset: 0.6614  time: 0.3499  data_time: 0.0263  lr: 0.00090688  max_mem: 7418M
[12/12 03:17:41 d2.utils.events]:  eta: 0:18:42  iter: 6779  total_loss: 2.131  loss_sem_seg: 1.019  loss_center: 0.5729  loss_offset: 0.5438  time: 0.3499  data_time: 0.0258  lr: 0.00090184  max_mem: 7418M
[12/12 03:17:48 d2.utils.events]:  eta: 0:18:36  iter: 6799  total_loss: 2.149  loss_sem_seg: 0.9286  loss_center: 0.5227  loss_offset: 0.5691  time: 0.3499  data_time: 0.0256  lr: 0.0008968  max_mem: 7418M
[12/12 03:17:55 d2.utils.events]:  eta: 0:18:28  iter: 6819  total_loss: 2.169  loss_sem_seg: 1.095  loss_center: 0.5472  loss_offset: 0.5303  time: 0.3499  data_time: 0.0252  lr: 0.00089176  max_mem: 7418M
[12/12 03:18:02 d2.utils.events]:  eta: 0:18:21  iter: 6839  total_loss: 2.328  loss_sem_seg: 1.069  loss_center: 0.5935  loss_offset: 0.549  time: 0.3499  data_time: 0.0250  lr: 0.00088671  max_mem: 7418M
[12/12 03:18:09 d2.utils.events]:  eta: 0:18:13  iter: 6859  total_loss: 2.167  loss_sem_seg: 0.9688  loss_center: 0.4756  loss_offset: 0.5426  time: 0.3499  data_time: 0.0261  lr: 0.00088166  max_mem: 7418M
[12/12 03:18:16 d2.utils.events]:  eta: 0:18:07  iter: 6879  total_loss: 2.12  loss_sem_seg: 0.9578  loss_center: 0.5479  loss_offset: 0.5055  time: 0.3499  data_time: 0.0255  lr: 0.00087661  max_mem: 7418M
[12/12 03:18:23 d2.utils.events]:  eta: 0:18:01  iter: 6899  total_loss: 2.018  loss_sem_seg: 1.032  loss_center: 0.4456  loss_offset: 0.5363  time: 0.3499  data_time: 0.0263  lr: 0.00087155  max_mem: 7418M
[12/12 03:18:30 d2.utils.events]:  eta: 0:17:53  iter: 6919  total_loss: 2.144  loss_sem_seg: 0.9819  loss_center: 0.4538  loss_offset: 0.5749  time: 0.3499  data_time: 0.0256  lr: 0.00086649  max_mem: 7418M
[12/12 03:18:37 d2.utils.events]:  eta: 0:17:46  iter: 6939  total_loss: 2.155  loss_sem_seg: 1.104  loss_center: 0.457  loss_offset: 0.5863  time: 0.3499  data_time: 0.0242  lr: 0.00086142  max_mem: 7418M
[12/12 03:18:44 d2.utils.events]:  eta: 0:17:39  iter: 6959  total_loss: 2.11  loss_sem_seg: 0.9695  loss_center: 0.5447  loss_offset: 0.5509  time: 0.3499  data_time: 0.0259  lr: 0.00085636  max_mem: 7418M
[12/12 03:18:51 d2.utils.events]:  eta: 0:17:31  iter: 6979  total_loss: 2.165  loss_sem_seg: 1.018  loss_center: 0.4475  loss_offset: 0.6075  time: 0.3499  data_time: 0.0254  lr: 0.00085129  max_mem: 7418M
[12/12 03:18:58 d2.utils.events]:  eta: 0:17:24  iter: 6999  total_loss: 2.192  loss_sem_seg: 1.042  loss_center: 0.5223  loss_offset: 0.5506  time: 0.3499  data_time: 0.0266  lr: 0.00084621  max_mem: 7418M
[12/12 03:19:05 d2.utils.events]:  eta: 0:17:17  iter: 7019  total_loss: 2.237  loss_sem_seg: 1.075  loss_center: 0.6093  loss_offset: 0.5671  time: 0.3499  data_time: 0.0252  lr: 0.00084114  max_mem: 7418M
[12/12 03:19:12 d2.utils.events]:  eta: 0:17:10  iter: 7039  total_loss: 2.204  loss_sem_seg: 1.051  loss_center: 0.6647  loss_offset: 0.6107  time: 0.3499  data_time: 0.0259  lr: 0.00083605  max_mem: 7418M
[12/12 03:19:19 d2.utils.events]:  eta: 0:17:04  iter: 7059  total_loss: 2.228  loss_sem_seg: 0.9185  loss_center: 0.5368  loss_offset: 0.5953  time: 0.3499  data_time: 0.0256  lr: 0.00083097  max_mem: 7418M
[12/12 03:19:26 d2.utils.events]:  eta: 0:16:57  iter: 7079  total_loss: 1.999  loss_sem_seg: 0.9365  loss_center: 0.5157  loss_offset: 0.5635  time: 0.3499  data_time: 0.0266  lr: 0.00082588  max_mem: 7418M
[12/12 03:19:33 d2.utils.events]:  eta: 0:16:50  iter: 7099  total_loss: 2.054  loss_sem_seg: 1.039  loss_center: 0.5432  loss_offset: 0.4864  time: 0.3499  data_time: 0.0260  lr: 0.00082079  max_mem: 7418M
[12/12 03:19:40 d2.utils.events]:  eta: 0:16:43  iter: 7119  total_loss: 1.985  loss_sem_seg: 0.9087  loss_center: 0.5396  loss_offset: 0.5819  time: 0.3499  data_time: 0.0267  lr: 0.0008157  max_mem: 7418M
[12/12 03:19:47 d2.utils.events]:  eta: 0:16:36  iter: 7139  total_loss: 1.916  loss_sem_seg: 0.8957  loss_center: 0.5505  loss_offset: 0.5212  time: 0.3499  data_time: 0.0253  lr: 0.0008106  max_mem: 7418M
[12/12 03:19:54 d2.utils.events]:  eta: 0:16:29  iter: 7159  total_loss: 2.253  loss_sem_seg: 1.073  loss_center: 0.5107  loss_offset: 0.5947  time: 0.3499  data_time: 0.0264  lr: 0.0008055  max_mem: 7418M
[12/12 03:20:01 d2.utils.events]:  eta: 0:16:22  iter: 7179  total_loss: 2.126  loss_sem_seg: 1.123  loss_center: 0.4697  loss_offset: 0.4959  time: 0.3499  data_time: 0.0266  lr: 0.00080039  max_mem: 7418M
[12/12 03:20:08 d2.utils.events]:  eta: 0:16:15  iter: 7199  total_loss: 2.232  loss_sem_seg: 1.016  loss_center: 0.684  loss_offset: 0.4988  time: 0.3499  data_time: 0.0264  lr: 0.00079528  max_mem: 7418M
[12/12 03:20:15 d2.utils.events]:  eta: 0:16:08  iter: 7219  total_loss: 1.913  loss_sem_seg: 0.8823  loss_center: 0.3802  loss_offset: 0.5619  time: 0.3499  data_time: 0.0247  lr: 0.00079017  max_mem: 7418M
[12/12 03:20:22 d2.utils.events]:  eta: 0:16:01  iter: 7239  total_loss: 2.298  loss_sem_seg: 1.085  loss_center: 0.4679  loss_offset: 0.6279  time: 0.3499  data_time: 0.0270  lr: 0.00078505  max_mem: 7418M
[12/12 03:20:29 d2.utils.events]:  eta: 0:15:54  iter: 7259  total_loss: 1.957  loss_sem_seg: 0.9975  loss_center: 0.3936  loss_offset: 0.4583  time: 0.3499  data_time: 0.0262  lr: 0.00077993  max_mem: 7418M
[12/12 03:20:36 d2.utils.events]:  eta: 0:15:47  iter: 7279  total_loss: 2.064  loss_sem_seg: 1.151  loss_center: 0.5197  loss_offset: 0.531  time: 0.3499  data_time: 0.0257  lr: 0.00077481  max_mem: 7418M
[12/12 03:20:43 d2.utils.events]:  eta: 0:15:40  iter: 7299  total_loss: 2.101  loss_sem_seg: 0.9018  loss_center: 0.5681  loss_offset: 0.5555  time: 0.3499  data_time: 0.0256  lr: 0.00076968  max_mem: 7418M
[12/12 03:20:50 d2.utils.events]:  eta: 0:15:33  iter: 7319  total_loss: 1.828  loss_sem_seg: 0.8849  loss_center: 0.4313  loss_offset: 0.4821  time: 0.3499  data_time: 0.0265  lr: 0.00076455  max_mem: 7418M
[12/12 03:20:57 d2.utils.events]:  eta: 0:15:26  iter: 7339  total_loss: 1.938  loss_sem_seg: 0.9819  loss_center: 0.4022  loss_offset: 0.4873  time: 0.3499  data_time: 0.0268  lr: 0.00075942  max_mem: 7418M
[12/12 03:21:04 d2.utils.events]:  eta: 0:15:20  iter: 7359  total_loss: 2.201  loss_sem_seg: 1.033  loss_center: 0.5047  loss_offset: 0.5337  time: 0.3499  data_time: 0.0250  lr: 0.00075428  max_mem: 7418M
[12/12 03:21:11 d2.utils.events]:  eta: 0:15:13  iter: 7379  total_loss: 1.969  loss_sem_seg: 0.9212  loss_center: 0.3956  loss_offset: 0.5477  time: 0.3499  data_time: 0.0277  lr: 0.00074914  max_mem: 7418M
[12/12 03:21:18 d2.utils.events]:  eta: 0:15:05  iter: 7399  total_loss: 1.983  loss_sem_seg: 0.9689  loss_center: 0.5468  loss_offset: 0.508  time: 0.3499  data_time: 0.0255  lr: 0.00074399  max_mem: 7418M
[12/12 03:21:25 d2.utils.events]:  eta: 0:14:59  iter: 7419  total_loss: 1.887  loss_sem_seg: 0.8484  loss_center: 0.5821  loss_offset: 0.5068  time: 0.3499  data_time: 0.0245  lr: 0.00073884  max_mem: 7418M
[12/12 03:21:32 d2.utils.events]:  eta: 0:14:51  iter: 7439  total_loss: 2.155  loss_sem_seg: 1.011  loss_center: 0.5745  loss_offset: 0.4374  time: 0.3499  data_time: 0.0243  lr: 0.00073368  max_mem: 7418M
[12/12 03:21:39 d2.utils.events]:  eta: 0:14:44  iter: 7459  total_loss: 2.387  loss_sem_seg: 1.046  loss_center: 0.5905  loss_offset: 0.5635  time: 0.3499  data_time: 0.0264  lr: 0.00072852  max_mem: 7418M
[12/12 03:21:46 d2.utils.events]:  eta: 0:14:37  iter: 7479  total_loss: 2.219  loss_sem_seg: 1.025  loss_center: 0.5065  loss_offset: 0.5633  time: 0.3499  data_time: 0.0273  lr: 0.00072336  max_mem: 7418M
[12/12 03:21:53 d2.utils.events]:  eta: 0:14:30  iter: 7499  total_loss: 2.207  loss_sem_seg: 1.057  loss_center: 0.473  loss_offset: 0.6136  time: 0.3499  data_time: 0.0235  lr: 0.00071819  max_mem: 7418M
[12/12 03:22:00 d2.utils.events]:  eta: 0:14:23  iter: 7519  total_loss: 2.2  loss_sem_seg: 1.237  loss_center: 0.4649  loss_offset: 0.6072  time: 0.3499  data_time: 0.0262  lr: 0.00071302  max_mem: 7418M
[12/12 03:22:07 d2.utils.events]:  eta: 0:14:17  iter: 7539  total_loss: 2.065  loss_sem_seg: 1.057  loss_center: 0.5834  loss_offset: 0.4905  time: 0.3499  data_time: 0.0247  lr: 0.00070785  max_mem: 7418M
[12/12 03:22:14 d2.utils.events]:  eta: 0:14:10  iter: 7559  total_loss: 2.151  loss_sem_seg: 1.005  loss_center: 0.5718  loss_offset: 0.5489  time: 0.3499  data_time: 0.0265  lr: 0.00070267  max_mem: 7418M
[12/12 03:22:21 d2.utils.events]:  eta: 0:14:03  iter: 7579  total_loss: 2.095  loss_sem_seg: 0.9219  loss_center: 0.4845  loss_offset: 0.5482  time: 0.3499  data_time: 0.0280  lr: 0.00069749  max_mem: 7418M
[12/12 03:22:28 d2.utils.events]:  eta: 0:13:56  iter: 7599  total_loss: 2.189  loss_sem_seg: 1.033  loss_center: 0.6066  loss_offset: 0.5434  time: 0.3499  data_time: 0.0261  lr: 0.0006923  max_mem: 7418M
[12/12 03:22:35 d2.utils.events]:  eta: 0:13:49  iter: 7619  total_loss: 2.241  loss_sem_seg: 0.9591  loss_center: 0.5982  loss_offset: 0.5651  time: 0.3499  data_time: 0.0252  lr: 0.00068711  max_mem: 7418M
[12/12 03:22:42 d2.utils.events]:  eta: 0:13:42  iter: 7639  total_loss: 1.972  loss_sem_seg: 0.8238  loss_center: 0.4145  loss_offset: 0.5423  time: 0.3499  data_time: 0.0258  lr: 0.00068191  max_mem: 7418M
[12/12 03:22:49 d2.utils.events]:  eta: 0:13:35  iter: 7659  total_loss: 2.371  loss_sem_seg: 1.108  loss_center: 0.4473  loss_offset: 0.5869  time: 0.3499  data_time: 0.0251  lr: 0.00067671  max_mem: 7418M
[12/12 03:22:56 d2.utils.events]:  eta: 0:13:28  iter: 7679  total_loss: 1.932  loss_sem_seg: 0.8486  loss_center: 0.5448  loss_offset: 0.4643  time: 0.3499  data_time: 0.0255  lr: 0.0006715  max_mem: 7418M
[12/12 03:23:03 d2.utils.events]:  eta: 0:13:21  iter: 7699  total_loss: 2.106  loss_sem_seg: 0.9782  loss_center: 0.6632  loss_offset: 0.4493  time: 0.3499  data_time: 0.0261  lr: 0.00066629  max_mem: 7418M
[12/12 03:23:10 d2.utils.events]:  eta: 0:13:14  iter: 7719  total_loss: 2.265  loss_sem_seg: 0.9933  loss_center: 0.5097  loss_offset: 0.5378  time: 0.3499  data_time: 0.0260  lr: 0.00066108  max_mem: 7418M
[12/12 03:23:17 d2.utils.events]:  eta: 0:13:07  iter: 7739  total_loss: 2.137  loss_sem_seg: 0.956  loss_center: 0.536  loss_offset: 0.582  time: 0.3499  data_time: 0.0279  lr: 0.00065586  max_mem: 7418M
[12/12 03:23:24 d2.utils.events]:  eta: 0:13:00  iter: 7759  total_loss: 2.206  loss_sem_seg: 1.08  loss_center: 0.4794  loss_offset: 0.5535  time: 0.3499  data_time: 0.0282  lr: 0.00065064  max_mem: 7418M
[12/12 03:23:31 d2.utils.events]:  eta: 0:12:53  iter: 7779  total_loss: 2.106  loss_sem_seg: 0.9073  loss_center: 0.4899  loss_offset: 0.6016  time: 0.3499  data_time: 0.0268  lr: 0.00064541  max_mem: 7418M
[12/12 03:23:38 d2.utils.events]:  eta: 0:12:46  iter: 7799  total_loss: 1.924  loss_sem_seg: 0.9322  loss_center: 0.4479  loss_offset: 0.5934  time: 0.3499  data_time: 0.0262  lr: 0.00064017  max_mem: 7418M
[12/12 03:23:45 d2.utils.events]:  eta: 0:12:39  iter: 7819  total_loss: 2.003  loss_sem_seg: 0.965  loss_center: 0.5218  loss_offset: 0.4521  time: 0.3499  data_time: 0.0270  lr: 0.00063494  max_mem: 7418M
[12/12 03:23:52 d2.utils.events]:  eta: 0:12:33  iter: 7839  total_loss: 1.994  loss_sem_seg: 0.9327  loss_center: 0.4398  loss_offset: 0.4979  time: 0.3499  data_time: 0.0264  lr: 0.00062969  max_mem: 7418M
[12/12 03:23:59 d2.utils.events]:  eta: 0:12:26  iter: 7859  total_loss: 2.047  loss_sem_seg: 0.9943  loss_center: 0.4138  loss_offset: 0.5309  time: 0.3499  data_time: 0.0270  lr: 0.00062445  max_mem: 7418M
[12/12 03:24:06 d2.utils.events]:  eta: 0:12:18  iter: 7879  total_loss: 2.29  loss_sem_seg: 1.036  loss_center: 0.6566  loss_offset: 0.6338  time: 0.3499  data_time: 0.0264  lr: 0.00061919  max_mem: 7418M
[12/12 03:24:13 d2.utils.events]:  eta: 0:12:11  iter: 7899  total_loss: 2.098  loss_sem_seg: 0.9996  loss_center: 0.5829  loss_offset: 0.5857  time: 0.3499  data_time: 0.0258  lr: 0.00061394  max_mem: 7418M
[12/12 03:24:20 d2.utils.events]:  eta: 0:12:05  iter: 7919  total_loss: 1.816  loss_sem_seg: 0.9083  loss_center: 0.4195  loss_offset: 0.5066  time: 0.3499  data_time: 0.0248  lr: 0.00060867  max_mem: 7418M
[12/12 03:24:27 d2.utils.events]:  eta: 0:11:58  iter: 7939  total_loss: 1.919  loss_sem_seg: 0.872  loss_center: 0.4936  loss_offset: 0.4934  time: 0.3499  data_time: 0.0255  lr: 0.00060341  max_mem: 7418M
[12/12 03:24:34 d2.utils.events]:  eta: 0:11:51  iter: 7959  total_loss: 1.897  loss_sem_seg: 0.8575  loss_center: 0.4227  loss_offset: 0.5224  time: 0.3499  data_time: 0.0243  lr: 0.00059813  max_mem: 7418M
[12/12 03:24:41 d2.utils.events]:  eta: 0:11:44  iter: 7979  total_loss: 1.911  loss_sem_seg: 0.8991  loss_center: 0.4628  loss_offset: 0.4539  time: 0.3499  data_time: 0.0258  lr: 0.00059286  max_mem: 7418M
[12/12 03:24:48 d2.utils.events]:  eta: 0:11:37  iter: 7999  total_loss: 2.091  loss_sem_seg: 0.9369  loss_center: 0.4992  loss_offset: 0.4986  time: 0.3499  data_time: 0.0256  lr: 0.00058757  max_mem: 7418M
[12/12 03:24:55 d2.utils.events]:  eta: 0:11:30  iter: 8019  total_loss: 1.962  loss_sem_seg: 1.027  loss_center: 0.6087  loss_offset: 0.5112  time: 0.3499  data_time: 0.0272  lr: 0.00058229  max_mem: 7418M
[12/12 03:25:02 d2.utils.events]:  eta: 0:11:23  iter: 8039  total_loss: 2.187  loss_sem_seg: 0.908  loss_center: 0.4722  loss_offset: 0.5966  time: 0.3499  data_time: 0.0261  lr: 0.00057699  max_mem: 7418M
[12/12 03:25:09 d2.utils.events]:  eta: 0:11:17  iter: 8059  total_loss: 2.014  loss_sem_seg: 0.9246  loss_center: 0.4695  loss_offset: 0.4612  time: 0.3499  data_time: 0.0261  lr: 0.00057169  max_mem: 7418M
[12/12 03:25:16 d2.utils.events]:  eta: 0:11:09  iter: 8079  total_loss: 2.007  loss_sem_seg: 0.9232  loss_center: 0.523  loss_offset: 0.5166  time: 0.3499  data_time: 0.0270  lr: 0.00056639  max_mem: 7418M
[12/12 03:25:23 d2.utils.events]:  eta: 0:11:02  iter: 8099  total_loss: 2.387  loss_sem_seg: 1.264  loss_center: 0.5115  loss_offset: 0.5905  time: 0.3499  data_time: 0.0252  lr: 0.00056108  max_mem: 7418M
[12/12 03:25:30 d2.utils.events]:  eta: 0:10:55  iter: 8119  total_loss: 1.868  loss_sem_seg: 0.7856  loss_center: 0.5291  loss_offset: 0.4499  time: 0.3499  data_time: 0.0261  lr: 0.00055576  max_mem: 7418M
[12/12 03:25:37 d2.utils.events]:  eta: 0:10:48  iter: 8139  total_loss: 2.251  loss_sem_seg: 1.069  loss_center: 0.5823  loss_offset: 0.4746  time: 0.3499  data_time: 0.0246  lr: 0.00055044  max_mem: 7418M
[12/12 03:25:44 d2.utils.events]:  eta: 0:10:41  iter: 8159  total_loss: 2.124  loss_sem_seg: 0.9942  loss_center: 0.5388  loss_offset: 0.6323  time: 0.3499  data_time: 0.0252  lr: 0.00054512  max_mem: 7418M
[12/12 03:25:51 d2.utils.events]:  eta: 0:10:34  iter: 8179  total_loss: 1.979  loss_sem_seg: 0.9407  loss_center: 0.5009  loss_offset: 0.5016  time: 0.3499  data_time: 0.0262  lr: 0.00053978  max_mem: 7418M
[12/12 03:25:58 d2.utils.events]:  eta: 0:10:27  iter: 8199  total_loss: 2.252  loss_sem_seg: 1.137  loss_center: 0.5522  loss_offset: 0.5569  time: 0.3499  data_time: 0.0254  lr: 0.00053444  max_mem: 7418M
[12/12 03:26:05 d2.utils.events]:  eta: 0:10:21  iter: 8219  total_loss: 1.869  loss_sem_seg: 0.8372  loss_center: 0.4685  loss_offset: 0.4989  time: 0.3499  data_time: 0.0263  lr: 0.0005291  max_mem: 7418M
[12/12 03:26:12 d2.utils.events]:  eta: 0:10:14  iter: 8239  total_loss: 1.84  loss_sem_seg: 0.9273  loss_center: 0.5564  loss_offset: 0.4507  time: 0.3499  data_time: 0.0268  lr: 0.00052375  max_mem: 7418M
[12/12 03:26:19 d2.utils.events]:  eta: 0:10:07  iter: 8259  total_loss: 1.995  loss_sem_seg: 0.9209  loss_center: 0.4441  loss_offset: 0.487  time: 0.3499  data_time: 0.0272  lr: 0.00051839  max_mem: 7418M
[12/12 03:26:26 d2.utils.events]:  eta: 0:10:00  iter: 8279  total_loss: 1.916  loss_sem_seg: 0.8657  loss_center: 0.5071  loss_offset: 0.5443  time: 0.3499  data_time: 0.0248  lr: 0.00051303  max_mem: 7418M
[12/12 03:26:33 d2.utils.events]:  eta: 0:09:53  iter: 8299  total_loss: 2.314  loss_sem_seg: 1.014  loss_center: 0.4627  loss_offset: 0.6311  time: 0.3499  data_time: 0.0272  lr: 0.00050766  max_mem: 7418M
[12/12 03:26:40 d2.utils.events]:  eta: 0:09:46  iter: 8319  total_loss: 2.073  loss_sem_seg: 0.9234  loss_center: 0.523  loss_offset: 0.6325  time: 0.3499  data_time: 0.0251  lr: 0.00050229  max_mem: 7418M
[12/12 03:26:47 d2.utils.events]:  eta: 0:09:39  iter: 8339  total_loss: 1.882  loss_sem_seg: 0.9073  loss_center: 0.4758  loss_offset: 0.4698  time: 0.3499  data_time: 0.0264  lr: 0.0004969  max_mem: 7418M
[12/12 03:26:54 d2.utils.events]:  eta: 0:09:32  iter: 8359  total_loss: 1.945  loss_sem_seg: 0.8976  loss_center: 0.6109  loss_offset: 0.4847  time: 0.3499  data_time: 0.0253  lr: 0.00049152  max_mem: 7418M
[12/12 03:27:01 d2.utils.events]:  eta: 0:09:25  iter: 8379  total_loss: 2.034  loss_sem_seg: 0.8891  loss_center: 0.5011  loss_offset: 0.5745  time: 0.3499  data_time: 0.0266  lr: 0.00048612  max_mem: 7418M
[12/12 03:27:08 d2.utils.events]:  eta: 0:09:18  iter: 8399  total_loss: 2.124  loss_sem_seg: 0.9284  loss_center: 0.4904  loss_offset: 0.5396  time: 0.3499  data_time: 0.0246  lr: 0.00048072  max_mem: 7418M
[12/12 03:27:15 d2.utils.events]:  eta: 0:09:11  iter: 8419  total_loss: 1.95  loss_sem_seg: 0.872  loss_center: 0.4831  loss_offset: 0.5429  time: 0.3499  data_time: 0.0267  lr: 0.00047531  max_mem: 7418M
[12/12 03:27:22 d2.utils.events]:  eta: 0:09:04  iter: 8439  total_loss: 1.962  loss_sem_seg: 0.9817  loss_center: 0.5266  loss_offset: 0.4736  time: 0.3499  data_time: 0.0256  lr: 0.0004699  max_mem: 7418M
[12/12 03:27:29 d2.utils.events]:  eta: 0:08:57  iter: 8459  total_loss: 1.904  loss_sem_seg: 0.7997  loss_center: 0.5113  loss_offset: 0.507  time: 0.3499  data_time: 0.0247  lr: 0.00046448  max_mem: 7418M
[12/12 03:27:36 d2.utils.events]:  eta: 0:08:50  iter: 8479  total_loss: 2.061  loss_sem_seg: 0.8606  loss_center: 0.5095  loss_offset: 0.5648  time: 0.3499  data_time: 0.0268  lr: 0.00045905  max_mem: 7418M
[12/12 03:27:43 d2.utils.events]:  eta: 0:08:43  iter: 8499  total_loss: 1.928  loss_sem_seg: 1.107  loss_center: 0.5154  loss_offset: 0.523  time: 0.3499  data_time: 0.0265  lr: 0.00045361  max_mem: 7418M
[12/12 03:27:50 d2.utils.events]:  eta: 0:08:36  iter: 8519  total_loss: 2.113  loss_sem_seg: 0.9342  loss_center: 0.4839  loss_offset: 0.5133  time: 0.3499  data_time: 0.0263  lr: 0.00044817  max_mem: 7418M
[12/12 03:27:57 d2.utils.events]:  eta: 0:08:29  iter: 8539  total_loss: 2.105  loss_sem_seg: 0.8989  loss_center: 0.5938  loss_offset: 0.4798  time: 0.3499  data_time: 0.0262  lr: 0.00044272  max_mem: 7418M
[12/12 03:28:04 d2.utils.events]:  eta: 0:08:22  iter: 8559  total_loss: 1.909  loss_sem_seg: 0.8801  loss_center: 0.4916  loss_offset: 0.409  time: 0.3499  data_time: 0.0258  lr: 0.00043726  max_mem: 7418M
[12/12 03:28:11 d2.utils.events]:  eta: 0:08:15  iter: 8579  total_loss: 2.047  loss_sem_seg: 0.9134  loss_center: 0.4684  loss_offset: 0.5101  time: 0.3499  data_time: 0.0244  lr: 0.00043179  max_mem: 7418M
[12/12 03:28:18 d2.utils.events]:  eta: 0:08:08  iter: 8599  total_loss: 2.151  loss_sem_seg: 1.004  loss_center: 0.4369  loss_offset: 0.5292  time: 0.3499  data_time: 0.0269  lr: 0.00042632  max_mem: 7418M
[12/12 03:28:25 d2.utils.events]:  eta: 0:08:01  iter: 8619  total_loss: 1.885  loss_sem_seg: 0.7856  loss_center: 0.5434  loss_offset: 0.4056  time: 0.3499  data_time: 0.0249  lr: 0.00042084  max_mem: 7418M
[12/12 03:28:32 d2.utils.events]:  eta: 0:07:54  iter: 8639  total_loss: 2.206  loss_sem_seg: 0.9261  loss_center: 0.5115  loss_offset: 0.5361  time: 0.3499  data_time: 0.0266  lr: 0.00041535  max_mem: 7418M
[12/12 03:28:39 d2.utils.events]:  eta: 0:07:47  iter: 8659  total_loss: 2.017  loss_sem_seg: 0.9006  loss_center: 0.4821  loss_offset: 0.5769  time: 0.3499  data_time: 0.0263  lr: 0.00040985  max_mem: 7418M
[12/12 03:28:46 d2.utils.events]:  eta: 0:07:40  iter: 8679  total_loss: 1.804  loss_sem_seg: 0.6901  loss_center: 0.5213  loss_offset: 0.4683  time: 0.3499  data_time: 0.0280  lr: 0.00040435  max_mem: 7418M
[12/12 03:28:53 d2.utils.events]:  eta: 0:07:33  iter: 8699  total_loss: 1.991  loss_sem_seg: 0.857  loss_center: 0.5505  loss_offset: 0.508  time: 0.3499  data_time: 0.0260  lr: 0.00039883  max_mem: 7418M
[12/12 03:29:00 d2.utils.events]:  eta: 0:07:26  iter: 8719  total_loss: 2.028  loss_sem_seg: 1.001  loss_center: 0.4511  loss_offset: 0.5186  time: 0.3499  data_time: 0.0257  lr: 0.00039331  max_mem: 7418M
[12/12 03:29:07 d2.utils.events]:  eta: 0:07:19  iter: 8739  total_loss: 2.039  loss_sem_seg: 0.9257  loss_center: 0.4841  loss_offset: 0.4784  time: 0.3499  data_time: 0.0269  lr: 0.00038778  max_mem: 7418M
[12/12 03:29:14 d2.utils.events]:  eta: 0:07:12  iter: 8759  total_loss: 1.875  loss_sem_seg: 0.8378  loss_center: 0.4736  loss_offset: 0.4198  time: 0.3499  data_time: 0.0248  lr: 0.00038224  max_mem: 7418M
[12/12 03:29:21 d2.utils.events]:  eta: 0:07:05  iter: 8779  total_loss: 1.999  loss_sem_seg: 0.9634  loss_center: 0.4539  loss_offset: 0.493  time: 0.3499  data_time: 0.0273  lr: 0.00037669  max_mem: 7418M
[12/12 03:29:28 d2.utils.events]:  eta: 0:06:58  iter: 8799  total_loss: 1.77  loss_sem_seg: 0.8459  loss_center: 0.4761  loss_offset: 0.5381  time: 0.3498  data_time: 0.0235  lr: 0.00037113  max_mem: 7418M
[12/12 03:29:35 d2.utils.events]:  eta: 0:06:51  iter: 8819  total_loss: 1.807  loss_sem_seg: 0.8522  loss_center: 0.4426  loss_offset: 0.4942  time: 0.3498  data_time: 0.0277  lr: 0.00036557  max_mem: 7418M
[12/12 03:29:42 d2.utils.events]:  eta: 0:06:44  iter: 8839  total_loss: 2.035  loss_sem_seg: 0.8102  loss_center: 0.5456  loss_offset: 0.5144  time: 0.3499  data_time: 0.0263  lr: 0.00035999  max_mem: 7418M
[12/12 03:29:49 d2.utils.events]:  eta: 0:06:37  iter: 8859  total_loss: 1.924  loss_sem_seg: 0.888  loss_center: 0.4686  loss_offset: 0.4817  time: 0.3498  data_time: 0.0257  lr: 0.0003544  max_mem: 7418M
[12/12 03:29:56 d2.utils.events]:  eta: 0:06:30  iter: 8879  total_loss: 2.123  loss_sem_seg: 0.9264  loss_center: 0.5788  loss_offset: 0.523  time: 0.3498  data_time: 0.0260  lr: 0.00034881  max_mem: 7418M
[12/12 03:30:03 d2.utils.events]:  eta: 0:06:23  iter: 8899  total_loss: 1.913  loss_sem_seg: 0.912  loss_center: 0.5761  loss_offset: 0.4341  time: 0.3498  data_time: 0.0257  lr: 0.0003432  max_mem: 7418M
[12/12 03:30:10 d2.utils.events]:  eta: 0:06:16  iter: 8919  total_loss: 1.992  loss_sem_seg: 0.8323  loss_center: 0.4651  loss_offset: 0.4639  time: 0.3498  data_time: 0.0249  lr: 0.00033758  max_mem: 7418M
[12/12 03:30:17 d2.utils.events]:  eta: 0:06:09  iter: 8939  total_loss: 1.893  loss_sem_seg: 0.7663  loss_center: 0.4783  loss_offset: 0.5853  time: 0.3498  data_time: 0.0265  lr: 0.00033196  max_mem: 7418M
[12/12 03:30:24 d2.utils.events]:  eta: 0:06:02  iter: 8959  total_loss: 2.012  loss_sem_seg: 0.8884  loss_center: 0.5664  loss_offset: 0.5448  time: 0.3498  data_time: 0.0262  lr: 0.00032632  max_mem: 7418M
[12/12 03:30:31 d2.utils.events]:  eta: 0:05:55  iter: 8979  total_loss: 2.113  loss_sem_seg: 1.038  loss_center: 0.4183  loss_offset: 0.5806  time: 0.3498  data_time: 0.0253  lr: 0.00032067  max_mem: 7418M
[12/12 03:30:38 d2.utils.events]:  eta: 0:05:48  iter: 8999  total_loss: 1.809  loss_sem_seg: 0.8459  loss_center: 0.4675  loss_offset: 0.4579  time: 0.3498  data_time: 0.0259  lr: 0.00031501  max_mem: 7418M
[12/12 03:30:45 d2.utils.events]:  eta: 0:05:41  iter: 9019  total_loss: 2.141  loss_sem_seg: 0.9701  loss_center: 0.4692  loss_offset: 0.4706  time: 0.3498  data_time: 0.0249  lr: 0.00030934  max_mem: 7418M
[12/12 03:30:52 d2.utils.events]:  eta: 0:05:34  iter: 9039  total_loss: 2.251  loss_sem_seg: 1.039  loss_center: 0.5469  loss_offset: 0.5605  time: 0.3498  data_time: 0.0267  lr: 0.00030366  max_mem: 7418M
[12/12 03:30:59 d2.utils.events]:  eta: 0:05:27  iter: 9059  total_loss: 2.039  loss_sem_seg: 0.9193  loss_center: 0.4663  loss_offset: 0.5461  time: 0.3498  data_time: 0.0244  lr: 0.00029797  max_mem: 7418M
[12/12 03:31:06 d2.utils.events]:  eta: 0:05:20  iter: 9079  total_loss: 2.146  loss_sem_seg: 0.8373  loss_center: 0.6627  loss_offset: 0.5504  time: 0.3498  data_time: 0.0239  lr: 0.00029226  max_mem: 7418M
[12/12 03:31:13 d2.utils.events]:  eta: 0:05:13  iter: 9099  total_loss: 1.729  loss_sem_seg: 0.7383  loss_center: 0.5427  loss_offset: 0.4207  time: 0.3498  data_time: 0.0253  lr: 0.00028654  max_mem: 7418M
[12/12 03:31:20 d2.utils.events]:  eta: 0:05:06  iter: 9119  total_loss: 1.996  loss_sem_seg: 1.012  loss_center: 0.4117  loss_offset: 0.4688  time: 0.3498  data_time: 0.0251  lr: 0.00028081  max_mem: 7418M
[12/12 03:31:27 d2.utils.events]:  eta: 0:04:59  iter: 9139  total_loss: 2.005  loss_sem_seg: 0.9616  loss_center: 0.5346  loss_offset: 0.5384  time: 0.3498  data_time: 0.0261  lr: 0.00027507  max_mem: 7418M
[12/12 03:31:34 d2.utils.events]:  eta: 0:04:52  iter: 9159  total_loss: 1.687  loss_sem_seg: 0.7494  loss_center: 0.4168  loss_offset: 0.4153  time: 0.3498  data_time: 0.0252  lr: 0.00026931  max_mem: 7418M
[12/12 03:31:41 d2.utils.events]:  eta: 0:04:45  iter: 9179  total_loss: 1.802  loss_sem_seg: 0.8696  loss_center: 0.4248  loss_offset: 0.5052  time: 0.3498  data_time: 0.0257  lr: 0.00026354  max_mem: 7418M
[12/12 03:31:48 d2.utils.events]:  eta: 0:04:38  iter: 9199  total_loss: 1.972  loss_sem_seg: 0.9103  loss_center: 0.5327  loss_offset: 0.5542  time: 0.3498  data_time: 0.0246  lr: 0.00025776  max_mem: 7418M
[12/12 03:31:55 d2.utils.events]:  eta: 0:04:31  iter: 9219  total_loss: 1.821  loss_sem_seg: 0.8495  loss_center: 0.4935  loss_offset: 0.4225  time: 0.3498  data_time: 0.0242  lr: 0.00025196  max_mem: 7418M
[12/12 03:32:02 d2.utils.events]:  eta: 0:04:24  iter: 9239  total_loss: 1.843  loss_sem_seg: 0.8717  loss_center: 0.4638  loss_offset: 0.4283  time: 0.3498  data_time: 0.0254  lr: 0.00024614  max_mem: 7418M
[12/12 03:32:09 d2.utils.events]:  eta: 0:04:17  iter: 9259  total_loss: 1.925  loss_sem_seg: 0.8447  loss_center: 0.5722  loss_offset: 0.5016  time: 0.3498  data_time: 0.0242  lr: 0.00024031  max_mem: 7418M
[12/12 03:32:16 d2.utils.events]:  eta: 0:04:10  iter: 9279  total_loss: 2.02  loss_sem_seg: 0.9653  loss_center: 0.4596  loss_offset: 0.4436  time: 0.3498  data_time: 0.0260  lr: 0.00023447  max_mem: 7418M
[12/12 03:32:23 d2.utils.events]:  eta: 0:04:03  iter: 9299  total_loss: 1.906  loss_sem_seg: 0.8728  loss_center: 0.452  loss_offset: 0.4935  time: 0.3498  data_time: 0.0259  lr: 0.00022861  max_mem: 7418M
[12/12 03:32:29 d2.utils.events]:  eta: 0:03:56  iter: 9319  total_loss: 2.022  loss_sem_seg: 0.9627  loss_center: 0.4611  loss_offset: 0.4636  time: 0.3498  data_time: 0.0265  lr: 0.00022273  max_mem: 7418M
[12/12 03:32:36 d2.utils.events]:  eta: 0:03:49  iter: 9339  total_loss: 2.098  loss_sem_seg: 0.9824  loss_center: 0.5031  loss_offset: 0.5446  time: 0.3498  data_time: 0.0247  lr: 0.00021683  max_mem: 7418M
[12/12 03:32:44 d2.utils.events]:  eta: 0:03:42  iter: 9359  total_loss: 2.213  loss_sem_seg: 0.8941  loss_center: 0.5779  loss_offset: 0.5512  time: 0.3498  data_time: 0.0254  lr: 0.00021092  max_mem: 7418M
[12/12 03:32:50 d2.utils.events]:  eta: 0:03:35  iter: 9379  total_loss: 1.826  loss_sem_seg: 0.7255  loss_center: 0.5697  loss_offset: 0.489  time: 0.3498  data_time: 0.0235  lr: 0.00020499  max_mem: 7418M
[12/12 03:32:57 d2.utils.events]:  eta: 0:03:28  iter: 9399  total_loss: 2.115  loss_sem_seg: 0.922  loss_center: 0.4891  loss_offset: 0.5178  time: 0.3498  data_time: 0.0253  lr: 0.00019903  max_mem: 7418M
[12/12 03:33:05 d2.utils.events]:  eta: 0:03:21  iter: 9419  total_loss: 1.726  loss_sem_seg: 0.8662  loss_center: 0.366  loss_offset: 0.5  time: 0.3498  data_time: 0.0260  lr: 0.00019306  max_mem: 7418M
[12/12 03:33:12 d2.utils.events]:  eta: 0:03:14  iter: 9439  total_loss: 2.092  loss_sem_seg: 0.8626  loss_center: 0.6225  loss_offset: 0.5362  time: 0.3498  data_time: 0.0249  lr: 0.00018707  max_mem: 7418M
[12/12 03:33:18 d2.utils.events]:  eta: 0:03:07  iter: 9459  total_loss: 2.15  loss_sem_seg: 1.076  loss_center: 0.6239  loss_offset: 0.5707  time: 0.3498  data_time: 0.0253  lr: 0.00018106  max_mem: 7418M
[12/12 03:33:25 d2.utils.events]:  eta: 0:03:00  iter: 9479  total_loss: 1.891  loss_sem_seg: 0.8937  loss_center: 0.5293  loss_offset: 0.4173  time: 0.3498  data_time: 0.0256  lr: 0.00017502  max_mem: 7418M
[12/12 03:33:32 d2.utils.events]:  eta: 0:02:54  iter: 9499  total_loss: 2.198  loss_sem_seg: 0.9602  loss_center: 0.5793  loss_offset: 0.545  time: 0.3498  data_time: 0.0257  lr: 0.00016896  max_mem: 7418M
[12/12 03:33:39 d2.utils.events]:  eta: 0:02:47  iter: 9519  total_loss: 1.868  loss_sem_seg: 0.8286  loss_center: 0.5637  loss_offset: 0.4088  time: 0.3498  data_time: 0.0258  lr: 0.00016288  max_mem: 7418M
[12/12 03:33:46 d2.utils.events]:  eta: 0:02:40  iter: 9539  total_loss: 2.093  loss_sem_seg: 0.9478  loss_center: 0.4727  loss_offset: 0.5414  time: 0.3498  data_time: 0.0242  lr: 0.00015677  max_mem: 7418M
[12/12 03:33:53 d2.utils.events]:  eta: 0:02:33  iter: 9559  total_loss: 1.865  loss_sem_seg: 0.954  loss_center: 0.3602  loss_offset: 0.4598  time: 0.3498  data_time: 0.0253  lr: 0.00015064  max_mem: 7418M
[12/12 03:34:00 d2.utils.events]:  eta: 0:02:26  iter: 9579  total_loss: 2.057  loss_sem_seg: 1.081  loss_center: 0.5447  loss_offset: 0.506  time: 0.3498  data_time: 0.0264  lr: 0.00014448  max_mem: 7418M
[12/12 03:34:07 d2.utils.events]:  eta: 0:02:19  iter: 9599  total_loss: 1.86  loss_sem_seg: 0.8528  loss_center: 0.4908  loss_offset: 0.5135  time: 0.3498  data_time: 0.0263  lr: 0.00013828  max_mem: 7418M
[12/12 03:34:14 d2.utils.events]:  eta: 0:02:12  iter: 9619  total_loss: 2.023  loss_sem_seg: 0.863  loss_center: 0.5153  loss_offset: 0.5053  time: 0.3498  data_time: 0.0258  lr: 0.00013206  max_mem: 7418M
[12/12 03:34:21 d2.utils.events]:  eta: 0:02:05  iter: 9639  total_loss: 1.794  loss_sem_seg: 0.8153  loss_center: 0.5339  loss_offset: 0.4744  time: 0.3498  data_time: 0.0258  lr: 0.0001258  max_mem: 7418M
[12/12 03:34:28 d2.utils.events]:  eta: 0:01:58  iter: 9659  total_loss: 1.977  loss_sem_seg: 0.9138  loss_center: 0.509  loss_offset: 0.513  time: 0.3498  data_time: 0.0258  lr: 0.00011951  max_mem: 7418M
[12/12 03:34:35 d2.utils.events]:  eta: 0:01:51  iter: 9679  total_loss: 2.296  loss_sem_seg: 1.007  loss_center: 0.584  loss_offset: 0.5521  time: 0.3498  data_time: 0.0240  lr: 0.00011319  max_mem: 7418M
[12/12 03:34:42 d2.utils.events]:  eta: 0:01:44  iter: 9699  total_loss: 2.046  loss_sem_seg: 0.9403  loss_center: 0.4883  loss_offset: 0.5811  time: 0.3498  data_time: 0.0256  lr: 0.00010682  max_mem: 7418M
[12/12 03:34:49 d2.utils.events]:  eta: 0:01:37  iter: 9719  total_loss: 1.927  loss_sem_seg: 0.894  loss_center: 0.4654  loss_offset: 0.5023  time: 0.3498  data_time: 0.0252  lr: 0.00010041  max_mem: 7418M
[12/12 03:34:56 d2.utils.events]:  eta: 0:01:30  iter: 9739  total_loss: 1.912  loss_sem_seg: 0.8943  loss_center: 0.5169  loss_offset: 0.5527  time: 0.3498  data_time: 0.0273  lr: 9.3954e-05  max_mem: 7418M
[12/12 03:35:03 d2.utils.events]:  eta: 0:01:23  iter: 9759  total_loss: 1.789  loss_sem_seg: 0.8334  loss_center: 0.375  loss_offset: 0.4509  time: 0.3498  data_time: 0.0251  lr: 8.7449e-05  max_mem: 7418M
[12/12 03:35:10 d2.utils.events]:  eta: 0:01:16  iter: 9779  total_loss: 1.95  loss_sem_seg: 0.922  loss_center: 0.4666  loss_offset: 0.5275  time: 0.3498  data_time: 0.0266  lr: 8.089e-05  max_mem: 7418M
[12/12 03:35:17 d2.utils.events]:  eta: 0:01:09  iter: 9799  total_loss: 1.781  loss_sem_seg: 0.8788  loss_center: 0.5499  loss_offset: 0.48  time: 0.3498  data_time: 0.0264  lr: 7.4271e-05  max_mem: 7418M
[12/12 03:35:24 d2.utils.events]:  eta: 0:01:02  iter: 9819  total_loss: 1.744  loss_sem_seg: 0.8736  loss_center: 0.4031  loss_offset: 0.4888  time: 0.3498  data_time: 0.0277  lr: 6.7585e-05  max_mem: 7418M
[12/12 03:35:31 d2.utils.events]:  eta: 0:00:55  iter: 9839  total_loss: 2.076  loss_sem_seg: 0.9918  loss_center: 0.6767  loss_offset: 0.4735  time: 0.3498  data_time: 0.0268  lr: 6.0825e-05  max_mem: 7418M
[12/12 03:35:38 d2.utils.events]:  eta: 0:00:48  iter: 9859  total_loss: 2.02  loss_sem_seg: 0.8937  loss_center: 0.4607  loss_offset: 0.57  time: 0.3498  data_time: 0.0258  lr: 5.3981e-05  max_mem: 7418M
[12/12 03:35:45 d2.utils.events]:  eta: 0:00:41  iter: 9879  total_loss: 1.98  loss_sem_seg: 0.8823  loss_center: 0.5853  loss_offset: 0.5375  time: 0.3498  data_time: 0.0267  lr: 4.7038e-05  max_mem: 7419M
[12/12 03:35:52 d2.utils.events]:  eta: 0:00:34  iter: 9899  total_loss: 2  loss_sem_seg: 0.9463  loss_center: 0.3745  loss_offset: 0.4626  time: 0.3498  data_time: 0.0257  lr: 3.9979e-05  max_mem: 7419M
[12/12 03:35:59 d2.utils.events]:  eta: 0:00:27  iter: 9919  total_loss: 1.788  loss_sem_seg: 1.002  loss_center: 0.4041  loss_offset: 0.4468  time: 0.3498  data_time: 0.0264  lr: 3.2778e-05  max_mem: 7419M
[12/12 03:36:06 d2.utils.events]:  eta: 0:00:20  iter: 9939  total_loss: 1.956  loss_sem_seg: 0.794  loss_center: 0.593  loss_offset: 0.4952  time: 0.3498  data_time: 0.0262  lr: 2.5394e-05  max_mem: 7419M
[12/12 03:36:13 d2.utils.events]:  eta: 0:00:13  iter: 9959  total_loss: 1.938  loss_sem_seg: 0.8207  loss_center: 0.5111  loss_offset: 0.5599  time: 0.3498  data_time: 0.0260  lr: 1.776e-05  max_mem: 7419M
[12/12 03:36:20 d2.utils.events]:  eta: 0:00:06  iter: 9979  total_loss: 1.933  loss_sem_seg: 0.9329  loss_center: 0.4507  loss_offset: 0.527  time: 0.3498  data_time: 0.0264  lr: 9.7261e-06  max_mem: 7419M
[12/12 03:36:28 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0009999.pth
[12/12 03:36:28 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_final.pth
[12/12 03:36:29 d2.utils.events]:  eta: 0:00:00  iter: 9999  total_loss: 2.276  loss_sem_seg: 1.039  loss_center: 0.5801  loss_offset: 0.615  time: 0.3498  data_time: 0.0292  lr: 6.2797e-07  max_mem: 7419M
[12/12 03:36:30 d2.engine.hooks]: Overall training speed: 9998 iterations in 0:58:17 (0.3498 s / it)
[12/12 03:36:30 d2.engine.hooks]: Total training time: 0:58:24 (0:00:07 on hooks)
[12/12 03:36:30 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[12/12 03:36:30 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/12 03:36:30 d2.data.common]: Serializing 5000 elements to byte tensors and concatenating them all ...
[12/12 03:36:30 d2.data.common]: Serialized dataset takes 3.40 MiB
/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 10 worker processes in total. Our suggested max number of worker in current system is 8, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  cpuset_checked))
[12/12 03:36:31 d2.evaluation.evaluator]: Start inference on 5000 batches
/usr/local/lib/python3.7/dist-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
[12/12 03:36:33 d2.evaluation.evaluator]: Inference done 11/5000. Dataloading: 0.0008 s/iter. Inference: 0.0628 s/iter. Eval: 0.0364 s/iter. Total: 0.0999 s/iter. ETA=0:08:18
[12/12 03:36:38 d2.evaluation.evaluator]: Inference done 66/5000. Dataloading: 0.0010 s/iter. Inference: 0.0614 s/iter. Eval: 0.0308 s/iter. Total: 0.0932 s/iter. ETA=0:07:39
[12/12 03:36:43 d2.evaluation.evaluator]: Inference done 118/5000. Dataloading: 0.0010 s/iter. Inference: 0.0617 s/iter. Eval: 0.0324 s/iter. Total: 0.0953 s/iter. ETA=0:07:45
[12/12 03:36:48 d2.evaluation.evaluator]: Inference done 169/5000. Dataloading: 0.0010 s/iter. Inference: 0.0624 s/iter. Eval: 0.0331 s/iter. Total: 0.0966 s/iter. ETA=0:07:46
[12/12 03:36:53 d2.evaluation.evaluator]: Inference done 223/5000. Dataloading: 0.0011 s/iter. Inference: 0.0620 s/iter. Eval: 0.0329 s/iter. Total: 0.0960 s/iter. ETA=0:07:38
[12/12 03:36:58 d2.evaluation.evaluator]: Inference done 272/5000. Dataloading: 0.0011 s/iter. Inference: 0.0632 s/iter. Eval: 0.0330 s/iter. Total: 0.0973 s/iter. ETA=0:07:40
[12/12 03:37:03 d2.evaluation.evaluator]: Inference done 323/5000. Dataloading: 0.0011 s/iter. Inference: 0.0633 s/iter. Eval: 0.0332 s/iter. Total: 0.0976 s/iter. ETA=0:07:36
[12/12 03:37:08 d2.evaluation.evaluator]: Inference done 374/5000. Dataloading: 0.0011 s/iter. Inference: 0.0635 s/iter. Eval: 0.0332 s/iter. Total: 0.0979 s/iter. ETA=0:07:32
[12/12 03:37:13 d2.evaluation.evaluator]: Inference done 430/5000. Dataloading: 0.0011 s/iter. Inference: 0.0629 s/iter. Eval: 0.0329 s/iter. Total: 0.0969 s/iter. ETA=0:07:22
[12/12 03:37:18 d2.evaluation.evaluator]: Inference done 485/5000. Dataloading: 0.0011 s/iter. Inference: 0.0626 s/iter. Eval: 0.0327 s/iter. Total: 0.0964 s/iter. ETA=0:07:15
[12/12 03:37:24 d2.evaluation.evaluator]: Inference done 536/5000. Dataloading: 0.0011 s/iter. Inference: 0.0627 s/iter. Eval: 0.0328 s/iter. Total: 0.0967 s/iter. ETA=0:07:11
[12/12 03:37:29 d2.evaluation.evaluator]: Inference done 586/5000. Dataloading: 0.0011 s/iter. Inference: 0.0629 s/iter. Eval: 0.0330 s/iter. Total: 0.0970 s/iter. ETA=0:07:08
[12/12 03:37:34 d2.evaluation.evaluator]: Inference done 638/5000. Dataloading: 0.0011 s/iter. Inference: 0.0629 s/iter. Eval: 0.0330 s/iter. Total: 0.0970 s/iter. ETA=0:07:03
[12/12 03:37:39 d2.evaluation.evaluator]: Inference done 689/5000. Dataloading: 0.0011 s/iter. Inference: 0.0629 s/iter. Eval: 0.0331 s/iter. Total: 0.0971 s/iter. ETA=0:06:58
[12/12 03:37:44 d2.evaluation.evaluator]: Inference done 741/5000. Dataloading: 0.0011 s/iter. Inference: 0.0629 s/iter. Eval: 0.0331 s/iter. Total: 0.0972 s/iter. ETA=0:06:53
[12/12 03:37:49 d2.evaluation.evaluator]: Inference done 794/5000. Dataloading: 0.0011 s/iter. Inference: 0.0628 s/iter. Eval: 0.0332 s/iter. Total: 0.0971 s/iter. ETA=0:06:48
[12/12 03:37:54 d2.evaluation.evaluator]: Inference done 848/5000. Dataloading: 0.0011 s/iter. Inference: 0.0626 s/iter. Eval: 0.0330 s/iter. Total: 0.0968 s/iter. ETA=0:06:42
[12/12 03:37:59 d2.evaluation.evaluator]: Inference done 903/5000. Dataloading: 0.0011 s/iter. Inference: 0.0625 s/iter. Eval: 0.0329 s/iter. Total: 0.0965 s/iter. ETA=0:06:35
[12/12 03:38:04 d2.evaluation.evaluator]: Inference done 957/5000. Dataloading: 0.0011 s/iter. Inference: 0.0623 s/iter. Eval: 0.0329 s/iter. Total: 0.0963 s/iter. ETA=0:06:29
[12/12 03:38:09 d2.evaluation.evaluator]: Inference done 1009/5000. Dataloading: 0.0011 s/iter. Inference: 0.0623 s/iter. Eval: 0.0328 s/iter. Total: 0.0963 s/iter. ETA=0:06:24
[12/12 03:38:14 d2.evaluation.evaluator]: Inference done 1062/5000. Dataloading: 0.0011 s/iter. Inference: 0.0623 s/iter. Eval: 0.0328 s/iter. Total: 0.0963 s/iter. ETA=0:06:19
[12/12 03:38:19 d2.evaluation.evaluator]: Inference done 1114/5000. Dataloading: 0.0011 s/iter. Inference: 0.0623 s/iter. Eval: 0.0328 s/iter. Total: 0.0963 s/iter. ETA=0:06:14
[12/12 03:38:24 d2.evaluation.evaluator]: Inference done 1166/5000. Dataloading: 0.0011 s/iter. Inference: 0.0624 s/iter. Eval: 0.0328 s/iter. Total: 0.0964 s/iter. ETA=0:06:09
[12/12 03:38:29 d2.evaluation.evaluator]: Inference done 1217/5000. Dataloading: 0.0011 s/iter. Inference: 0.0624 s/iter. Eval: 0.0329 s/iter. Total: 0.0964 s/iter. ETA=0:06:04
[12/12 03:38:34 d2.evaluation.evaluator]: Inference done 1268/5000. Dataloading: 0.0011 s/iter. Inference: 0.0625 s/iter. Eval: 0.0329 s/iter. Total: 0.0966 s/iter. ETA=0:06:00
[12/12 03:38:39 d2.evaluation.evaluator]: Inference done 1320/5000. Dataloading: 0.0011 s/iter. Inference: 0.0625 s/iter. Eval: 0.0329 s/iter. Total: 0.0966 s/iter. ETA=0:05:55
[12/12 03:38:44 d2.evaluation.evaluator]: Inference done 1374/5000. Dataloading: 0.0011 s/iter. Inference: 0.0625 s/iter. Eval: 0.0329 s/iter. Total: 0.0965 s/iter. ETA=0:05:49
[12/12 03:38:49 d2.evaluation.evaluator]: Inference done 1426/5000. Dataloading: 0.0011 s/iter. Inference: 0.0624 s/iter. Eval: 0.0329 s/iter. Total: 0.0965 s/iter. ETA=0:05:44
[12/12 03:38:54 d2.evaluation.evaluator]: Inference done 1478/5000. Dataloading: 0.0011 s/iter. Inference: 0.0624 s/iter. Eval: 0.0329 s/iter. Total: 0.0965 s/iter. ETA=0:05:39
[12/12 03:38:59 d2.evaluation.evaluator]: Inference done 1531/5000. Dataloading: 0.0011 s/iter. Inference: 0.0624 s/iter. Eval: 0.0329 s/iter. Total: 0.0965 s/iter. ETA=0:05:34
[12/12 03:39:04 d2.evaluation.evaluator]: Inference done 1581/5000. Dataloading: 0.0011 s/iter. Inference: 0.0624 s/iter. Eval: 0.0330 s/iter. Total: 0.0966 s/iter. ETA=0:05:30
[12/12 03:39:09 d2.evaluation.evaluator]: Inference done 1631/5000. Dataloading: 0.0011 s/iter. Inference: 0.0625 s/iter. Eval: 0.0331 s/iter. Total: 0.0967 s/iter. ETA=0:05:25
[12/12 03:39:15 d2.evaluation.evaluator]: Inference done 1683/5000. Dataloading: 0.0011 s/iter. Inference: 0.0626 s/iter. Eval: 0.0330 s/iter. Total: 0.0968 s/iter. ETA=0:05:20
[12/12 03:39:20 d2.evaluation.evaluator]: Inference done 1735/5000. Dataloading: 0.0011 s/iter. Inference: 0.0626 s/iter. Eval: 0.0331 s/iter. Total: 0.0968 s/iter. ETA=0:05:15
[12/12 03:39:25 d2.evaluation.evaluator]: Inference done 1788/5000. Dataloading: 0.0011 s/iter. Inference: 0.0625 s/iter. Eval: 0.0330 s/iter. Total: 0.0967 s/iter. ETA=0:05:10
[12/12 03:39:30 d2.evaluation.evaluator]: Inference done 1840/5000. Dataloading: 0.0011 s/iter. Inference: 0.0625 s/iter. Eval: 0.0330 s/iter. Total: 0.0967 s/iter. ETA=0:05:05
[12/12 03:39:35 d2.evaluation.evaluator]: Inference done 1891/5000. Dataloading: 0.0011 s/iter. Inference: 0.0626 s/iter. Eval: 0.0330 s/iter. Total: 0.0968 s/iter. ETA=0:05:00
[12/12 03:39:40 d2.evaluation.evaluator]: Inference done 1946/5000. Dataloading: 0.0011 s/iter. Inference: 0.0625 s/iter. Eval: 0.0330 s/iter. Total: 0.0966 s/iter. ETA=0:04:55
[12/12 03:39:45 d2.evaluation.evaluator]: Inference done 1998/5000. Dataloading: 0.0011 s/iter. Inference: 0.0625 s/iter. Eval: 0.0330 s/iter. Total: 0.0966 s/iter. ETA=0:04:50
[12/12 03:39:50 d2.evaluation.evaluator]: Inference done 2047/5000. Dataloading: 0.0011 s/iter. Inference: 0.0626 s/iter. Eval: 0.0331 s/iter. Total: 0.0968 s/iter. ETA=0:04:45
[12/12 03:39:55 d2.evaluation.evaluator]: Inference done 2101/5000. Dataloading: 0.0011 s/iter. Inference: 0.0625 s/iter. Eval: 0.0330 s/iter. Total: 0.0967 s/iter. ETA=0:04:40
[12/12 03:40:00 d2.evaluation.evaluator]: Inference done 2153/5000. Dataloading: 0.0011 s/iter. Inference: 0.0625 s/iter. Eval: 0.0330 s/iter. Total: 0.0967 s/iter. ETA=0:04:35
[12/12 03:40:05 d2.evaluation.evaluator]: Inference done 2206/5000. Dataloading: 0.0011 s/iter. Inference: 0.0625 s/iter. Eval: 0.0330 s/iter. Total: 0.0967 s/iter. ETA=0:04:30
[12/12 03:40:10 d2.evaluation.evaluator]: Inference done 2260/5000. Dataloading: 0.0011 s/iter. Inference: 0.0625 s/iter. Eval: 0.0330 s/iter. Total: 0.0966 s/iter. ETA=0:04:24
[12/12 03:40:15 d2.evaluation.evaluator]: Inference done 2315/5000. Dataloading: 0.0011 s/iter. Inference: 0.0624 s/iter. Eval: 0.0329 s/iter. Total: 0.0965 s/iter. ETA=0:04:19
[12/12 03:40:20 d2.evaluation.evaluator]: Inference done 2371/5000. Dataloading: 0.0011 s/iter. Inference: 0.0624 s/iter. Eval: 0.0329 s/iter. Total: 0.0964 s/iter. ETA=0:04:13
[12/12 03:40:25 d2.evaluation.evaluator]: Inference done 2420/5000. Dataloading: 0.0011 s/iter. Inference: 0.0624 s/iter. Eval: 0.0329 s/iter. Total: 0.0965 s/iter. ETA=0:04:09
[12/12 03:40:30 d2.evaluation.evaluator]: Inference done 2474/5000. Dataloading: 0.0011 s/iter. Inference: 0.0624 s/iter. Eval: 0.0329 s/iter. Total: 0.0965 s/iter. ETA=0:04:03
[12/12 03:40:35 d2.evaluation.evaluator]: Inference done 2525/5000. Dataloading: 0.0011 s/iter. Inference: 0.0624 s/iter. Eval: 0.0329 s/iter. Total: 0.0965 s/iter. ETA=0:03:58
[12/12 03:40:41 d2.evaluation.evaluator]: Inference done 2577/5000. Dataloading: 0.0011 s/iter. Inference: 0.0624 s/iter. Eval: 0.0329 s/iter. Total: 0.0966 s/iter. ETA=0:03:53
[12/12 03:40:46 d2.evaluation.evaluator]: Inference done 2629/5000. Dataloading: 0.0011 s/iter. Inference: 0.0625 s/iter. Eval: 0.0329 s/iter. Total: 0.0966 s/iter. ETA=0:03:48
[12/12 03:40:51 d2.evaluation.evaluator]: Inference done 2683/5000. Dataloading: 0.0011 s/iter. Inference: 0.0625 s/iter. Eval: 0.0329 s/iter. Total: 0.0965 s/iter. ETA=0:03:43
[12/12 03:40:56 d2.evaluation.evaluator]: Inference done 2738/5000. Dataloading: 0.0011 s/iter. Inference: 0.0624 s/iter. Eval: 0.0329 s/iter. Total: 0.0964 s/iter. ETA=0:03:38
[12/12 03:41:01 d2.evaluation.evaluator]: Inference done 2791/5000. Dataloading: 0.0011 s/iter. Inference: 0.0624 s/iter. Eval: 0.0329 s/iter. Total: 0.0964 s/iter. ETA=0:03:32
[12/12 03:41:06 d2.evaluation.evaluator]: Inference done 2844/5000. Dataloading: 0.0011 s/iter. Inference: 0.0624 s/iter. Eval: 0.0329 s/iter. Total: 0.0964 s/iter. ETA=0:03:27
[12/12 03:41:11 d2.evaluation.evaluator]: Inference done 2896/5000. Dataloading: 0.0011 s/iter. Inference: 0.0624 s/iter. Eval: 0.0328 s/iter. Total: 0.0964 s/iter. ETA=0:03:22
[12/12 03:41:16 d2.evaluation.evaluator]: Inference done 2948/5000. Dataloading: 0.0011 s/iter. Inference: 0.0624 s/iter. Eval: 0.0329 s/iter. Total: 0.0964 s/iter. ETA=0:03:17
[12/12 03:41:21 d2.evaluation.evaluator]: Inference done 3003/5000. Dataloading: 0.0011 s/iter. Inference: 0.0623 s/iter. Eval: 0.0328 s/iter. Total: 0.0963 s/iter. ETA=0:03:12
[12/12 03:41:26 d2.evaluation.evaluator]: Inference done 3059/5000. Dataloading: 0.0011 s/iter. Inference: 0.0623 s/iter. Eval: 0.0328 s/iter. Total: 0.0962 s/iter. ETA=0:03:06
[12/12 03:41:31 d2.evaluation.evaluator]: Inference done 3114/5000. Dataloading: 0.0011 s/iter. Inference: 0.0622 s/iter. Eval: 0.0328 s/iter. Total: 0.0962 s/iter. ETA=0:03:01
[12/12 03:41:36 d2.evaluation.evaluator]: Inference done 3164/5000. Dataloading: 0.0011 s/iter. Inference: 0.0622 s/iter. Eval: 0.0328 s/iter. Total: 0.0962 s/iter. ETA=0:02:56
[12/12 03:41:41 d2.evaluation.evaluator]: Inference done 3213/5000. Dataloading: 0.0011 s/iter. Inference: 0.0623 s/iter. Eval: 0.0328 s/iter. Total: 0.0963 s/iter. ETA=0:02:52
[12/12 03:41:46 d2.evaluation.evaluator]: Inference done 3266/5000. Dataloading: 0.0011 s/iter. Inference: 0.0623 s/iter. Eval: 0.0328 s/iter. Total: 0.0963 s/iter. ETA=0:02:47
[12/12 03:41:51 d2.evaluation.evaluator]: Inference done 3317/5000. Dataloading: 0.0011 s/iter. Inference: 0.0623 s/iter. Eval: 0.0329 s/iter. Total: 0.0964 s/iter. ETA=0:02:42
[12/12 03:41:56 d2.evaluation.evaluator]: Inference done 3367/5000. Dataloading: 0.0011 s/iter. Inference: 0.0624 s/iter. Eval: 0.0329 s/iter. Total: 0.0964 s/iter. ETA=0:02:37
[12/12 03:42:01 d2.evaluation.evaluator]: Inference done 3421/5000. Dataloading: 0.0011 s/iter. Inference: 0.0623 s/iter. Eval: 0.0329 s/iter. Total: 0.0964 s/iter. ETA=0:02:32
[12/12 03:42:07 d2.evaluation.evaluator]: Inference done 3474/5000. Dataloading: 0.0011 s/iter. Inference: 0.0623 s/iter. Eval: 0.0329 s/iter. Total: 0.0964 s/iter. ETA=0:02:27
[12/12 03:42:12 d2.evaluation.evaluator]: Inference done 3526/5000. Dataloading: 0.0011 s/iter. Inference: 0.0623 s/iter. Eval: 0.0329 s/iter. Total: 0.0964 s/iter. ETA=0:02:22
[12/12 03:42:17 d2.evaluation.evaluator]: Inference done 3579/5000. Dataloading: 0.0011 s/iter. Inference: 0.0623 s/iter. Eval: 0.0329 s/iter. Total: 0.0964 s/iter. ETA=0:02:16
[12/12 03:42:22 d2.evaluation.evaluator]: Inference done 3630/5000. Dataloading: 0.0011 s/iter. Inference: 0.0623 s/iter. Eval: 0.0329 s/iter. Total: 0.0964 s/iter. ETA=0:02:12
[12/12 03:42:27 d2.evaluation.evaluator]: Inference done 3684/5000. Dataloading: 0.0011 s/iter. Inference: 0.0623 s/iter. Eval: 0.0329 s/iter. Total: 0.0963 s/iter. ETA=0:02:06
[12/12 03:42:32 d2.evaluation.evaluator]: Inference done 3737/5000. Dataloading: 0.0011 s/iter. Inference: 0.0623 s/iter. Eval: 0.0329 s/iter. Total: 0.0963 s/iter. ETA=0:02:01
[12/12 03:42:37 d2.evaluation.evaluator]: Inference done 3788/5000. Dataloading: 0.0011 s/iter. Inference: 0.0623 s/iter. Eval: 0.0329 s/iter. Total: 0.0964 s/iter. ETA=0:01:56
[12/12 03:42:42 d2.evaluation.evaluator]: Inference done 3843/5000. Dataloading: 0.0011 s/iter. Inference: 0.0623 s/iter. Eval: 0.0328 s/iter. Total: 0.0963 s/iter. ETA=0:01:51
[12/12 03:42:47 d2.evaluation.evaluator]: Inference done 3899/5000. Dataloading: 0.0011 s/iter. Inference: 0.0622 s/iter. Eval: 0.0328 s/iter. Total: 0.0962 s/iter. ETA=0:01:45
[12/12 03:42:52 d2.evaluation.evaluator]: Inference done 3952/5000. Dataloading: 0.0011 s/iter. Inference: 0.0622 s/iter. Eval: 0.0328 s/iter. Total: 0.0962 s/iter. ETA=0:01:40
[12/12 03:42:57 d2.evaluation.evaluator]: Inference done 4006/5000. Dataloading: 0.0011 s/iter. Inference: 0.0622 s/iter. Eval: 0.0328 s/iter. Total: 0.0962 s/iter. ETA=0:01:35
[12/12 03:43:02 d2.evaluation.evaluator]: Inference done 4058/5000. Dataloading: 0.0011 s/iter. Inference: 0.0622 s/iter. Eval: 0.0328 s/iter. Total: 0.0962 s/iter. ETA=0:01:30
[12/12 03:43:07 d2.evaluation.evaluator]: Inference done 4109/5000. Dataloading: 0.0011 s/iter. Inference: 0.0622 s/iter. Eval: 0.0328 s/iter. Total: 0.0962 s/iter. ETA=0:01:25
[12/12 03:43:12 d2.evaluation.evaluator]: Inference done 4161/5000. Dataloading: 0.0011 s/iter. Inference: 0.0622 s/iter. Eval: 0.0328 s/iter. Total: 0.0962 s/iter. ETA=0:01:20
[12/12 03:43:17 d2.evaluation.evaluator]: Inference done 4213/5000. Dataloading: 0.0011 s/iter. Inference: 0.0622 s/iter. Eval: 0.0328 s/iter. Total: 0.0962 s/iter. ETA=0:01:15
[12/12 03:43:22 d2.evaluation.evaluator]: Inference done 4265/5000. Dataloading: 0.0011 s/iter. Inference: 0.0622 s/iter. Eval: 0.0328 s/iter. Total: 0.0962 s/iter. ETA=0:01:10
[12/12 03:43:27 d2.evaluation.evaluator]: Inference done 4318/5000. Dataloading: 0.0011 s/iter. Inference: 0.0622 s/iter. Eval: 0.0328 s/iter. Total: 0.0962 s/iter. ETA=0:01:05
[12/12 03:43:32 d2.evaluation.evaluator]: Inference done 4374/5000. Dataloading: 0.0011 s/iter. Inference: 0.0622 s/iter. Eval: 0.0328 s/iter. Total: 0.0962 s/iter. ETA=0:01:00
[12/12 03:43:37 d2.evaluation.evaluator]: Inference done 4426/5000. Dataloading: 0.0011 s/iter. Inference: 0.0622 s/iter. Eval: 0.0328 s/iter. Total: 0.0962 s/iter. ETA=0:00:55
[12/12 03:43:42 d2.evaluation.evaluator]: Inference done 4480/5000. Dataloading: 0.0011 s/iter. Inference: 0.0621 s/iter. Eval: 0.0328 s/iter. Total: 0.0961 s/iter. ETA=0:00:49
[12/12 03:43:47 d2.evaluation.evaluator]: Inference done 4533/5000. Dataloading: 0.0011 s/iter. Inference: 0.0621 s/iter. Eval: 0.0328 s/iter. Total: 0.0961 s/iter. ETA=0:00:44
[12/12 03:43:52 d2.evaluation.evaluator]: Inference done 4582/5000. Dataloading: 0.0011 s/iter. Inference: 0.0622 s/iter. Eval: 0.0328 s/iter. Total: 0.0962 s/iter. ETA=0:00:40
[12/12 03:43:58 d2.evaluation.evaluator]: Inference done 4637/5000. Dataloading: 0.0011 s/iter. Inference: 0.0622 s/iter. Eval: 0.0328 s/iter. Total: 0.0961 s/iter. ETA=0:00:34
[12/12 03:44:03 d2.evaluation.evaluator]: Inference done 4689/5000. Dataloading: 0.0011 s/iter. Inference: 0.0622 s/iter. Eval: 0.0328 s/iter. Total: 0.0962 s/iter. ETA=0:00:29
[12/12 03:44:08 d2.evaluation.evaluator]: Inference done 4743/5000. Dataloading: 0.0011 s/iter. Inference: 0.0622 s/iter. Eval: 0.0328 s/iter. Total: 0.0961 s/iter. ETA=0:00:24
[12/12 03:44:13 d2.evaluation.evaluator]: Inference done 4797/5000. Dataloading: 0.0011 s/iter. Inference: 0.0622 s/iter. Eval: 0.0328 s/iter. Total: 0.0961 s/iter. ETA=0:00:19
[12/12 03:44:18 d2.evaluation.evaluator]: Inference done 4848/5000. Dataloading: 0.0011 s/iter. Inference: 0.0622 s/iter. Eval: 0.0328 s/iter. Total: 0.0961 s/iter. ETA=0:00:14
[12/12 03:44:23 d2.evaluation.evaluator]: Inference done 4903/5000. Dataloading: 0.0011 s/iter. Inference: 0.0621 s/iter. Eval: 0.0328 s/iter. Total: 0.0961 s/iter. ETA=0:00:09
[12/12 03:44:28 d2.evaluation.evaluator]: Inference done 4954/5000. Dataloading: 0.0011 s/iter. Inference: 0.0622 s/iter. Eval: 0.0328 s/iter. Total: 0.0961 s/iter. ETA=0:00:04
[12/12 03:44:32 d2.evaluation.evaluator]: Total inference time: 0:08:00.270726 (0.096150 s / iter per device, on 1 devices)
[12/12 03:44:32 d2.evaluation.evaluator]: Total inference pure compute time: 0:05:10 (0.062160 s / iter per device, on 1 devices)
[12/12 03:44:32 d2.evaluation.panoptic_evaluation]: Writing all panoptic predictions to /tmp/panoptic_eval3_nlk6fy ...
[12/12 03:44:55 d2.evaluation.panoptic_evaluation]: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 18.677 | 64.915 | 24.431 |      133      |
| Things | 18.879 | 68.780 | 24.747 |      80       |
| Stuff  | 18.371 | 59.080 | 23.955 |      53       |
[12/12 03:44:55 d2.evaluation.coco_evaluation]: Preparing results for COCO format ...
[12/12 03:44:55 d2.evaluation.coco_evaluation]: Saving results to ./output/inference/coco_instances_results.json
[12/12 03:44:56 d2.evaluation.coco_evaluation]: Evaluating predictions with unofficial COCO API...
Loading and preparing results...
DONE (t=0.04s)
creating index...
index created!
[12/12 03:44:56 d2.evaluation.fast_eval_api]: Evaluate annotation type *bbox*
[12/12 03:45:04 d2.evaluation.fast_eval_api]: COCOeval_opt.evaluate() finished in 7.72 seconds.
[12/12 03:45:04 d2.evaluation.fast_eval_api]: Accumulating evaluation results...
[12/12 03:45:04 d2.evaluation.fast_eval_api]: COCOeval_opt.accumulate() finished in 0.62 seconds.
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.073
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.142
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.066
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.012
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.067
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.123
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.091
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.127
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.128
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.014
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.106
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.218
[12/12 03:45:04 d2.evaluation.coco_evaluation]: Evaluation results for bbox: 
|  AP   |  AP50  |  AP75  |  APs  |  APm  |  APl   |
|:-----:|:------:|:------:|:-----:|:-----:|:------:|
| 7.291 | 14.247 | 6.632  | 1.152 | 6.658 | 12.262 |
[12/12 03:45:04 d2.evaluation.coco_evaluation]: Per-category bbox AP: 
| category      | AP     | category     | AP     | category       | AP     |
|:--------------|:-------|:-------------|:-------|:---------------|:-------|
| person        | 15.680 | bicycle      | 4.445  | car            | 7.603  |
| motorcycle    | 9.015  | airplane     | 19.722 | bus            | 33.654 |
| train         | 29.667 | truck        | 6.136  | boat           | 2.190  |
| traffic light | 1.681  | fire hydrant | 27.056 | stop sign      | 24.137 |
| parking meter | 2.772  | bench        | 2.404  | bird           | 7.262  |
| cat           | 12.715 | dog          | 15.862 | horse          | 13.924 |
| sheep         | 12.777 | cow          | 11.729 | elephant       | 25.459 |
| bear          | 27.295 | zebra        | 32.884 | giraffe        | 29.264 |
| backpack      | 0.520  | umbrella     | 8.637  | handbag        | 0.000  |
| tie           | 0.000  | suitcase     | 2.696  | frisbee        | 8.637  |
| skis          | 2.144  | snowboard    | 1.037  | sports ball    | 5.665  |
| kite          | 9.713  | baseball bat | 0.417  | baseball glove | 5.679  |
| skateboard    | 7.651  | surfboard    | 3.677  | tennis racket  | 8.103  |
| bottle        | 0.988  | wine glass   | 0.086  | cup            | 2.529  |
| fork          | 0.009  | knife        | 0.050  | spoon          | 0.000  |
| bowl          | 2.069  | banana       | 1.267  | apple          | 0.690  |
| sandwich      | 0.525  | orange       | 3.403  | broccoli       | 2.032  |
| carrot        | 0.152  | hot dog      | 0.000  | pizza          | 4.732  |
| donut         | 2.781  | cake         | 0.532  | chair          | 3.292  |
| couch         | 11.403 | potted plant | 1.353  | bed            | 16.818 |
| dining table  | 2.311  | toilet       | 19.867 | tv             | 14.401 |
| laptop        | 10.507 | mouse        | 4.081  | remote         | 0.212  |
| keyboard      | 3.764  | cell phone   | 0.828  | microwave      | 3.695  |
| oven          | 2.657  | toaster      | 0.000  | sink           | 4.867  |
| refrigerator  | 8.403  | book         | 0.160  | clock          | 7.500  |
| vase          | 0.889  | scissors     | 0.000  | teddy bear     | 4.498  |
| hair drier    | 0.000  | toothbrush   | 0.000  |                |        |
Loading and preparing results...
DONE (t=0.50s)
creating index...
index created!
[12/12 03:45:05 d2.evaluation.fast_eval_api]: Evaluate annotation type *segm*
[12/12 03:45:14 d2.evaluation.fast_eval_api]: COCOeval_opt.evaluate() finished in 8.93 seconds.
[12/12 03:45:14 d2.evaluation.fast_eval_api]: Accumulating evaluation results...
[12/12 03:45:15 d2.evaluation.fast_eval_api]: COCOeval_opt.accumulate() finished in 0.68 seconds.
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.076
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.154
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.068
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.006
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.066
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.167
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.092
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.121
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.122
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.010
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.105
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.219
[12/12 03:45:17 d2.evaluation.coco_evaluation]: Evaluation results for segm: 
|  AP   |  AP50  |  AP75  |  APs  |  APm  |  APl   |
|:-----:|:------:|:------:|:-----:|:-----:|:------:|
| 7.632 | 15.366 | 6.840  | 0.605 | 6.615 | 16.651 |
[12/12 03:45:17 d2.evaluation.coco_evaluation]: Per-category segm AP: 
| category      | AP     | category     | AP     | category       | AP     |
|:--------------|:-------|:-------------|:-------|:---------------|:-------|
| person        | 11.507 | bicycle      | 2.398  | car            | 7.542  |
| motorcycle    | 5.960  | airplane     | 16.550 | bus            | 33.386 |
| train         | 34.156 | truck        | 6.180  | boat           | 1.984  |
| traffic light | 2.357  | fire hydrant | 30.544 | stop sign      | 32.501 |
| parking meter | 5.083  | bench        | 2.285  | bird           | 4.206  |
| cat           | 18.335 | dog          | 18.461 | horse          | 9.303  |
| sheep         | 10.975 | cow          | 8.575  | elephant       | 24.228 |
| bear          | 31.411 | zebra        | 23.654 | giraffe        | 20.726 |
| backpack      | 0.322  | umbrella     | 12.794 | handbag        | 0.198  |
| tie           | 0.000  | suitcase     | 4.686  | frisbee        | 7.801  |
| skis          | 0.017  | snowboard    | 0.502  | sports ball    | 5.697  |
| kite          | 5.614  | baseball bat | 0.654  | baseball glove | 6.432  |
| skateboard    | 2.166  | surfboard    | 3.466  | tennis racket  | 12.166 |
| bottle        | 2.022  | wine glass   | 0.059  | cup            | 4.639  |
| fork          | 0.018  | knife        | 0.124  | spoon          | 0.000  |
| bowl          | 4.306  | banana       | 0.872  | apple          | 1.049  |
| sandwich      | 1.985  | orange       | 5.108  | broccoli       | 2.875  |
| carrot        | 0.214  | hot dog      | 1.195  | pizza          | 6.300  |
| donut         | 4.058  | cake         | 0.764  | chair          | 2.677  |
| couch         | 10.348 | potted plant | 1.336  | bed            | 13.675 |
| dining table  | 0.222  | toilet       | 29.545 | tv             | 20.867 |
| laptop        | 15.690 | mouse        | 7.275  | remote         | 0.365  |
| keyboard      | 7.840  | cell phone   | 3.102  | microwave      | 3.327  |
| oven          | 1.804  | toaster      | 0.000  | sink           | 5.470  |
| refrigerator  | 6.701  | book         | 0.094  | clock          | 9.935  |
| vase          | 3.089  | scissors     | 0.000  | teddy bear     | 6.759  |
| hair drier    | 0.000  | toothbrush   | 0.033  |                |        |
[12/12 03:45:22 d2.engine.defaults]: Evaluation results for coco_2017_val_panoptic in csv format:
[12/12 03:45:22 d2.evaluation.testing]: copypaste: Task: panoptic_seg
[12/12 03:45:22 d2.evaluation.testing]: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[12/12 03:45:22 d2.evaluation.testing]: copypaste: 18.6767,64.9146,24.4310,18.8792,68.7800,24.7465,18.3711,59.0801,23.9547
[12/12 03:45:22 d2.evaluation.testing]: copypaste: Task: bbox
[12/12 03:45:22 d2.evaluation.testing]: copypaste: AP,AP50,AP75,APs,APm,APl
[12/12 03:45:22 d2.evaluation.testing]: copypaste: 7.2908,14.2471,6.6322,1.1518,6.6579,12.2617
[12/12 03:45:22 d2.evaluation.testing]: copypaste: Task: segm
[12/12 03:45:22 d2.evaluation.testing]: copypaste: AP,AP50,AP75,APs,APm,APl
[12/12 03:45:22 d2.evaluation.testing]: copypaste: 7.6320,15.3657,6.8399,0.6052,6.6154,16.6505