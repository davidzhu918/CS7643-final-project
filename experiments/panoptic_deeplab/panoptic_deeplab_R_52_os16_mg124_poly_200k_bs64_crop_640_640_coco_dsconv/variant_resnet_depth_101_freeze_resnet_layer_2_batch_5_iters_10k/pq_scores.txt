env: DETECTRON2_DATASETS=/content/datasets
Command Line Args: Namespace(config_file='./detectron2/projects/Panoptic-DeepLab/configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.RESNETS.NORM', 'BN', 'MODEL.INS_EMBED_HEAD.NORM', 'BN', 'MODEL.SEM_SEG_HEAD.NORM', 'BN', 'SOLVER.MAX_ITER', '10000', 'SOLVER.IMS_PER_BATCH', '5', 'SOLVER.BASE_LR', '0.0025', 'MODEL.BACKBONE.FREEZE_AT', '2', 'MODEL.RESNETS.DEPTH', '101', 'MODEL.WEIGHTS', 'detectron2://DeepLab/R-103.pkl'], resume=False)
Loading config ./detectron2/projects/Panoptic-DeepLab/configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv.yaml with yaml.unsafe_load. Your machine may be at risk if the file contains malicious content.
[12/10 21:42:17 detectron2]: Rank of current process: 0. World size: 1
[12/10 21:42:18 detectron2]: Environment info:
----------------------  ----------------------------------------------------------------
sys.platform            linux
Python                  3.7.12 (default, Jan 15 2022, 18:48:18) [GCC 7.5.0]
numpy                   1.21.5
detectron2              0.6 @/content/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.1
detectron2 arch flags   7.0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.10.0+cu111 @/usr/local/lib/python3.7/dist-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0                   Tesla V100-SXM2-16GB (arch=7.0)
Driver version          460.32.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.1.2
torchvision             0.11.1+cu111 @/usr/local/lib/python3.7/dist-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20221122
iopath                  0.1.9
cv2                     4.1.2
----------------------  ----------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[12/10 21:42:18 detectron2]: Command line arguments: Namespace(config_file='./detectron2/projects/Panoptic-DeepLab/configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.RESNETS.NORM', 'BN', 'MODEL.INS_EMBED_HEAD.NORM', 'BN', 'MODEL.SEM_SEG_HEAD.NORM', 'BN', 'SOLVER.MAX_ITER', '10000', 'SOLVER.IMS_PER_BATCH', '5', 'SOLVER.BASE_LR', '0.0025', 'MODEL.BACKBONE.FREEZE_AT', '2', 'MODEL.RESNETS.DEPTH', '101', 'MODEL.WEIGHTS', 'detectron2://DeepLab/R-103.pkl'], resume=False)
[12/10 21:42:18 detectron2]: Contents of args.config_file=./detectron2/projects/Panoptic-DeepLab/configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv.yaml:
_BASE_: ../Cityscapes-PanopticSegmentation/Base-PanopticDeepLab-OS16.yaml
MODEL:
  WEIGHTS: "detectron2://DeepLab/R-52.pkl"
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  BACKBONE:
    NAME: "build_resnet_deeplab_backbone"
  RESNETS:
    DEPTH: 50
    NORM: "SyncBN"
    RES5_MULTI_GRID: [1, 2, 4]
    STEM_TYPE: "deeplab"
    STEM_OUT_CHANNELS: 128
    STRIDE_IN_1X1: False
  SEM_SEG_HEAD:
    NUM_CLASSES: 133
    LOSS_TOP_K: 1.0
    USE_DEPTHWISE_SEPARABLE_CONV: True
  PANOPTIC_DEEPLAB:
    STUFF_AREA: 4096
    NMS_KERNEL: 41
    SIZE_DIVISIBILITY: 640
    USE_DEPTHWISE_SEPARABLE_CONV: True
DATASETS:
  TRAIN: ("coco_2017_train_panoptic",)
  TEST: ("coco_2017_val_panoptic",)
SOLVER:
  BASE_LR: 0.0005
  MAX_ITER: 200000
  IMS_PER_BATCH: 64
INPUT:
  FORMAT: "RGB"
  GAUSSIAN_SIGMA: 8
  MIN_SIZE_TRAIN: !!python/object/apply:eval ["[int(x * 0.1 * 640) for x in range(5, 16)]"]
  MIN_SIZE_TRAIN_SAMPLING: "choice"
  MIN_SIZE_TEST: 640
  MAX_SIZE_TRAIN: 960
  MAX_SIZE_TEST: 640
  CROP:
    ENABLED: True
    TYPE: "absolute"
    SIZE: (640, 640)

[12/10 21:42:18 detectron2]: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 10
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - coco_2017_val_panoptic
  TRAIN:
  - coco_2017_train_panoptic
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: true
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 640
    - 640
    TYPE: absolute
  FORMAT: RGB
  GAUSSIAN_SIGMA: 8
  IGNORE_CROWD_IN_SEMANTIC: false
  IGNORE_STUFF_IN_OFFSET: true
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 640
  MAX_SIZE_TRAIN: 960
  MIN_SIZE_TEST: 640
  MIN_SIZE_TRAIN:
  - 320
  - 384
  - 448
  - 512
  - 576
  - 640
  - 704
  - 768
  - 832
  - 896
  - 960
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SMALL_INSTANCE_AREA: 4096
  SMALL_INSTANCE_WEIGHT: 3
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_deeplab_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  INS_EMBED_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    CENTER_LOSS_WEIGHT: 200.0
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    HEAD_CHANNELS: 32
    IN_FEATURES:
    - res2
    - res3
    - res5
    NAME: PanopticDeepLabInsEmbedHead
    NORM: BN
    OFFSET_LOSS_WEIGHT: 0.01
    PROJECT_CHANNELS:
    - 32
    - 64
    PROJECT_FEATURES:
    - res2
    - res3
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: PanopticDeepLab
  PANOPTIC_DEEPLAB:
    BENCHMARK_NETWORK_SPEED: false
    CENTER_THRESHOLD: 0.1
    NMS_KERNEL: 41
    PREDICT_INSTANCES: true
    SIZE_DIVISIBILITY: 640
    STUFF_AREA: 4096
    TOP_K_INSTANCE: 200
    USE_DEPTHWISE_SEPARABLE_CONV: true
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 101
    NORM: BN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 2
    RES5_MULTI_GRID:
    - 1
    - 2
    - 4
    STEM_OUT_CHANNELS: 128
    STEM_TYPE: deeplab
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id001
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS:
    - 10.0
    - 10.0
    - 5.0
    - 5.0
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    HEAD_CHANNELS: 256
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res5
    LOSS_TOP_K: 1.0
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    NAME: PanopticDeepLabSemSegHead
    NORM: BN
    NUM_CLASSES: 133
    PROJECT_CHANNELS:
    - 32
    - 64
    PROJECT_FEATURES:
    - res2
    - res3
    USE_DEPTHWISE_SEPARABLE_CONV: true
  WEIGHTS: detectron2://DeepLab/R-103.pkl
OUTPUT_DIR: ./output
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.0025
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 5
  LR_SCHEDULER_NAME: WarmupPolyLR
  MAX_ITER: 10000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAM
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 30000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0
  WEIGHT_DECAY_BIAS: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/10 21:42:18 detectron2]: Full config saved to ./output/config.yaml
[12/10 21:42:18 d2.utils.env]: Using a generated random seed 18870561
[12/10 21:42:23 d2.engine.defaults]: Model:
PanopticDeepLab(
  (backbone): ResNet(
    (stem): DeepLabStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
      )
      (conv2): Conv2d(
        64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
      )
      (conv3): Conv2d(
        64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv1): Conv2d(
          128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (6): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (7): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (8): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (9): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (10): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (11): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (12): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (13): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (14): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (15): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (16): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (17): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (18): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (19): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (20): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (21): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (22): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(8, 8), dilation=(8, 8), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (sem_seg_head): PanopticDeepLabSemSegHead(
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            288, 288, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=288, bias=False
            (norm): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            288, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AvgPool2d(kernel_size=(40, 40), stride=1, padding=0)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=256, bias=False
        (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (predictor): Conv2d(256, 133, kernel_size=(1, 1), stride=(1, 1))
    (loss): DeepLabCE(
      (criterion): CrossEntropyLoss()
    )
  )
  (ins_embed_head): PanopticDeepLabInsEmbedHead(
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            160, 160, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=160, bias=False
            (norm): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AvgPool2d(kernel_size=(40, 40), stride=1, padding=0)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (center_head): Sequential(
      (0): Conv2d(
        128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): Conv2d(
        128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (center_predictor): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
    (offset_head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=128, bias=False
        (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (offset_predictor): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
    (center_loss): MSELoss()
    (offset_loss): L1Loss()
  )
)
[12/10 21:42:23 d2.projects.panoptic_deeplab.dataset_mapper]: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960), max_size=960, sample_style='choice'), RandomCrop(crop_type='absolute', crop_size=[640, 640]), RandomFlip()]
[12/10 21:42:31 d2.data.build]: Using training sampler TrainingSampler
[12/10 21:42:31 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/10 21:42:31 d2.data.common]: Serializing 118287 elements to byte tensors and concatenating them all ...
[12/10 21:42:32 d2.data.common]: Serialized dataset takes 80.32 MiB
/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 10 worker processes in total. Our suggested max number of worker in current system is 8, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  cpuset_checked))
[12/10 21:42:34 fvcore.common.checkpoint]: [Checkpointer] Loading from detectron2://DeepLab/R-103.pkl ...
R-103.pkl: 179MB [00:09, 18.5MB/s]               
[12/10 21:42:44 fvcore.common.checkpoint]: Reading a file from 'torchvision'
[12/10 21:42:44 d2.checkpoint.c2_model_loading]: Following weights matched with submodule backbone:
| Names in Model    | Names in Checkpoint                                                                                        | Shapes                                             |
|:------------------|:-----------------------------------------------------------------------------------------------------------|:---------------------------------------------------|
| res2.0.conv1.*    | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,128,1,1)               |
| res2.0.conv2.*    | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,64,3,3)                |
| res2.0.conv3.*    | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,64,1,1)           |
| res2.0.shortcut.* | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                          | (256,) (256,) (256,) (256,) (256,128,1,1)          |
| res2.1.conv1.*    | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,256,1,1)               |
| res2.1.conv2.*    | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,64,3,3)                |
| res2.1.conv3.*    | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,64,1,1)           |
| res2.2.conv1.*    | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,256,1,1)               |
| res2.2.conv2.*    | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,64,3,3)                |
| res2.2.conv3.*    | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,64,1,1)           |
| res3.0.conv1.*    | res3.0.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3.0.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3.0.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3.0.shortcut.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) () (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3.1.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3.1.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3.1.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3.2.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3.2.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3.2.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3.3.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3.3.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3.3.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4.0.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4.0.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4.0.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4.0.shortcut.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) () (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4.1.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4.1.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4.1.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.10.conv1.*   | res4.10.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.10.conv2.*   | res4.10.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.10.conv3.*   | res4.10.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.11.conv1.*   | res4.11.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.11.conv2.*   | res4.11.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.11.conv3.*   | res4.11.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.12.conv1.*   | res4.12.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.12.conv2.*   | res4.12.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.12.conv3.*   | res4.12.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.13.conv1.*   | res4.13.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.13.conv2.*   | res4.13.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.13.conv3.*   | res4.13.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.14.conv1.*   | res4.14.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.14.conv2.*   | res4.14.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.14.conv3.*   | res4.14.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.15.conv1.*   | res4.15.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.15.conv2.*   | res4.15.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.15.conv3.*   | res4.15.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.16.conv1.*   | res4.16.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.16.conv2.*   | res4.16.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.16.conv3.*   | res4.16.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.17.conv1.*   | res4.17.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.17.conv2.*   | res4.17.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.17.conv3.*   | res4.17.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.18.conv1.*   | res4.18.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.18.conv2.*   | res4.18.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.18.conv3.*   | res4.18.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.19.conv1.*   | res4.19.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.19.conv2.*   | res4.19.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.19.conv3.*   | res4.19.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4.2.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4.2.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4.2.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.20.conv1.*   | res4.20.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.20.conv2.*   | res4.20.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.20.conv3.*   | res4.20.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.21.conv1.*   | res4.21.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.21.conv2.*   | res4.21.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.21.conv3.*   | res4.21.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.22.conv1.*   | res4.22.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.22.conv2.*   | res4.22.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.22.conv3.*   | res4.22.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}   | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4.3.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4.3.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4.3.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4.4.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4.4.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4.4.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4.5.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4.5.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4.5.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.6.conv1.*    | res4.6.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.6.conv2.*    | res4.6.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.6.conv3.*    | res4.6.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.7.conv1.*    | res4.7.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.7.conv2.*    | res4.7.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.7.conv3.*    | res4.7.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.8.conv1.*    | res4.8.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.8.conv2.*    | res4.8.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.8.conv3.*    | res4.8.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.9.conv1.*    | res4.9.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.9.conv2.*    | res4.9.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.9.conv3.*    | res4.9.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) () (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) () (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) () (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) () (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.*      | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                               | (64,) (64,) (64,) (64,) (64,3,3,3)                 |
| stem.conv2.*      | stem.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                               | (64,) (64,) (64,) (64,) (64,64,3,3)                |
| stem.conv3.*      | stem.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                               | (128,) (128,) (128,) (128,) (128,64,3,3)           |
WARNING [12/10 21:42:45 fvcore.common.checkpoint]: Some model parameters or buffers are not found in the checkpoint:
ins_embed_head.center_head.0.norm.{bias, running_mean, running_var, weight}
ins_embed_head.center_head.0.weight
ins_embed_head.center_head.1.norm.{bias, running_mean, running_var, weight}
ins_embed_head.center_head.1.weight
ins_embed_head.center_predictor.{bias, weight}
ins_embed_head.decoder.res2.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res2.fuse_conv.depthwise.weight
ins_embed_head.decoder.res2.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res2.fuse_conv.pointwise.weight
ins_embed_head.decoder.res2.project_conv.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res2.project_conv.weight
ins_embed_head.decoder.res3.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res3.fuse_conv.depthwise.weight
ins_embed_head.decoder.res3.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res3.fuse_conv.pointwise.weight
ins_embed_head.decoder.res3.project_conv.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res3.project_conv.weight
ins_embed_head.decoder.res5.project_conv.convs.0.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.0.weight
ins_embed_head.decoder.res5.project_conv.convs.1.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.1.depthwise.weight
ins_embed_head.decoder.res5.project_conv.convs.1.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.1.pointwise.weight
ins_embed_head.decoder.res5.project_conv.convs.2.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.2.depthwise.weight
ins_embed_head.decoder.res5.project_conv.convs.2.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.2.pointwise.weight
ins_embed_head.decoder.res5.project_conv.convs.3.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.3.depthwise.weight
ins_embed_head.decoder.res5.project_conv.convs.3.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.3.pointwise.weight
ins_embed_head.decoder.res5.project_conv.convs.4.1.{bias, weight}
ins_embed_head.decoder.res5.project_conv.project.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.project.weight
ins_embed_head.offset_head.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.offset_head.depthwise.weight
ins_embed_head.offset_head.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.offset_head.pointwise.weight
ins_embed_head.offset_predictor.{bias, weight}
sem_seg_head.decoder.res2.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res2.fuse_conv.depthwise.weight
sem_seg_head.decoder.res2.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res2.fuse_conv.pointwise.weight
sem_seg_head.decoder.res2.project_conv.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res2.project_conv.weight
sem_seg_head.decoder.res3.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res3.fuse_conv.depthwise.weight
sem_seg_head.decoder.res3.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res3.fuse_conv.pointwise.weight
sem_seg_head.decoder.res3.project_conv.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res3.project_conv.weight
sem_seg_head.decoder.res5.project_conv.convs.0.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.0.weight
sem_seg_head.decoder.res5.project_conv.convs.1.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.1.depthwise.weight
sem_seg_head.decoder.res5.project_conv.convs.1.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.1.pointwise.weight
sem_seg_head.decoder.res5.project_conv.convs.2.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.2.depthwise.weight
sem_seg_head.decoder.res5.project_conv.convs.2.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.2.pointwise.weight
sem_seg_head.decoder.res5.project_conv.convs.3.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.3.depthwise.weight
sem_seg_head.decoder.res5.project_conv.convs.3.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.3.pointwise.weight
sem_seg_head.decoder.res5.project_conv.convs.4.1.{bias, weight}
sem_seg_head.decoder.res5.project_conv.project.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.project.weight
sem_seg_head.head.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.head.depthwise.weight
sem_seg_head.head.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.head.pointwise.weight
sem_seg_head.predictor.{bias, weight}
WARNING [12/10 21:42:45 fvcore.common.checkpoint]: The checkpoint state_dict contains keys that are not used by the model:
  res2.0.conv1.norm.num_batches_tracked
  res2.0.conv2.norm.num_batches_tracked
  res2.0.conv3.norm.num_batches_tracked
  res2.0.shortcut.norm.num_batches_tracked
  res2.1.conv1.norm.num_batches_tracked
  res2.1.conv2.norm.num_batches_tracked
  res2.1.conv3.norm.num_batches_tracked
  res2.2.conv1.norm.num_batches_tracked
  res2.2.conv2.norm.num_batches_tracked
  res2.2.conv3.norm.num_batches_tracked
  stem.conv1.norm.num_batches_tracked
  stem.conv2.norm.num_batches_tracked
  stem.conv3.norm.num_batches_tracked
  stem.fc.{bias, weight}
[12/10 21:42:45 d2.engine.train_loop]: Starting training from iteration 0
/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 10 worker processes in total. Our suggested max number of worker in current system is 8, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  cpuset_checked))
[12/10 21:42:56 d2.utils.events]:  eta: 1:17:34  iter: 19  total_loss: 6.19  loss_sem_seg: 3.824  loss_center: 0.6247  loss_offset: 1.681  time: 0.4670  data_time: 0.0794  lr: 4.9867e-05  max_mem: 10885M
[12/10 21:43:05 d2.utils.events]:  eta: 1:17:24  iter: 39  total_loss: 6.14  loss_sem_seg: 3.74  loss_center: 0.6268  loss_offset: 1.67  time: 0.4659  data_time: 0.0269  lr: 9.9552e-05  max_mem: 10885M
[12/10 21:43:14 d2.utils.events]:  eta: 1:17:08  iter: 59  total_loss: 5.596  loss_sem_seg: 3.341  loss_center: 0.7784  loss_offset: 1.382  time: 0.4647  data_time: 0.0263  lr: 0.00014906  max_mem: 10885M
[12/10 21:43:24 d2.utils.events]:  eta: 1:16:38  iter: 79  total_loss: 5.715  loss_sem_seg: 3.454  loss_center: 0.7218  loss_offset: 1.487  time: 0.4643  data_time: 0.0257  lr: 0.00019838  max_mem: 10885M
[12/10 21:43:33 d2.utils.events]:  eta: 1:16:46  iter: 99  total_loss: 5.468  loss_sem_seg: 3.227  loss_center: 0.7466  loss_offset: 1.42  time: 0.4647  data_time: 0.0273  lr: 0.00024753  max_mem: 10885M
[12/10 21:43:42 d2.utils.events]:  eta: 1:16:39  iter: 119  total_loss: 5.582  loss_sem_seg: 3.116  loss_center: 0.814  loss_offset: 1.628  time: 0.4647  data_time: 0.0262  lr: 0.00029649  max_mem: 10885M
[12/10 21:43:52 d2.utils.events]:  eta: 1:16:29  iter: 139  total_loss: 5.112  loss_sem_seg: 2.935  loss_center: 0.8324  loss_offset: 1.537  time: 0.4649  data_time: 0.0264  lr: 0.00034528  max_mem: 10885M
[12/10 21:44:01 d2.utils.events]:  eta: 1:16:20  iter: 159  total_loss: 5.444  loss_sem_seg: 2.797  loss_center: 0.5975  loss_offset: 1.814  time: 0.4650  data_time: 0.0262  lr: 0.00039388  max_mem: 10885M
[12/10 21:44:10 d2.utils.events]:  eta: 1:16:11  iter: 179  total_loss: 4.799  loss_sem_seg: 2.825  loss_center: 0.4739  loss_offset: 1.473  time: 0.4653  data_time: 0.0281  lr: 0.0004423  max_mem: 10885M
[12/10 21:44:20 d2.utils.events]:  eta: 1:16:02  iter: 199  total_loss: 5.067  loss_sem_seg: 2.687  loss_center: 0.7453  loss_offset: 1.411  time: 0.4654  data_time: 0.0268  lr: 0.00049055  max_mem: 10885M
[12/10 21:44:29 d2.utils.events]:  eta: 1:15:54  iter: 219  total_loss: 5.179  loss_sem_seg: 2.751  loss_center: 0.7679  loss_offset: 1.579  time: 0.4654  data_time: 0.0269  lr: 0.00053861  max_mem: 10885M
[12/10 21:44:38 d2.utils.events]:  eta: 1:15:43  iter: 239  total_loss: 4.781  loss_sem_seg: 2.761  loss_center: 0.6755  loss_offset: 1.534  time: 0.4655  data_time: 0.0275  lr: 0.00058649  max_mem: 10885M
[12/10 21:44:48 d2.utils.events]:  eta: 1:15:34  iter: 259  total_loss: 4.982  loss_sem_seg: 2.738  loss_center: 0.7781  loss_offset: 1.522  time: 0.4655  data_time: 0.0268  lr: 0.0006342  max_mem: 10885M
[12/10 21:44:57 d2.utils.events]:  eta: 1:15:24  iter: 279  total_loss: 4.837  loss_sem_seg: 2.708  loss_center: 0.6627  loss_offset: 1.565  time: 0.4655  data_time: 0.0279  lr: 0.00068172  max_mem: 10885M
[12/10 21:45:06 d2.utils.events]:  eta: 1:15:15  iter: 299  total_loss: 4.512  loss_sem_seg: 2.41  loss_center: 0.685  loss_offset: 1.429  time: 0.4657  data_time: 0.0272  lr: 0.00072906  max_mem: 10885M
[12/10 21:45:16 d2.utils.events]:  eta: 1:15:06  iter: 319  total_loss: 4.498  loss_sem_seg: 2.363  loss_center: 0.6638  loss_offset: 1.34  time: 0.4656  data_time: 0.0271  lr: 0.00077622  max_mem: 10885M
[12/10 21:45:25 d2.utils.events]:  eta: 1:14:57  iter: 339  total_loss: 4.572  loss_sem_seg: 2.353  loss_center: 0.6951  loss_offset: 1.251  time: 0.4657  data_time: 0.0267  lr: 0.0008232  max_mem: 10885M
[12/10 21:45:34 d2.utils.events]:  eta: 1:14:47  iter: 359  total_loss: 4.666  loss_sem_seg: 2.57  loss_center: 0.6011  loss_offset: 1.45  time: 0.4656  data_time: 0.0266  lr: 0.00087  max_mem: 10885M
[12/10 21:45:44 d2.utils.events]:  eta: 1:14:38  iter: 379  total_loss: 4.77  loss_sem_seg: 2.597  loss_center: 0.5499  loss_offset: 1.515  time: 0.4657  data_time: 0.0280  lr: 0.00091662  max_mem: 10885M
[12/10 21:45:53 d2.utils.events]:  eta: 1:14:28  iter: 399  total_loss: 4.548  loss_sem_seg: 2.497  loss_center: 0.675  loss_offset: 1.372  time: 0.4657  data_time: 0.0270  lr: 0.00096306  max_mem: 10885M
[12/10 21:46:02 d2.utils.events]:  eta: 1:14:19  iter: 419  total_loss: 4.692  loss_sem_seg: 2.405  loss_center: 0.6679  loss_offset: 1.415  time: 0.4658  data_time: 0.0269  lr: 0.0010093  max_mem: 10885M
[12/10 21:46:12 d2.utils.events]:  eta: 1:14:10  iter: 439  total_loss: 4.463  loss_sem_seg: 2.458  loss_center: 0.6267  loss_offset: 1.322  time: 0.4659  data_time: 0.0278  lr: 0.0010554  max_mem: 10885M
[12/10 21:46:21 d2.utils.events]:  eta: 1:14:01  iter: 459  total_loss: 4.431  loss_sem_seg: 2.271  loss_center: 0.6186  loss_offset: 1.44  time: 0.4660  data_time: 0.0289  lr: 0.0011013  max_mem: 10885M
[12/10 21:46:30 d2.utils.events]:  eta: 1:13:51  iter: 479  total_loss: 4.623  loss_sem_seg: 2.361  loss_center: 0.8353  loss_offset: 1.392  time: 0.4660  data_time: 0.0270  lr: 0.001147  max_mem: 10885M
[12/10 21:46:40 d2.utils.events]:  eta: 1:13:42  iter: 499  total_loss: 4.701  loss_sem_seg: 2.537  loss_center: 0.6443  loss_offset: 1.479  time: 0.4661  data_time: 0.0275  lr: 0.0011925  max_mem: 10885M
[12/10 21:46:49 d2.utils.events]:  eta: 1:13:33  iter: 519  total_loss: 4.324  loss_sem_seg: 2.508  loss_center: 0.7303  loss_offset: 1.248  time: 0.4663  data_time: 0.0301  lr: 0.0012379  max_mem: 10885M
[12/10 21:46:58 d2.utils.events]:  eta: 1:13:23  iter: 539  total_loss: 4.606  loss_sem_seg: 2.321  loss_center: 0.8613  loss_offset: 1.271  time: 0.4663  data_time: 0.0276  lr: 0.001283  max_mem: 10885M
[12/10 21:47:08 d2.utils.events]:  eta: 1:13:16  iter: 559  total_loss: 4.17  loss_sem_seg: 2.515  loss_center: 0.557  loss_offset: 1.121  time: 0.4663  data_time: 0.0280  lr: 0.001328  max_mem: 10885M
[12/10 21:47:17 d2.utils.events]:  eta: 1:13:07  iter: 579  total_loss: 4.604  loss_sem_seg: 2.593  loss_center: 0.6904  loss_offset: 1.509  time: 0.4664  data_time: 0.0268  lr: 0.0013728  max_mem: 10885M
[12/10 21:47:27 d2.utils.events]:  eta: 1:12:58  iter: 599  total_loss: 4.721  loss_sem_seg: 2.663  loss_center: 0.6984  loss_offset: 1.521  time: 0.4664  data_time: 0.0271  lr: 0.0014175  max_mem: 10885M
[12/10 21:47:36 d2.utils.events]:  eta: 1:12:48  iter: 619  total_loss: 4.546  loss_sem_seg: 2.312  loss_center: 0.5925  loss_offset: 1.237  time: 0.4664  data_time: 0.0269  lr: 0.0014619  max_mem: 10885M
[12/10 21:47:45 d2.utils.events]:  eta: 1:12:37  iter: 639  total_loss: 4.471  loss_sem_seg: 2.33  loss_center: 0.7724  loss_offset: 1.138  time: 0.4664  data_time: 0.0277  lr: 0.0015062  max_mem: 10885M
[12/10 21:47:55 d2.utils.events]:  eta: 1:12:28  iter: 659  total_loss: 4.307  loss_sem_seg: 2.325  loss_center: 0.8095  loss_offset: 1.058  time: 0.4664  data_time: 0.0285  lr: 0.0015503  max_mem: 10885M
[12/10 21:48:04 d2.utils.events]:  eta: 1:12:19  iter: 679  total_loss: 4.526  loss_sem_seg: 2.493  loss_center: 0.6263  loss_offset: 1.362  time: 0.4664  data_time: 0.0262  lr: 0.0015942  max_mem: 10885M
[12/10 21:48:13 d2.utils.events]:  eta: 1:12:11  iter: 699  total_loss: 4.093  loss_sem_seg: 2.219  loss_center: 0.6602  loss_offset: 1.036  time: 0.4664  data_time: 0.0267  lr: 0.0016379  max_mem: 10885M
[12/10 21:48:23 d2.utils.events]:  eta: 1:12:02  iter: 719  total_loss: 4.191  loss_sem_seg: 2.566  loss_center: 0.6938  loss_offset: 1.13  time: 0.4664  data_time: 0.0275  lr: 0.0016814  max_mem: 10885M
[12/10 21:48:32 d2.utils.events]:  eta: 1:11:52  iter: 739  total_loss: 4.376  loss_sem_seg: 2.291  loss_center: 0.7263  loss_offset: 1.26  time: 0.4665  data_time: 0.0294  lr: 0.0017248  max_mem: 10885M
[12/10 21:48:41 d2.utils.events]:  eta: 1:11:41  iter: 759  total_loss: 3.951  loss_sem_seg: 2.1  loss_center: 0.766  loss_offset: 1.109  time: 0.4665  data_time: 0.0272  lr: 0.0017679  max_mem: 10885M
[12/10 21:48:51 d2.utils.events]:  eta: 1:11:32  iter: 779  total_loss: 4.764  loss_sem_seg: 2.628  loss_center: 0.7404  loss_offset: 1.147  time: 0.4666  data_time: 0.0265  lr: 0.0018109  max_mem: 10885M
[12/10 21:49:00 d2.utils.events]:  eta: 1:11:22  iter: 799  total_loss: 4.17  loss_sem_seg: 2.306  loss_center: 0.7285  loss_offset: 1.05  time: 0.4666  data_time: 0.0282  lr: 0.0018537  max_mem: 10885M
[12/10 21:49:09 d2.utils.events]:  eta: 1:11:15  iter: 819  total_loss: 4.22  loss_sem_seg: 2.326  loss_center: 0.8474  loss_offset: 1.079  time: 0.4667  data_time: 0.0302  lr: 0.0018964  max_mem: 10885M
[12/10 21:49:19 d2.utils.events]:  eta: 1:11:06  iter: 839  total_loss: 4.303  loss_sem_seg: 2.497  loss_center: 0.6591  loss_offset: 1.16  time: 0.4667  data_time: 0.0277  lr: 0.0019388  max_mem: 10885M
[12/10 21:49:28 d2.utils.events]:  eta: 1:10:55  iter: 859  total_loss: 4.276  loss_sem_seg: 2.2  loss_center: 0.5407  loss_offset: 1.184  time: 0.4666  data_time: 0.0258  lr: 0.0019811  max_mem: 10885M
[12/10 21:49:37 d2.utils.events]:  eta: 1:10:47  iter: 879  total_loss: 4.451  loss_sem_seg: 2.386  loss_center: 0.9029  loss_offset: 1.178  time: 0.4666  data_time: 0.0272  lr: 0.0020231  max_mem: 10885M
[12/10 21:49:47 d2.utils.events]:  eta: 1:10:39  iter: 899  total_loss: 4.443  loss_sem_seg: 2.644  loss_center: 0.6163  loss_offset: 1.115  time: 0.4666  data_time: 0.0280  lr: 0.002065  max_mem: 10885M
[12/10 21:49:56 d2.utils.events]:  eta: 1:10:30  iter: 919  total_loss: 4.243  loss_sem_seg: 2.318  loss_center: 0.6515  loss_offset: 1.053  time: 0.4667  data_time: 0.0289  lr: 0.0021068  max_mem: 10885M
[12/10 21:50:06 d2.utils.events]:  eta: 1:10:21  iter: 939  total_loss: 4.166  loss_sem_seg: 2.314  loss_center: 0.7139  loss_offset: 1.061  time: 0.4667  data_time: 0.0275  lr: 0.0021483  max_mem: 10885M
[12/10 21:50:15 d2.utils.events]:  eta: 1:10:11  iter: 959  total_loss: 4.236  loss_sem_seg: 2.304  loss_center: 0.6208  loss_offset: 1.056  time: 0.4666  data_time: 0.0261  lr: 0.0021896  max_mem: 10885M
[12/10 21:50:24 d2.utils.events]:  eta: 1:10:02  iter: 979  total_loss: 4.27  loss_sem_seg: 2.389  loss_center: 0.6588  loss_offset: 1.128  time: 0.4666  data_time: 0.0280  lr: 0.0022308  max_mem: 10885M
[12/10 21:50:34 d2.utils.events]:  eta: 1:09:53  iter: 999  total_loss: 4.207  loss_sem_seg: 2.352  loss_center: 0.8475  loss_offset: 1.164  time: 0.4668  data_time: 0.0292  lr: 0.0022718  max_mem: 10885M
[12/10 21:50:43 d2.utils.events]:  eta: 1:09:44  iter: 1019  total_loss: 3.917  loss_sem_seg: 2.127  loss_center: 0.8144  loss_offset: 0.9577  time: 0.4668  data_time: 0.0282  lr: 0.0022695  max_mem: 10885M
[12/10 21:50:52 d2.utils.events]:  eta: 1:09:35  iter: 1039  total_loss: 4.085  loss_sem_seg: 2.18  loss_center: 0.6534  loss_offset: 1.171  time: 0.4668  data_time: 0.0268  lr: 0.002265  max_mem: 10885M
[12/10 21:51:02 d2.utils.events]:  eta: 1:09:26  iter: 1059  total_loss: 4.008  loss_sem_seg: 2.187  loss_center: 0.6696  loss_offset: 1.001  time: 0.4668  data_time: 0.0284  lr: 0.0022604  max_mem: 10885M
[12/10 21:51:11 d2.utils.events]:  eta: 1:09:18  iter: 1079  total_loss: 4.239  loss_sem_seg: 2.339  loss_center: 0.798  loss_offset: 1.07  time: 0.4668  data_time: 0.0277  lr: 0.0022559  max_mem: 10885M
[12/10 21:51:20 d2.utils.events]:  eta: 1:09:08  iter: 1099  total_loss: 4.103  loss_sem_seg: 2.235  loss_center: 0.5825  loss_offset: 1.047  time: 0.4668  data_time: 0.0269  lr: 0.0022513  max_mem: 10885M
[12/10 21:51:30 d2.utils.events]:  eta: 1:08:59  iter: 1119  total_loss: 3.937  loss_sem_seg: 2.24  loss_center: 0.6935  loss_offset: 1.052  time: 0.4669  data_time: 0.0288  lr: 0.0022468  max_mem: 10885M
[12/10 21:51:39 d2.utils.events]:  eta: 1:08:50  iter: 1139  total_loss: 4.147  loss_sem_seg: 2.242  loss_center: 0.6342  loss_offset: 1.13  time: 0.4669  data_time: 0.0282  lr: 0.0022422  max_mem: 10885M
[12/10 21:51:49 d2.utils.events]:  eta: 1:08:41  iter: 1159  total_loss: 4.367  loss_sem_seg: 2.487  loss_center: 0.6994  loss_offset: 1.089  time: 0.4669  data_time: 0.0280  lr: 0.0022376  max_mem: 10885M
[12/10 21:51:58 d2.utils.events]:  eta: 1:08:31  iter: 1179  total_loss: 3.964  loss_sem_seg: 2.142  loss_center: 0.7868  loss_offset: 1.064  time: 0.4669  data_time: 0.0263  lr: 0.0022331  max_mem: 10885M
[12/10 21:52:07 d2.utils.events]:  eta: 1:08:22  iter: 1199  total_loss: 3.791  loss_sem_seg: 2.101  loss_center: 0.7398  loss_offset: 0.9807  time: 0.4669  data_time: 0.0275  lr: 0.0022285  max_mem: 10885M
[12/10 21:52:17 d2.utils.events]:  eta: 1:08:12  iter: 1219  total_loss: 4.042  loss_sem_seg: 2.277  loss_center: 0.6569  loss_offset: 1.111  time: 0.4669  data_time: 0.0254  lr: 0.002224  max_mem: 10885M
[12/10 21:52:26 d2.utils.events]:  eta: 1:08:03  iter: 1239  total_loss: 4.103  loss_sem_seg: 2.241  loss_center: 0.7334  loss_offset: 1.161  time: 0.4669  data_time: 0.0280  lr: 0.0022194  max_mem: 10885M
[12/10 21:52:35 d2.utils.events]:  eta: 1:07:54  iter: 1259  total_loss: 4.107  loss_sem_seg: 2.258  loss_center: 0.756  loss_offset: 1.065  time: 0.4669  data_time: 0.0293  lr: 0.0022149  max_mem: 10885M
[12/10 21:52:45 d2.utils.events]:  eta: 1:07:45  iter: 1279  total_loss: 3.767  loss_sem_seg: 2.256  loss_center: 0.6408  loss_offset: 0.9965  time: 0.4669  data_time: 0.0276  lr: 0.0022103  max_mem: 10885M
[12/10 21:52:54 d2.utils.events]:  eta: 1:07:36  iter: 1299  total_loss: 3.584  loss_sem_seg: 1.956  loss_center: 0.7098  loss_offset: 0.9548  time: 0.4670  data_time: 0.0267  lr: 0.0022057  max_mem: 10885M
[12/10 21:53:03 d2.utils.events]:  eta: 1:07:27  iter: 1319  total_loss: 4.019  loss_sem_seg: 2.304  loss_center: 0.6747  loss_offset: 1.025  time: 0.4669  data_time: 0.0250  lr: 0.0022012  max_mem: 10885M
[12/10 21:53:13 d2.utils.events]:  eta: 1:07:17  iter: 1339  total_loss: 3.839  loss_sem_seg: 2.108  loss_center: 0.7919  loss_offset: 0.9769  time: 0.4669  data_time: 0.0278  lr: 0.0021966  max_mem: 10885M
[12/10 21:53:22 d2.utils.events]:  eta: 1:07:08  iter: 1359  total_loss: 4.033  loss_sem_seg: 2.1  loss_center: 0.7512  loss_offset: 1.097  time: 0.4669  data_time: 0.0279  lr: 0.002192  max_mem: 10885M
[12/10 21:53:31 d2.utils.events]:  eta: 1:06:59  iter: 1379  total_loss: 4.218  loss_sem_seg: 2.192  loss_center: 0.6879  loss_offset: 1.134  time: 0.4669  data_time: 0.0276  lr: 0.0021875  max_mem: 10885M
[12/10 21:53:41 d2.utils.events]:  eta: 1:06:50  iter: 1399  total_loss: 3.484  loss_sem_seg: 1.893  loss_center: 0.6907  loss_offset: 1.015  time: 0.4669  data_time: 0.0281  lr: 0.0021829  max_mem: 10885M
[12/10 21:53:50 d2.utils.events]:  eta: 1:06:39  iter: 1419  total_loss: 3.834  loss_sem_seg: 2.088  loss_center: 0.5945  loss_offset: 1.014  time: 0.4668  data_time: 0.0263  lr: 0.0021783  max_mem: 10885M
[12/10 21:53:59 d2.utils.events]:  eta: 1:06:31  iter: 1439  total_loss: 3.969  loss_sem_seg: 2.293  loss_center: 0.7206  loss_offset: 1.012  time: 0.4669  data_time: 0.0299  lr: 0.0021738  max_mem: 10885M
[12/10 21:54:09 d2.utils.events]:  eta: 1:06:22  iter: 1459  total_loss: 3.897  loss_sem_seg: 2.153  loss_center: 0.6946  loss_offset: 1.036  time: 0.4669  data_time: 0.0273  lr: 0.0021692  max_mem: 10885M
[12/10 21:54:18 d2.utils.events]:  eta: 1:06:13  iter: 1479  total_loss: 3.907  loss_sem_seg: 2.157  loss_center: 0.685  loss_offset: 1.091  time: 0.4669  data_time: 0.0262  lr: 0.0021646  max_mem: 10885M
[12/10 21:54:27 d2.utils.events]:  eta: 1:06:03  iter: 1499  total_loss: 4.445  loss_sem_seg: 2.603  loss_center: 0.8805  loss_offset: 1.111  time: 0.4669  data_time: 0.0283  lr: 0.00216  max_mem: 10885M
[12/10 21:54:37 d2.utils.events]:  eta: 1:05:54  iter: 1519  total_loss: 3.972  loss_sem_seg: 2.159  loss_center: 0.5513  loss_offset: 1.132  time: 0.4669  data_time: 0.0266  lr: 0.0021555  max_mem: 10885M
[12/10 21:54:46 d2.utils.events]:  eta: 1:05:44  iter: 1539  total_loss: 4.133  loss_sem_seg: 2.148  loss_center: 0.7368  loss_offset: 1.062  time: 0.4669  data_time: 0.0277  lr: 0.0021509  max_mem: 10885M
[12/10 21:54:56 d2.utils.events]:  eta: 1:05:34  iter: 1559  total_loss: 3.93  loss_sem_seg: 2.033  loss_center: 0.5679  loss_offset: 1.128  time: 0.4669  data_time: 0.0255  lr: 0.0021463  max_mem: 10885M
[12/10 21:55:05 d2.utils.events]:  eta: 1:05:25  iter: 1579  total_loss: 4.077  loss_sem_seg: 2.061  loss_center: 0.7133  loss_offset: 1.049  time: 0.4669  data_time: 0.0278  lr: 0.0021417  max_mem: 10885M
[12/10 21:55:14 d2.utils.events]:  eta: 1:05:16  iter: 1599  total_loss: 3.946  loss_sem_seg: 2.226  loss_center: 0.6928  loss_offset: 1.018  time: 0.4669  data_time: 0.0267  lr: 0.0021372  max_mem: 10885M
[12/10 21:55:24 d2.utils.events]:  eta: 1:05:07  iter: 1619  total_loss: 3.614  loss_sem_seg: 1.954  loss_center: 0.5481  loss_offset: 1.075  time: 0.4669  data_time: 0.0264  lr: 0.0021326  max_mem: 10885M
[12/10 21:55:33 d2.utils.events]:  eta: 1:04:58  iter: 1639  total_loss: 3.789  loss_sem_seg: 1.991  loss_center: 0.8081  loss_offset: 0.9777  time: 0.4669  data_time: 0.0274  lr: 0.002128  max_mem: 10885M
[12/10 21:55:42 d2.utils.events]:  eta: 1:04:49  iter: 1659  total_loss: 3.997  loss_sem_seg: 2.252  loss_center: 0.7343  loss_offset: 0.959  time: 0.4669  data_time: 0.0263  lr: 0.0021234  max_mem: 10885M
[12/10 21:55:52 d2.utils.events]:  eta: 1:04:40  iter: 1679  total_loss: 3.997  loss_sem_seg: 2.203  loss_center: 0.6247  loss_offset: 0.988  time: 0.4669  data_time: 0.0280  lr: 0.0021188  max_mem: 10885M
[12/10 21:56:01 d2.utils.events]:  eta: 1:04:30  iter: 1699  total_loss: 4.024  loss_sem_seg: 2.181  loss_center: 0.8075  loss_offset: 1.077  time: 0.4669  data_time: 0.0274  lr: 0.0021143  max_mem: 10885M
[12/10 21:56:10 d2.utils.events]:  eta: 1:04:20  iter: 1719  total_loss: 4.233  loss_sem_seg: 2.397  loss_center: 0.6988  loss_offset: 1.177  time: 0.4669  data_time: 0.0271  lr: 0.0021097  max_mem: 10885M
[12/10 21:56:20 d2.utils.events]:  eta: 1:04:11  iter: 1739  total_loss: 3.932  loss_sem_seg: 2.152  loss_center: 0.6656  loss_offset: 1.018  time: 0.4669  data_time: 0.0266  lr: 0.0021051  max_mem: 10885M
[12/10 21:56:29 d2.utils.events]:  eta: 1:04:02  iter: 1759  total_loss: 3.871  loss_sem_seg: 1.934  loss_center: 0.6948  loss_offset: 1.09  time: 0.4668  data_time: 0.0258  lr: 0.0021005  max_mem: 10885M
[12/10 21:56:38 d2.utils.events]:  eta: 1:03:52  iter: 1779  total_loss: 3.974  loss_sem_seg: 2.137  loss_center: 0.5765  loss_offset: 1.102  time: 0.4668  data_time: 0.0272  lr: 0.0020959  max_mem: 10885M
[12/10 21:56:48 d2.utils.events]:  eta: 1:03:42  iter: 1799  total_loss: 3.894  loss_sem_seg: 2.016  loss_center: 0.7044  loss_offset: 1.016  time: 0.4668  data_time: 0.0277  lr: 0.0020913  max_mem: 10885M
[12/10 21:56:57 d2.utils.events]:  eta: 1:03:33  iter: 1819  total_loss: 3.951  loss_sem_seg: 2.147  loss_center: 0.7351  loss_offset: 1.029  time: 0.4668  data_time: 0.0266  lr: 0.0020867  max_mem: 10885M
[12/10 21:57:06 d2.utils.events]:  eta: 1:03:22  iter: 1839  total_loss: 4.174  loss_sem_seg: 2.415  loss_center: 0.8118  loss_offset: 1.045  time: 0.4668  data_time: 0.0269  lr: 0.0020821  max_mem: 10885M
[12/10 21:57:16 d2.utils.events]:  eta: 1:03:14  iter: 1859  total_loss: 3.904  loss_sem_seg: 2.123  loss_center: 0.6132  loss_offset: 1.067  time: 0.4668  data_time: 0.0270  lr: 0.0020775  max_mem: 10885M
[12/10 21:57:25 d2.utils.events]:  eta: 1:03:03  iter: 1879  total_loss: 3.762  loss_sem_seg: 2.181  loss_center: 0.6519  loss_offset: 1.057  time: 0.4668  data_time: 0.0252  lr: 0.0020729  max_mem: 10885M
[12/10 21:57:34 d2.utils.events]:  eta: 1:02:54  iter: 1899  total_loss: 3.451  loss_sem_seg: 1.91  loss_center: 0.5392  loss_offset: 0.8983  time: 0.4667  data_time: 0.0280  lr: 0.0020684  max_mem: 10885M
[12/10 21:57:44 d2.utils.events]:  eta: 1:02:44  iter: 1919  total_loss: 3.756  loss_sem_seg: 1.898  loss_center: 0.6287  loss_offset: 0.9638  time: 0.4668  data_time: 0.0283  lr: 0.0020638  max_mem: 10885M
[12/10 21:57:53 d2.utils.events]:  eta: 1:02:34  iter: 1939  total_loss: 3.876  loss_sem_seg: 2.062  loss_center: 0.6516  loss_offset: 1.032  time: 0.4668  data_time: 0.0276  lr: 0.0020592  max_mem: 10885M
[12/10 21:58:02 d2.utils.events]:  eta: 1:02:25  iter: 1959  total_loss: 4.052  loss_sem_seg: 2.088  loss_center: 0.7085  loss_offset: 1.054  time: 0.4668  data_time: 0.0283  lr: 0.0020546  max_mem: 10885M
[12/10 21:58:12 d2.utils.events]:  eta: 1:02:15  iter: 1979  total_loss: 4.251  loss_sem_seg: 2.298  loss_center: 0.8375  loss_offset: 1.046  time: 0.4668  data_time: 0.0285  lr: 0.00205  max_mem: 10885M
[12/10 21:58:21 d2.utils.events]:  eta: 1:02:06  iter: 1999  total_loss: 3.843  loss_sem_seg: 2.202  loss_center: 0.6398  loss_offset: 0.9724  time: 0.4668  data_time: 0.0267  lr: 0.0020454  max_mem: 10885M
[12/10 21:58:30 d2.utils.events]:  eta: 1:01:56  iter: 2019  total_loss: 3.739  loss_sem_seg: 1.872  loss_center: 0.663  loss_offset: 1.016  time: 0.4668  data_time: 0.0268  lr: 0.0020408  max_mem: 10885M
[12/10 21:58:40 d2.utils.events]:  eta: 1:01:46  iter: 2039  total_loss: 3.944  loss_sem_seg: 2.151  loss_center: 0.6636  loss_offset: 1.091  time: 0.4668  data_time: 0.0286  lr: 0.0020362  max_mem: 10885M
[12/10 21:58:49 d2.utils.events]:  eta: 1:01:36  iter: 2059  total_loss: 3.653  loss_sem_seg: 1.973  loss_center: 0.7163  loss_offset: 0.9318  time: 0.4668  data_time: 0.0261  lr: 0.0020316  max_mem: 10885M
[12/10 21:58:58 d2.utils.events]:  eta: 1:01:27  iter: 2079  total_loss: 3.98  loss_sem_seg: 2.239  loss_center: 0.741  loss_offset: 0.988  time: 0.4668  data_time: 0.0285  lr: 0.0020269  max_mem: 10885M
[12/10 21:59:08 d2.utils.events]:  eta: 1:01:18  iter: 2099  total_loss: 3.604  loss_sem_seg: 1.973  loss_center: 0.671  loss_offset: 0.9514  time: 0.4668  data_time: 0.0275  lr: 0.0020223  max_mem: 10885M
[12/10 21:59:17 d2.utils.events]:  eta: 1:01:08  iter: 2119  total_loss: 3.757  loss_sem_seg: 2.077  loss_center: 0.7693  loss_offset: 1.013  time: 0.4669  data_time: 0.0287  lr: 0.0020177  max_mem: 10885M
[12/10 21:59:26 d2.utils.events]:  eta: 1:00:59  iter: 2139  total_loss: 3.819  loss_sem_seg: 2.012  loss_center: 0.7421  loss_offset: 0.9093  time: 0.4668  data_time: 0.0259  lr: 0.0020131  max_mem: 10885M
[12/10 21:59:36 d2.utils.events]:  eta: 1:00:49  iter: 2159  total_loss: 3.504  loss_sem_seg: 1.766  loss_center: 0.6941  loss_offset: 0.9749  time: 0.4668  data_time: 0.0274  lr: 0.0020085  max_mem: 10885M
[12/10 21:59:45 d2.utils.events]:  eta: 1:00:40  iter: 2179  total_loss: 3.567  loss_sem_seg: 1.971  loss_center: 0.6221  loss_offset: 0.8999  time: 0.4668  data_time: 0.0272  lr: 0.0020039  max_mem: 10885M
[12/10 21:59:54 d2.utils.events]:  eta: 1:00:30  iter: 2199  total_loss: 3.812  loss_sem_seg: 1.974  loss_center: 0.7504  loss_offset: 1.033  time: 0.4668  data_time: 0.0266  lr: 0.0019993  max_mem: 10885M
[12/10 22:00:04 d2.utils.events]:  eta: 1:00:21  iter: 2219  total_loss: 3.905  loss_sem_seg: 2.019  loss_center: 0.6343  loss_offset: 1.065  time: 0.4668  data_time: 0.0271  lr: 0.0019947  max_mem: 10885M
[12/10 22:00:13 d2.utils.events]:  eta: 1:00:12  iter: 2239  total_loss: 4.012  loss_sem_seg: 1.885  loss_center: 0.8334  loss_offset: 1.043  time: 0.4668  data_time: 0.0265  lr: 0.0019901  max_mem: 10885M
[12/10 22:00:23 d2.utils.events]:  eta: 1:00:01  iter: 2259  total_loss: 3.691  loss_sem_seg: 1.985  loss_center: 0.6707  loss_offset: 1.058  time: 0.4668  data_time: 0.0291  lr: 0.0019854  max_mem: 10885M
[12/10 22:00:32 d2.utils.events]:  eta: 0:59:52  iter: 2279  total_loss: 3.631  loss_sem_seg: 2.081  loss_center: 0.5256  loss_offset: 0.9891  time: 0.4668  data_time: 0.0275  lr: 0.0019808  max_mem: 10885M
[12/10 22:00:41 d2.utils.events]:  eta: 0:59:41  iter: 2299  total_loss: 3.519  loss_sem_seg: 1.842  loss_center: 0.6638  loss_offset: 0.9505  time: 0.4668  data_time: 0.0263  lr: 0.0019762  max_mem: 10885M
[12/10 22:00:51 d2.utils.events]:  eta: 0:59:31  iter: 2319  total_loss: 3.913  loss_sem_seg: 2.12  loss_center: 0.7453  loss_offset: 0.9495  time: 0.4668  data_time: 0.0279  lr: 0.0019716  max_mem: 10885M
[12/10 22:01:00 d2.utils.events]:  eta: 0:59:22  iter: 2339  total_loss: 3.527  loss_sem_seg: 1.893  loss_center: 0.5458  loss_offset: 1.028  time: 0.4668  data_time: 0.0290  lr: 0.001967  max_mem: 10885M
[12/10 22:01:09 d2.utils.events]:  eta: 0:59:12  iter: 2359  total_loss: 3.788  loss_sem_seg: 1.774  loss_center: 0.6181  loss_offset: 0.9999  time: 0.4668  data_time: 0.0268  lr: 0.0019623  max_mem: 10885M
[12/10 22:01:19 d2.utils.events]:  eta: 0:59:03  iter: 2379  total_loss: 3.885  loss_sem_seg: 2.239  loss_center: 0.6904  loss_offset: 0.9576  time: 0.4668  data_time: 0.0278  lr: 0.0019577  max_mem: 10885M
[12/10 22:01:28 d2.utils.events]:  eta: 0:58:54  iter: 2399  total_loss: 3.801  loss_sem_seg: 1.823  loss_center: 0.6496  loss_offset: 0.9775  time: 0.4668  data_time: 0.0287  lr: 0.0019531  max_mem: 10885M
[12/10 22:01:37 d2.utils.events]:  eta: 0:58:47  iter: 2419  total_loss: 3.631  loss_sem_seg: 1.926  loss_center: 0.8181  loss_offset: 0.9404  time: 0.4668  data_time: 0.0267  lr: 0.0019485  max_mem: 10885M
[12/10 22:01:47 d2.utils.events]:  eta: 0:58:35  iter: 2439  total_loss: 3.745  loss_sem_seg: 2.122  loss_center: 0.6754  loss_offset: 1.055  time: 0.4668  data_time: 0.0264  lr: 0.0019438  max_mem: 10885M
[12/10 22:01:56 d2.utils.events]:  eta: 0:58:26  iter: 2459  total_loss: 3.531  loss_sem_seg: 1.833  loss_center: 0.6424  loss_offset: 0.9113  time: 0.4668  data_time: 0.0284  lr: 0.0019392  max_mem: 10885M
[12/10 22:02:05 d2.utils.events]:  eta: 0:58:17  iter: 2479  total_loss: 3.626  loss_sem_seg: 1.89  loss_center: 0.6501  loss_offset: 0.9529  time: 0.4668  data_time: 0.0265  lr: 0.0019346  max_mem: 10885M
[12/10 22:02:15 d2.utils.events]:  eta: 0:58:07  iter: 2499  total_loss: 3.502  loss_sem_seg: 1.869  loss_center: 0.7207  loss_offset: 0.908  time: 0.4668  data_time: 0.0266  lr: 0.00193  max_mem: 10885M
[12/10 22:02:24 d2.utils.events]:  eta: 0:57:58  iter: 2519  total_loss: 3.469  loss_sem_seg: 1.845  loss_center: 0.695  loss_offset: 0.8187  time: 0.4668  data_time: 0.0277  lr: 0.0019253  max_mem: 10885M
[12/10 22:02:33 d2.utils.events]:  eta: 0:57:49  iter: 2539  total_loss: 3.76  loss_sem_seg: 2.001  loss_center: 0.711  loss_offset: 1.069  time: 0.4668  data_time: 0.0276  lr: 0.0019207  max_mem: 10885M
[12/10 22:02:43 d2.utils.events]:  eta: 0:57:39  iter: 2559  total_loss: 3.575  loss_sem_seg: 2.078  loss_center: 0.6427  loss_offset: 0.9045  time: 0.4668  data_time: 0.0298  lr: 0.0019161  max_mem: 10885M
[12/10 22:02:52 d2.utils.events]:  eta: 0:57:29  iter: 2579  total_loss: 3.559  loss_sem_seg: 1.936  loss_center: 0.6771  loss_offset: 1.059  time: 0.4668  data_time: 0.0255  lr: 0.0019114  max_mem: 10885M
[12/10 22:03:01 d2.utils.events]:  eta: 0:57:21  iter: 2599  total_loss: 3.49  loss_sem_seg: 1.921  loss_center: 0.6526  loss_offset: 0.9656  time: 0.4668  data_time: 0.0292  lr: 0.0019068  max_mem: 10885M
[12/10 22:03:11 d2.utils.events]:  eta: 0:57:12  iter: 2619  total_loss: 3.274  loss_sem_seg: 1.797  loss_center: 0.6416  loss_offset: 0.9036  time: 0.4668  data_time: 0.0283  lr: 0.0019021  max_mem: 10885M
[12/10 22:03:20 d2.utils.events]:  eta: 0:57:02  iter: 2639  total_loss: 3.603  loss_sem_seg: 1.832  loss_center: 0.8571  loss_offset: 0.9259  time: 0.4668  data_time: 0.0271  lr: 0.0018975  max_mem: 10885M
[12/10 22:03:29 d2.utils.events]:  eta: 0:56:53  iter: 2659  total_loss: 3.584  loss_sem_seg: 1.799  loss_center: 0.6146  loss_offset: 1.065  time: 0.4668  data_time: 0.0257  lr: 0.0018929  max_mem: 10885M
[12/10 22:03:39 d2.utils.events]:  eta: 0:56:44  iter: 2679  total_loss: 3.604  loss_sem_seg: 1.963  loss_center: 0.6566  loss_offset: 0.9602  time: 0.4668  data_time: 0.0278  lr: 0.0018882  max_mem: 10885M
[12/10 22:03:48 d2.utils.events]:  eta: 0:56:36  iter: 2699  total_loss: 3.892  loss_sem_seg: 1.992  loss_center: 0.6385  loss_offset: 0.9839  time: 0.4668  data_time: 0.0296  lr: 0.0018836  max_mem: 10885M
[12/10 22:03:57 d2.utils.events]:  eta: 0:56:26  iter: 2719  total_loss: 3.44  loss_sem_seg: 1.821  loss_center: 0.5821  loss_offset: 0.9248  time: 0.4668  data_time: 0.0268  lr: 0.0018789  max_mem: 10885M
[12/10 22:04:07 d2.utils.events]:  eta: 0:56:17  iter: 2739  total_loss: 3.617  loss_sem_seg: 1.907  loss_center: 0.5406  loss_offset: 0.8617  time: 0.4668  data_time: 0.0264  lr: 0.0018743  max_mem: 10885M
[12/10 22:04:16 d2.utils.events]:  eta: 0:56:08  iter: 2759  total_loss: 3.164  loss_sem_seg: 1.574  loss_center: 0.6369  loss_offset: 0.8418  time: 0.4668  data_time: 0.0277  lr: 0.0018696  max_mem: 10885M
[12/10 22:04:25 d2.utils.events]:  eta: 0:55:58  iter: 2779  total_loss: 3.275  loss_sem_seg: 1.666  loss_center: 0.589  loss_offset: 0.871  time: 0.4668  data_time: 0.0249  lr: 0.001865  max_mem: 10885M
[12/10 22:04:35 d2.utils.events]:  eta: 0:55:49  iter: 2799  total_loss: 3.653  loss_sem_seg: 1.831  loss_center: 0.7524  loss_offset: 0.9073  time: 0.4667  data_time: 0.0262  lr: 0.0018603  max_mem: 10885M
[12/10 22:04:44 d2.utils.events]:  eta: 0:55:39  iter: 2819  total_loss: 3.657  loss_sem_seg: 1.965  loss_center: 0.7381  loss_offset: 0.9504  time: 0.4667  data_time: 0.0268  lr: 0.0018557  max_mem: 10885M
[12/10 22:04:53 d2.utils.events]:  eta: 0:55:31  iter: 2839  total_loss: 3.813  loss_sem_seg: 2.127  loss_center: 0.6173  loss_offset: 1.009  time: 0.4667  data_time: 0.0285  lr: 0.001851  max_mem: 10885M
[12/10 22:05:03 d2.utils.events]:  eta: 0:55:20  iter: 2859  total_loss: 3.852  loss_sem_seg: 2.178  loss_center: 0.7807  loss_offset: 1.002  time: 0.4667  data_time: 0.0261  lr: 0.0018464  max_mem: 10885M
[12/10 22:05:12 d2.utils.events]:  eta: 0:55:11  iter: 2879  total_loss: 3.371  loss_sem_seg: 1.958  loss_center: 0.5903  loss_offset: 0.9406  time: 0.4667  data_time: 0.0275  lr: 0.0018417  max_mem: 10885M
[12/10 22:05:21 d2.utils.events]:  eta: 0:55:02  iter: 2899  total_loss: 3.588  loss_sem_seg: 1.84  loss_center: 0.645  loss_offset: 0.9819  time: 0.4667  data_time: 0.0290  lr: 0.0018371  max_mem: 10885M
[12/10 22:05:31 d2.utils.events]:  eta: 0:54:53  iter: 2919  total_loss: 3.556  loss_sem_seg: 1.906  loss_center: 0.712  loss_offset: 0.9693  time: 0.4667  data_time: 0.0276  lr: 0.0018324  max_mem: 10885M
[12/10 22:05:40 d2.utils.events]:  eta: 0:54:43  iter: 2939  total_loss: 3.657  loss_sem_seg: 1.956  loss_center: 0.5524  loss_offset: 1.035  time: 0.4667  data_time: 0.0266  lr: 0.0018278  max_mem: 10885M
[12/10 22:05:49 d2.utils.events]:  eta: 0:54:34  iter: 2959  total_loss: 3.569  loss_sem_seg: 1.92  loss_center: 0.5817  loss_offset: 0.8828  time: 0.4667  data_time: 0.0280  lr: 0.0018231  max_mem: 10885M
[12/10 22:05:59 d2.utils.events]:  eta: 0:54:25  iter: 2979  total_loss: 3.611  loss_sem_seg: 1.903  loss_center: 0.6397  loss_offset: 1.075  time: 0.4667  data_time: 0.0259  lr: 0.0018184  max_mem: 10885M
[12/10 22:06:08 d2.utils.events]:  eta: 0:54:15  iter: 2999  total_loss: 3.506  loss_sem_seg: 1.866  loss_center: 0.5794  loss_offset: 0.9361  time: 0.4667  data_time: 0.0285  lr: 0.0018138  max_mem: 10885M
[12/10 22:06:17 d2.utils.events]:  eta: 0:54:06  iter: 3019  total_loss: 3.953  loss_sem_seg: 2.145  loss_center: 0.617  loss_offset: 1.011  time: 0.4667  data_time: 0.0273  lr: 0.0018091  max_mem: 10885M
[12/10 22:06:27 d2.utils.events]:  eta: 0:53:57  iter: 3039  total_loss: 3.525  loss_sem_seg: 1.848  loss_center: 0.637  loss_offset: 0.9845  time: 0.4667  data_time: 0.0284  lr: 0.0018044  max_mem: 10885M
[12/10 22:06:36 d2.utils.events]:  eta: 0:53:48  iter: 3059  total_loss: 3.711  loss_sem_seg: 2.067  loss_center: 0.6053  loss_offset: 0.9192  time: 0.4667  data_time: 0.0282  lr: 0.0017998  max_mem: 10885M
[12/10 22:06:45 d2.utils.events]:  eta: 0:53:38  iter: 3079  total_loss: 3.769  loss_sem_seg: 1.952  loss_center: 0.7344  loss_offset: 0.9708  time: 0.4667  data_time: 0.0259  lr: 0.0017951  max_mem: 10885M
[12/10 22:06:55 d2.utils.events]:  eta: 0:53:28  iter: 3099  total_loss: 3.37  loss_sem_seg: 1.699  loss_center: 0.6053  loss_offset: 0.8729  time: 0.4667  data_time: 0.0269  lr: 0.0017904  max_mem: 10885M
[12/10 22:07:04 d2.utils.events]:  eta: 0:53:18  iter: 3119  total_loss: 3.412  loss_sem_seg: 1.75  loss_center: 0.7581  loss_offset: 0.9534  time: 0.4667  data_time: 0.0272  lr: 0.0017858  max_mem: 10885M
[12/10 22:07:13 d2.utils.events]:  eta: 0:53:09  iter: 3139  total_loss: 3.827  loss_sem_seg: 2.037  loss_center: 0.5683  loss_offset: 0.9296  time: 0.4667  data_time: 0.0282  lr: 0.0017811  max_mem: 10885M
[12/10 22:07:23 d2.utils.events]:  eta: 0:52:59  iter: 3159  total_loss: 3.478  loss_sem_seg: 1.758  loss_center: 0.5481  loss_offset: 0.9503  time: 0.4667  data_time: 0.0257  lr: 0.0017764  max_mem: 10885M
[12/10 22:07:32 d2.utils.events]:  eta: 0:52:50  iter: 3179  total_loss: 3.577  loss_sem_seg: 1.939  loss_center: 0.8802  loss_offset: 0.9143  time: 0.4667  data_time: 0.0281  lr: 0.0017718  max_mem: 10885M
[12/10 22:07:41 d2.utils.events]:  eta: 0:52:40  iter: 3199  total_loss: 3.401  loss_sem_seg: 1.753  loss_center: 0.6434  loss_offset: 0.8045  time: 0.4666  data_time: 0.0260  lr: 0.0017671  max_mem: 10885M
[12/10 22:07:50 d2.utils.events]:  eta: 0:52:30  iter: 3219  total_loss: 3.2  loss_sem_seg: 1.905  loss_center: 0.5174  loss_offset: 0.8336  time: 0.4666  data_time: 0.0262  lr: 0.0017624  max_mem: 10885M
[12/10 22:08:00 d2.utils.events]:  eta: 0:52:21  iter: 3239  total_loss: 3.695  loss_sem_seg: 2.096  loss_center: 0.716  loss_offset: 0.8808  time: 0.4666  data_time: 0.0262  lr: 0.0017577  max_mem: 10885M
[12/10 22:08:09 d2.utils.events]:  eta: 0:52:11  iter: 3259  total_loss: 3.431  loss_sem_seg: 1.711  loss_center: 0.6624  loss_offset: 0.987  time: 0.4666  data_time: 0.0269  lr: 0.001753  max_mem: 10885M
[12/10 22:08:18 d2.utils.events]:  eta: 0:52:02  iter: 3279  total_loss: 3.673  loss_sem_seg: 1.953  loss_center: 0.7471  loss_offset: 0.91  time: 0.4666  data_time: 0.0259  lr: 0.0017484  max_mem: 10885M
[12/10 22:08:28 d2.utils.events]:  eta: 0:51:53  iter: 3299  total_loss: 3.276  loss_sem_seg: 1.795  loss_center: 0.7167  loss_offset: 0.8611  time: 0.4665  data_time: 0.0275  lr: 0.0017437  max_mem: 10885M
[12/10 22:08:37 d2.utils.events]:  eta: 0:51:44  iter: 3319  total_loss: 3.894  loss_sem_seg: 1.894  loss_center: 0.6053  loss_offset: 0.9363  time: 0.4665  data_time: 0.0273  lr: 0.001739  max_mem: 10885M
[12/10 22:08:46 d2.utils.events]:  eta: 0:51:34  iter: 3339  total_loss: 3.481  loss_sem_seg: 1.98  loss_center: 0.5929  loss_offset: 0.9566  time: 0.4665  data_time: 0.0263  lr: 0.0017343  max_mem: 10885M
[12/10 22:08:56 d2.utils.events]:  eta: 0:51:26  iter: 3359  total_loss: 3.512  loss_sem_seg: 1.748  loss_center: 0.7913  loss_offset: 0.9464  time: 0.4665  data_time: 0.0268  lr: 0.0017296  max_mem: 10885M
[12/10 22:09:05 d2.utils.events]:  eta: 0:51:16  iter: 3379  total_loss: 3.496  loss_sem_seg: 1.937  loss_center: 0.7353  loss_offset: 0.8925  time: 0.4665  data_time: 0.0266  lr: 0.0017249  max_mem: 10885M
[12/10 22:09:14 d2.utils.events]:  eta: 0:51:04  iter: 3399  total_loss: 3.746  loss_sem_seg: 1.933  loss_center: 0.6689  loss_offset: 0.9295  time: 0.4665  data_time: 0.0263  lr: 0.0017202  max_mem: 10885M
[12/10 22:09:23 d2.utils.events]:  eta: 0:50:56  iter: 3419  total_loss: 3.461  loss_sem_seg: 1.77  loss_center: 0.6339  loss_offset: 0.8936  time: 0.4665  data_time: 0.0268  lr: 0.0017155  max_mem: 10885M
[12/10 22:09:33 d2.utils.events]:  eta: 0:50:47  iter: 3439  total_loss: 3.775  loss_sem_seg: 1.933  loss_center: 0.5648  loss_offset: 0.9561  time: 0.4665  data_time: 0.0271  lr: 0.0017109  max_mem: 10885M
[12/10 22:09:42 d2.utils.events]:  eta: 0:50:36  iter: 3459  total_loss: 3.492  loss_sem_seg: 1.884  loss_center: 0.5167  loss_offset: 0.8219  time: 0.4665  data_time: 0.0260  lr: 0.0017062  max_mem: 10885M
[12/10 22:09:51 d2.utils.events]:  eta: 0:50:27  iter: 3479  total_loss: 3.613  loss_sem_seg: 1.871  loss_center: 0.6653  loss_offset: 0.8921  time: 0.4664  data_time: 0.0258  lr: 0.0017015  max_mem: 10885M
[12/10 22:10:01 d2.utils.events]:  eta: 0:50:17  iter: 3499  total_loss: 3.357  loss_sem_seg: 1.803  loss_center: 0.7184  loss_offset: 0.9057  time: 0.4664  data_time: 0.0248  lr: 0.0016968  max_mem: 10885M
[12/10 22:10:10 d2.utils.events]:  eta: 0:50:09  iter: 3519  total_loss: 3.358  loss_sem_seg: 1.71  loss_center: 0.5803  loss_offset: 0.9257  time: 0.4664  data_time: 0.0271  lr: 0.0016921  max_mem: 10885M
[12/10 22:10:19 d2.utils.events]:  eta: 0:49:58  iter: 3539  total_loss: 3.324  loss_sem_seg: 1.713  loss_center: 0.7487  loss_offset: 0.8435  time: 0.4664  data_time: 0.0256  lr: 0.0016874  max_mem: 10885M
[12/10 22:10:29 d2.utils.events]:  eta: 0:49:49  iter: 3559  total_loss: 3.597  loss_sem_seg: 1.964  loss_center: 0.7043  loss_offset: 0.9129  time: 0.4664  data_time: 0.0271  lr: 0.0016827  max_mem: 10885M
[12/10 22:10:38 d2.utils.events]:  eta: 0:49:40  iter: 3579  total_loss: 3.657  loss_sem_seg: 2.059  loss_center: 0.6919  loss_offset: 0.8882  time: 0.4664  data_time: 0.0254  lr: 0.001678  max_mem: 10885M
[12/10 22:10:47 d2.utils.events]:  eta: 0:49:29  iter: 3599  total_loss: 3.484  loss_sem_seg: 1.687  loss_center: 0.5143  loss_offset: 0.8608  time: 0.4663  data_time: 0.0265  lr: 0.0016733  max_mem: 10885M
[12/10 22:10:56 d2.utils.events]:  eta: 0:49:19  iter: 3619  total_loss: 3.341  loss_sem_seg: 1.805  loss_center: 0.6783  loss_offset: 0.7524  time: 0.4663  data_time: 0.0281  lr: 0.0016686  max_mem: 10885M
[12/10 22:11:06 d2.utils.events]:  eta: 0:49:11  iter: 3639  total_loss: 3.608  loss_sem_seg: 1.784  loss_center: 0.7019  loss_offset: 0.9589  time: 0.4663  data_time: 0.0253  lr: 0.0016638  max_mem: 10885M
[12/10 22:11:15 d2.utils.events]:  eta: 0:49:02  iter: 3659  total_loss: 3.653  loss_sem_seg: 1.738  loss_center: 0.7679  loss_offset: 0.9039  time: 0.4663  data_time: 0.0281  lr: 0.0016591  max_mem: 10885M
[12/10 22:11:24 d2.utils.events]:  eta: 0:48:51  iter: 3679  total_loss: 3.433  loss_sem_seg: 1.983  loss_center: 0.7557  loss_offset: 0.8805  time: 0.4663  data_time: 0.0264  lr: 0.0016544  max_mem: 10885M
[12/10 22:11:34 d2.utils.events]:  eta: 0:48:41  iter: 3699  total_loss: 3.433  loss_sem_seg: 1.948  loss_center: 0.5735  loss_offset: 1.069  time: 0.4663  data_time: 0.0274  lr: 0.0016497  max_mem: 10885M
[12/10 22:11:43 d2.utils.events]:  eta: 0:48:32  iter: 3719  total_loss: 3.316  loss_sem_seg: 1.915  loss_center: 0.6246  loss_offset: 0.8689  time: 0.4663  data_time: 0.0277  lr: 0.001645  max_mem: 10885M
[12/10 22:11:52 d2.utils.events]:  eta: 0:48:23  iter: 3739  total_loss: 3.298  loss_sem_seg: 1.811  loss_center: 0.568  loss_offset: 0.8  time: 0.4663  data_time: 0.0275  lr: 0.0016403  max_mem: 10885M
[12/10 22:12:02 d2.utils.events]:  eta: 0:48:14  iter: 3759  total_loss: 3.414  loss_sem_seg: 1.745  loss_center: 0.6782  loss_offset: 0.8746  time: 0.4663  data_time: 0.0257  lr: 0.0016356  max_mem: 10885M
[12/10 22:12:11 d2.utils.events]:  eta: 0:48:05  iter: 3779  total_loss: 3.157  loss_sem_seg: 1.671  loss_center: 0.7385  loss_offset: 0.8341  time: 0.4663  data_time: 0.0266  lr: 0.0016309  max_mem: 10885M
[12/10 22:12:20 d2.utils.events]:  eta: 0:47:55  iter: 3799  total_loss: 3.536  loss_sem_seg: 1.804  loss_center: 0.6851  loss_offset: 0.9809  time: 0.4663  data_time: 0.0258  lr: 0.0016261  max_mem: 10885M
[12/10 22:12:29 d2.utils.events]:  eta: 0:47:47  iter: 3819  total_loss: 3.383  loss_sem_seg: 1.772  loss_center: 0.5729  loss_offset: 0.8601  time: 0.4663  data_time: 0.0270  lr: 0.0016214  max_mem: 10885M
[12/10 22:12:39 d2.utils.events]:  eta: 0:47:36  iter: 3839  total_loss: 3.476  loss_sem_seg: 1.786  loss_center: 0.6595  loss_offset: 0.9514  time: 0.4663  data_time: 0.0268  lr: 0.0016167  max_mem: 10885M
[12/10 22:12:48 d2.utils.events]:  eta: 0:47:28  iter: 3859  total_loss: 3.308  loss_sem_seg: 1.858  loss_center: 0.606  loss_offset: 0.7537  time: 0.4663  data_time: 0.0282  lr: 0.001612  max_mem: 10885M
[12/10 22:12:57 d2.utils.events]:  eta: 0:47:19  iter: 3879  total_loss: 3.512  loss_sem_seg: 1.781  loss_center: 0.7041  loss_offset: 0.9093  time: 0.4663  data_time: 0.0261  lr: 0.0016072  max_mem: 10885M
[12/10 22:13:07 d2.utils.events]:  eta: 0:47:09  iter: 3899  total_loss: 3.557  loss_sem_seg: 1.956  loss_center: 0.6427  loss_offset: 0.8824  time: 0.4663  data_time: 0.0267  lr: 0.0016025  max_mem: 10885M
[12/10 22:13:16 d2.utils.events]:  eta: 0:46:59  iter: 3919  total_loss: 3.291  loss_sem_seg: 1.729  loss_center: 0.6926  loss_offset: 0.9008  time: 0.4663  data_time: 0.0277  lr: 0.0015978  max_mem: 10885M
[12/10 22:13:25 d2.utils.events]:  eta: 0:46:51  iter: 3939  total_loss: 3.314  loss_sem_seg: 1.696  loss_center: 0.5603  loss_offset: 0.8985  time: 0.4663  data_time: 0.0274  lr: 0.0015931  max_mem: 10885M
[12/10 22:13:35 d2.utils.events]:  eta: 0:46:41  iter: 3959  total_loss: 3.394  loss_sem_seg: 1.791  loss_center: 0.6816  loss_offset: 0.8799  time: 0.4662  data_time: 0.0253  lr: 0.0015883  max_mem: 10885M
[12/10 22:13:44 d2.utils.events]:  eta: 0:46:32  iter: 3979  total_loss: 3.398  loss_sem_seg: 1.827  loss_center: 0.5124  loss_offset: 0.8746  time: 0.4662  data_time: 0.0283  lr: 0.0015836  max_mem: 10885M
[12/10 22:13:53 d2.utils.events]:  eta: 0:46:22  iter: 3999  total_loss: 3.506  loss_sem_seg: 1.768  loss_center: 0.7699  loss_offset: 0.9457  time: 0.4662  data_time: 0.0265  lr: 0.0015789  max_mem: 10885M
[12/10 22:14:03 d2.utils.events]:  eta: 0:46:14  iter: 4019  total_loss: 3.206  loss_sem_seg: 1.642  loss_center: 0.6589  loss_offset: 0.9298  time: 0.4662  data_time: 0.0276  lr: 0.0015741  max_mem: 10885M
[12/10 22:14:12 d2.utils.events]:  eta: 0:46:05  iter: 4039  total_loss: 3.581  loss_sem_seg: 1.7  loss_center: 0.6964  loss_offset: 0.8298  time: 0.4662  data_time: 0.0257  lr: 0.0015694  max_mem: 10885M
[12/10 22:14:21 d2.utils.events]:  eta: 0:45:54  iter: 4059  total_loss: 3.357  loss_sem_seg: 1.677  loss_center: 0.5451  loss_offset: 0.9532  time: 0.4662  data_time: 0.0256  lr: 0.0015646  max_mem: 10885M
[12/10 22:14:30 d2.utils.events]:  eta: 0:45:45  iter: 4079  total_loss: 3.233  loss_sem_seg: 1.673  loss_center: 0.5863  loss_offset: 0.8545  time: 0.4662  data_time: 0.0255  lr: 0.0015599  max_mem: 10885M
[12/10 22:14:40 d2.utils.events]:  eta: 0:45:35  iter: 4099  total_loss: 3.42  loss_sem_seg: 1.701  loss_center: 0.6335  loss_offset: 0.8188  time: 0.4662  data_time: 0.0265  lr: 0.0015552  max_mem: 10885M
[12/10 22:14:49 d2.utils.events]:  eta: 0:45:26  iter: 4119  total_loss: 3.597  loss_sem_seg: 1.811  loss_center: 0.6727  loss_offset: 0.9855  time: 0.4662  data_time: 0.0277  lr: 0.0015504  max_mem: 10885M
[12/10 22:14:58 d2.utils.events]:  eta: 0:45:17  iter: 4139  total_loss: 3.299  loss_sem_seg: 1.861  loss_center: 0.5355  loss_offset: 0.9086  time: 0.4662  data_time: 0.0276  lr: 0.0015457  max_mem: 10885M
[12/10 22:15:08 d2.utils.events]:  eta: 0:45:08  iter: 4159  total_loss: 3.413  loss_sem_seg: 1.695  loss_center: 0.7263  loss_offset: 0.7929  time: 0.4662  data_time: 0.0256  lr: 0.0015409  max_mem: 10885M
[12/10 22:15:17 d2.utils.events]:  eta: 0:44:59  iter: 4179  total_loss: 3.24  loss_sem_seg: 1.741  loss_center: 0.6483  loss_offset: 0.8349  time: 0.4662  data_time: 0.0270  lr: 0.0015362  max_mem: 10885M
[12/10 22:15:26 d2.utils.events]:  eta: 0:44:50  iter: 4199  total_loss: 3.138  loss_sem_seg: 1.629  loss_center: 0.6148  loss_offset: 0.8807  time: 0.4662  data_time: 0.0274  lr: 0.0015314  max_mem: 10885M
[12/10 22:15:36 d2.utils.events]:  eta: 0:44:41  iter: 4219  total_loss: 3.357  loss_sem_seg: 1.754  loss_center: 0.586  loss_offset: 0.9756  time: 0.4661  data_time: 0.0264  lr: 0.0015267  max_mem: 10885M
[12/10 22:15:45 d2.utils.events]:  eta: 0:44:32  iter: 4239  total_loss: 3.192  loss_sem_seg: 1.765  loss_center: 0.5774  loss_offset: 1.007  time: 0.4661  data_time: 0.0262  lr: 0.0015219  max_mem: 10885M
[12/10 22:15:54 d2.utils.events]:  eta: 0:44:23  iter: 4259  total_loss: 3.175  loss_sem_seg: 1.79  loss_center: 0.6233  loss_offset: 0.8984  time: 0.4661  data_time: 0.0265  lr: 0.0015172  max_mem: 10885M
[12/10 22:16:03 d2.utils.events]:  eta: 0:44:13  iter: 4279  total_loss: 3.508  loss_sem_seg: 1.767  loss_center: 0.8767  loss_offset: 0.8032  time: 0.4661  data_time: 0.0263  lr: 0.0015124  max_mem: 10885M
[12/10 22:16:13 d2.utils.events]:  eta: 0:44:04  iter: 4299  total_loss: 3.179  loss_sem_seg: 1.629  loss_center: 0.8203  loss_offset: 0.8099  time: 0.4661  data_time: 0.0272  lr: 0.0015076  max_mem: 10885M
[12/10 22:16:22 d2.utils.events]:  eta: 0:43:55  iter: 4319  total_loss: 3.449  loss_sem_seg: 1.778  loss_center: 0.7155  loss_offset: 0.8856  time: 0.4661  data_time: 0.0263  lr: 0.0015029  max_mem: 10885M
[12/10 22:16:31 d2.utils.events]:  eta: 0:43:46  iter: 4339  total_loss: 3.286  loss_sem_seg: 1.801  loss_center: 0.575  loss_offset: 0.9429  time: 0.4661  data_time: 0.0264  lr: 0.0014981  max_mem: 10885M
[12/10 22:16:41 d2.utils.events]:  eta: 0:43:36  iter: 4359  total_loss: 3.519  loss_sem_seg: 1.978  loss_center: 0.6711  loss_offset: 0.9121  time: 0.4661  data_time: 0.0256  lr: 0.0014933  max_mem: 10885M
[12/10 22:16:50 d2.utils.events]:  eta: 0:43:27  iter: 4379  total_loss: 3.274  loss_sem_seg: 1.582  loss_center: 0.5796  loss_offset: 0.9081  time: 0.4661  data_time: 0.0270  lr: 0.0014886  max_mem: 10885M
[12/10 22:16:59 d2.utils.events]:  eta: 0:43:18  iter: 4399  total_loss: 3.285  loss_sem_seg: 1.601  loss_center: 0.5619  loss_offset: 0.8686  time: 0.4661  data_time: 0.0266  lr: 0.0014838  max_mem: 10885M
[12/10 22:17:09 d2.utils.events]:  eta: 0:43:08  iter: 4419  total_loss: 3.274  loss_sem_seg: 1.757  loss_center: 0.6969  loss_offset: 0.8866  time: 0.4661  data_time: 0.0274  lr: 0.001479  max_mem: 10885M
[12/10 22:17:18 d2.utils.events]:  eta: 0:42:59  iter: 4439  total_loss: 3.255  loss_sem_seg: 1.493  loss_center: 0.7264  loss_offset: 0.8238  time: 0.4660  data_time: 0.0240  lr: 0.0014743  max_mem: 10885M
[12/10 22:17:27 d2.utils.events]:  eta: 0:42:50  iter: 4459  total_loss: 3.663  loss_sem_seg: 1.889  loss_center: 0.5922  loss_offset: 0.9936  time: 0.4660  data_time: 0.0250  lr: 0.0014695  max_mem: 10885M
[12/10 22:17:36 d2.utils.events]:  eta: 0:42:40  iter: 4479  total_loss: 3.258  loss_sem_seg: 1.718  loss_center: 0.6752  loss_offset: 0.8895  time: 0.4660  data_time: 0.0262  lr: 0.0014647  max_mem: 10885M
[12/10 22:17:46 d2.utils.events]:  eta: 0:42:31  iter: 4499  total_loss: 3.322  loss_sem_seg: 1.649  loss_center: 0.6666  loss_offset: 0.7939  time: 0.4660  data_time: 0.0256  lr: 0.0014599  max_mem: 10885M
[12/10 22:17:55 d2.utils.events]:  eta: 0:42:21  iter: 4519  total_loss: 3.271  loss_sem_seg: 1.738  loss_center: 0.7171  loss_offset: 0.8258  time: 0.4660  data_time: 0.0261  lr: 0.0014552  max_mem: 10885M
[12/10 22:18:04 d2.utils.events]:  eta: 0:42:13  iter: 4539  total_loss: 3.47  loss_sem_seg: 1.745  loss_center: 0.5208  loss_offset: 0.9786  time: 0.4660  data_time: 0.0268  lr: 0.0014504  max_mem: 10885M
[12/10 22:18:13 d2.utils.events]:  eta: 0:42:02  iter: 4559  total_loss: 3.485  loss_sem_seg: 1.83  loss_center: 0.6634  loss_offset: 0.8513  time: 0.4660  data_time: 0.0270  lr: 0.0014456  max_mem: 10885M
[12/10 22:18:23 d2.utils.events]:  eta: 0:41:53  iter: 4579  total_loss: 3.414  loss_sem_seg: 1.861  loss_center: 0.5938  loss_offset: 0.9331  time: 0.4660  data_time: 0.0261  lr: 0.0014408  max_mem: 10885M
[12/10 22:18:32 d2.utils.events]:  eta: 0:41:44  iter: 4599  total_loss: 2.994  loss_sem_seg: 1.423  loss_center: 0.5899  loss_offset: 0.91  time: 0.4660  data_time: 0.0255  lr: 0.001436  max_mem: 10885M
[12/10 22:18:41 d2.utils.events]:  eta: 0:41:34  iter: 4619  total_loss: 3.483  loss_sem_seg: 1.77  loss_center: 0.7326  loss_offset: 0.9025  time: 0.4659  data_time: 0.0263  lr: 0.0014313  max_mem: 10885M
[12/10 22:18:51 d2.utils.events]:  eta: 0:41:25  iter: 4639  total_loss: 3.237  loss_sem_seg: 1.624  loss_center: 0.6195  loss_offset: 0.8135  time: 0.4659  data_time: 0.0259  lr: 0.0014265  max_mem: 10885M
[12/10 22:19:00 d2.utils.events]:  eta: 0:41:15  iter: 4659  total_loss: 3.308  loss_sem_seg: 1.625  loss_center: 0.7276  loss_offset: 0.9016  time: 0.4659  data_time: 0.0271  lr: 0.0014217  max_mem: 10885M
[12/10 22:19:09 d2.utils.events]:  eta: 0:41:06  iter: 4679  total_loss: 3.24  loss_sem_seg: 1.726  loss_center: 0.7084  loss_offset: 0.7951  time: 0.4659  data_time: 0.0262  lr: 0.0014169  max_mem: 10885M
[12/10 22:19:18 d2.utils.events]:  eta: 0:40:56  iter: 4699  total_loss: 3.467  loss_sem_seg: 1.656  loss_center: 0.6681  loss_offset: 0.7466  time: 0.4659  data_time: 0.0266  lr: 0.0014121  max_mem: 10885M
[12/10 22:19:28 d2.utils.events]:  eta: 0:40:47  iter: 4719  total_loss: 3.382  loss_sem_seg: 1.611  loss_center: 0.7048  loss_offset: 0.9022  time: 0.4659  data_time: 0.0263  lr: 0.0014073  max_mem: 10885M
[12/10 22:19:37 d2.utils.events]:  eta: 0:40:37  iter: 4739  total_loss: 3.355  loss_sem_seg: 1.799  loss_center: 0.5442  loss_offset: 0.8433  time: 0.4659  data_time: 0.0257  lr: 0.0014025  max_mem: 10885M
[12/10 22:19:46 d2.utils.events]:  eta: 0:40:28  iter: 4759  total_loss: 3.24  loss_sem_seg: 1.743  loss_center: 0.6502  loss_offset: 0.8501  time: 0.4659  data_time: 0.0275  lr: 0.0013977  max_mem: 10885M
[12/10 22:19:56 d2.utils.events]:  eta: 0:40:18  iter: 4779  total_loss: 3.338  loss_sem_seg: 1.668  loss_center: 0.7105  loss_offset: 0.8545  time: 0.4659  data_time: 0.0256  lr: 0.0013929  max_mem: 10885M
[12/10 22:20:05 d2.utils.events]:  eta: 0:40:09  iter: 4799  total_loss: 3.35  loss_sem_seg: 1.731  loss_center: 0.6795  loss_offset: 0.9145  time: 0.4659  data_time: 0.0264  lr: 0.0013881  max_mem: 10885M
[12/10 22:20:14 d2.utils.events]:  eta: 0:40:00  iter: 4819  total_loss: 3.045  loss_sem_seg: 1.641  loss_center: 0.5321  loss_offset: 0.8636  time: 0.4659  data_time: 0.0262  lr: 0.0013833  max_mem: 10885M
[12/10 22:20:24 d2.utils.events]:  eta: 0:39:51  iter: 4839  total_loss: 3.443  loss_sem_seg: 1.745  loss_center: 0.6356  loss_offset: 0.9257  time: 0.4659  data_time: 0.0288  lr: 0.0013785  max_mem: 10885M
[12/10 22:20:33 d2.utils.events]:  eta: 0:39:42  iter: 4859  total_loss: 3.303  loss_sem_seg: 1.755  loss_center: 0.6471  loss_offset: 0.9285  time: 0.4659  data_time: 0.0270  lr: 0.0013737  max_mem: 10885M
[12/10 22:20:42 d2.utils.events]:  eta: 0:39:32  iter: 4879  total_loss: 3.46  loss_sem_seg: 1.884  loss_center: 0.6356  loss_offset: 0.998  time: 0.4659  data_time: 0.0266  lr: 0.0013689  max_mem: 10885M
[12/10 22:20:52 d2.utils.events]:  eta: 0:39:22  iter: 4899  total_loss: 3.368  loss_sem_seg: 1.862  loss_center: 0.6749  loss_offset: 0.8391  time: 0.4659  data_time: 0.0248  lr: 0.001364  max_mem: 10885M
[12/10 22:21:01 d2.utils.events]:  eta: 0:39:12  iter: 4919  total_loss: 3.512  loss_sem_seg: 1.848  loss_center: 0.6189  loss_offset: 0.9174  time: 0.4659  data_time: 0.0265  lr: 0.0013592  max_mem: 10885M
[12/10 22:21:10 d2.utils.events]:  eta: 0:39:03  iter: 4939  total_loss: 3.813  loss_sem_seg: 2.115  loss_center: 0.6939  loss_offset: 0.8529  time: 0.4659  data_time: 0.0272  lr: 0.0013544  max_mem: 10885M
[12/10 22:21:19 d2.utils.events]:  eta: 0:38:55  iter: 4959  total_loss: 3.328  loss_sem_seg: 1.737  loss_center: 0.6601  loss_offset: 0.8046  time: 0.4659  data_time: 0.0260  lr: 0.0013496  max_mem: 10885M
[12/10 22:21:29 d2.utils.events]:  eta: 0:38:45  iter: 4979  total_loss: 2.885  loss_sem_seg: 1.448  loss_center: 0.6327  loss_offset: 0.7869  time: 0.4658  data_time: 0.0259  lr: 0.0013448  max_mem: 10885M
[12/10 22:21:38 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0004999.pth
[12/10 22:21:40 d2.utils.events]:  eta: 0:38:35  iter: 4999  total_loss: 3.399  loss_sem_seg: 1.727  loss_center: 0.6315  loss_offset: 0.8878  time: 0.4658  data_time: 0.0274  lr: 0.00134  max_mem: 10885M
[12/10 22:21:49 d2.utils.events]:  eta: 0:38:26  iter: 5019  total_loss: 2.881  loss_sem_seg: 1.551  loss_center: 0.6166  loss_offset: 0.7887  time: 0.4658  data_time: 0.0265  lr: 0.0013351  max_mem: 10885M
[12/10 22:21:58 d2.utils.events]:  eta: 0:38:16  iter: 5039  total_loss: 3.243  loss_sem_seg: 1.632  loss_center: 0.6009  loss_offset: 0.9253  time: 0.4658  data_time: 0.0267  lr: 0.0013303  max_mem: 10885M
[12/10 22:22:08 d2.utils.events]:  eta: 0:38:07  iter: 5059  total_loss: 3.601  loss_sem_seg: 1.851  loss_center: 0.6286  loss_offset: 0.8678  time: 0.4658  data_time: 0.0270  lr: 0.0013255  max_mem: 10885M
[12/10 22:22:17 d2.utils.events]:  eta: 0:37:58  iter: 5079  total_loss: 3.528  loss_sem_seg: 1.954  loss_center: 0.5947  loss_offset: 0.8457  time: 0.4658  data_time: 0.0256  lr: 0.0013207  max_mem: 10885M
[12/10 22:22:26 d2.utils.events]:  eta: 0:37:49  iter: 5099  total_loss: 3.269  loss_sem_seg: 1.843  loss_center: 0.5529  loss_offset: 0.9094  time: 0.4658  data_time: 0.0249  lr: 0.0013158  max_mem: 10885M
[12/10 22:22:36 d2.utils.events]:  eta: 0:37:38  iter: 5119  total_loss: 3.463  loss_sem_seg: 1.628  loss_center: 0.6753  loss_offset: 0.9067  time: 0.4658  data_time: 0.0269  lr: 0.001311  max_mem: 10885M
[12/10 22:22:45 d2.utils.events]:  eta: 0:37:28  iter: 5139  total_loss: 3.263  loss_sem_seg: 1.712  loss_center: 0.6159  loss_offset: 0.8654  time: 0.4658  data_time: 0.0266  lr: 0.0013062  max_mem: 10885M
[12/10 22:22:54 d2.utils.events]:  eta: 0:37:19  iter: 5159  total_loss: 3.346  loss_sem_seg: 1.62  loss_center: 0.6068  loss_offset: 0.87  time: 0.4658  data_time: 0.0262  lr: 0.0013013  max_mem: 10885M
[12/10 22:23:04 d2.utils.events]:  eta: 0:37:10  iter: 5179  total_loss: 3.349  loss_sem_seg: 1.673  loss_center: 0.6069  loss_offset: 0.936  time: 0.4658  data_time: 0.0256  lr: 0.0012965  max_mem: 10885M
[12/10 22:23:13 d2.utils.events]:  eta: 0:37:00  iter: 5199  total_loss: 3.331  loss_sem_seg: 1.666  loss_center: 0.7478  loss_offset: 0.9544  time: 0.4658  data_time: 0.0243  lr: 0.0012916  max_mem: 10885M
[12/10 22:23:22 d2.utils.events]:  eta: 0:36:51  iter: 5219  total_loss: 3.164  loss_sem_seg: 1.619  loss_center: 0.5491  loss_offset: 0.8241  time: 0.4658  data_time: 0.0265  lr: 0.0012868  max_mem: 10885M
[12/10 22:23:31 d2.utils.events]:  eta: 0:36:42  iter: 5239  total_loss: 3.333  loss_sem_seg: 1.875  loss_center: 0.5083  loss_offset: 0.8689  time: 0.4658  data_time: 0.0265  lr: 0.0012819  max_mem: 10885M
[12/10 22:23:41 d2.utils.events]:  eta: 0:36:33  iter: 5259  total_loss: 3.191  loss_sem_seg: 1.69  loss_center: 0.6629  loss_offset: 0.7659  time: 0.4658  data_time: 0.0271  lr: 0.0012771  max_mem: 10885M
[12/10 22:23:50 d2.utils.events]:  eta: 0:36:24  iter: 5279  total_loss: 3.314  loss_sem_seg: 1.759  loss_center: 0.5718  loss_offset: 0.8993  time: 0.4658  data_time: 0.0270  lr: 0.0012722  max_mem: 10885M
[12/10 22:23:59 d2.utils.events]:  eta: 0:36:15  iter: 5299  total_loss: 2.995  loss_sem_seg: 1.476  loss_center: 0.7381  loss_offset: 0.7746  time: 0.4657  data_time: 0.0272  lr: 0.0012674  max_mem: 10885M
[12/10 22:24:09 d2.utils.events]:  eta: 0:36:05  iter: 5319  total_loss: 3.069  loss_sem_seg: 1.439  loss_center: 0.6074  loss_offset: 0.8147  time: 0.4657  data_time: 0.0263  lr: 0.0012625  max_mem: 10885M
[12/10 22:24:18 d2.utils.events]:  eta: 0:35:56  iter: 5339  total_loss: 3.594  loss_sem_seg: 1.919  loss_center: 0.5846  loss_offset: 0.9218  time: 0.4657  data_time: 0.0262  lr: 0.0012577  max_mem: 10885M
[12/10 22:24:27 d2.utils.events]:  eta: 0:35:47  iter: 5359  total_loss: 3.074  loss_sem_seg: 1.539  loss_center: 0.7163  loss_offset: 0.8153  time: 0.4657  data_time: 0.0259  lr: 0.0012528  max_mem: 10885M
[12/10 22:24:36 d2.utils.events]:  eta: 0:35:37  iter: 5379  total_loss: 3.146  loss_sem_seg: 1.644  loss_center: 0.5837  loss_offset: 0.9191  time: 0.4657  data_time: 0.0262  lr: 0.001248  max_mem: 10885M
[12/10 22:24:46 d2.utils.events]:  eta: 0:35:29  iter: 5399  total_loss: 3.075  loss_sem_seg: 1.529  loss_center: 0.7079  loss_offset: 0.8116  time: 0.4657  data_time: 0.0278  lr: 0.0012431  max_mem: 10885M
[12/10 22:24:55 d2.utils.events]:  eta: 0:35:19  iter: 5419  total_loss: 3.232  loss_sem_seg: 1.537  loss_center: 0.5903  loss_offset: 0.9143  time: 0.4657  data_time: 0.0256  lr: 0.0012382  max_mem: 10885M
[12/10 22:25:04 d2.utils.events]:  eta: 0:35:10  iter: 5439  total_loss: 3.122  loss_sem_seg: 1.721  loss_center: 0.6157  loss_offset: 0.8283  time: 0.4657  data_time: 0.0276  lr: 0.0012334  max_mem: 10885M
[12/10 22:25:14 d2.utils.events]:  eta: 0:35:02  iter: 5459  total_loss: 3.214  loss_sem_seg: 1.74  loss_center: 0.6565  loss_offset: 0.8741  time: 0.4657  data_time: 0.0297  lr: 0.0012285  max_mem: 10885M
[12/10 22:25:23 d2.utils.events]:  eta: 0:34:53  iter: 5479  total_loss: 3.342  loss_sem_seg: 1.914  loss_center: 0.5475  loss_offset: 0.9026  time: 0.4657  data_time: 0.0267  lr: 0.0012236  max_mem: 10885M
[12/10 22:25:32 d2.utils.events]:  eta: 0:34:44  iter: 5499  total_loss: 3.334  loss_sem_seg: 1.685  loss_center: 0.6736  loss_offset: 0.8611  time: 0.4657  data_time: 0.0275  lr: 0.0012188  max_mem: 10885M
[12/10 22:25:42 d2.utils.events]:  eta: 0:34:35  iter: 5519  total_loss: 3.201  loss_sem_seg: 1.749  loss_center: 0.6579  loss_offset: 0.8662  time: 0.4657  data_time: 0.0275  lr: 0.0012139  max_mem: 10885M
[12/10 22:25:51 d2.utils.events]:  eta: 0:34:25  iter: 5539  total_loss: 3.156  loss_sem_seg: 1.539  loss_center: 0.6499  loss_offset: 0.8446  time: 0.4657  data_time: 0.0269  lr: 0.001209  max_mem: 10885M
[12/10 22:26:00 d2.utils.events]:  eta: 0:34:16  iter: 5559  total_loss: 2.999  loss_sem_seg: 1.507  loss_center: 0.5883  loss_offset: 0.9312  time: 0.4657  data_time: 0.0278  lr: 0.0012041  max_mem: 10885M
[12/10 22:26:10 d2.utils.events]:  eta: 0:34:08  iter: 5579  total_loss: 3.173  loss_sem_seg: 1.677  loss_center: 0.6153  loss_offset: 0.8629  time: 0.4657  data_time: 0.0271  lr: 0.0011992  max_mem: 10885M
[12/10 22:26:19 d2.utils.events]:  eta: 0:33:58  iter: 5599  total_loss: 2.851  loss_sem_seg: 1.568  loss_center: 0.5447  loss_offset: 0.8181  time: 0.4657  data_time: 0.0262  lr: 0.0011944  max_mem: 10885M
[12/10 22:26:28 d2.utils.events]:  eta: 0:33:49  iter: 5619  total_loss: 3.171  loss_sem_seg: 1.54  loss_center: 0.5252  loss_offset: 0.89  time: 0.4657  data_time: 0.0287  lr: 0.0011895  max_mem: 10885M
[12/10 22:26:38 d2.utils.events]:  eta: 0:33:40  iter: 5639  total_loss: 3.173  loss_sem_seg: 1.783  loss_center: 0.5574  loss_offset: 0.7742  time: 0.4657  data_time: 0.0268  lr: 0.0011846  max_mem: 10885M
[12/10 22:26:47 d2.utils.events]:  eta: 0:33:31  iter: 5659  total_loss: 3.215  loss_sem_seg: 1.769  loss_center: 0.393  loss_offset: 0.8407  time: 0.4657  data_time: 0.0274  lr: 0.0011797  max_mem: 10885M
[12/10 22:26:56 d2.utils.events]:  eta: 0:33:22  iter: 5679  total_loss: 3.159  loss_sem_seg: 1.721  loss_center: 0.6742  loss_offset: 0.8697  time: 0.4657  data_time: 0.0257  lr: 0.0011748  max_mem: 10885M
[12/10 22:27:06 d2.utils.events]:  eta: 0:33:13  iter: 5699  total_loss: 3.142  loss_sem_seg: 1.682  loss_center: 0.6014  loss_offset: 0.8286  time: 0.4657  data_time: 0.0246  lr: 0.0011699  max_mem: 10885M
[12/10 22:27:15 d2.utils.events]:  eta: 0:33:04  iter: 5719  total_loss: 3.321  loss_sem_seg: 1.775  loss_center: 0.6242  loss_offset: 0.9977  time: 0.4657  data_time: 0.0261  lr: 0.001165  max_mem: 10885M
[12/10 22:27:24 d2.utils.events]:  eta: 0:32:54  iter: 5739  total_loss: 3.334  loss_sem_seg: 1.798  loss_center: 0.5702  loss_offset: 0.8647  time: 0.4657  data_time: 0.0257  lr: 0.0011601  max_mem: 10885M
[12/10 22:27:34 d2.utils.events]:  eta: 0:32:45  iter: 5759  total_loss: 3.327  loss_sem_seg: 1.836  loss_center: 0.629  loss_offset: 0.8905  time: 0.4657  data_time: 0.0273  lr: 0.0011552  max_mem: 10885M
[12/10 22:27:43 d2.utils.events]:  eta: 0:32:36  iter: 5779  total_loss: 3.078  loss_sem_seg: 1.697  loss_center: 0.653  loss_offset: 0.7635  time: 0.4657  data_time: 0.0268  lr: 0.0011503  max_mem: 10885M
[12/10 22:27:52 d2.utils.events]:  eta: 0:32:27  iter: 5799  total_loss: 3.46  loss_sem_seg: 1.851  loss_center: 0.6721  loss_offset: 0.8489  time: 0.4657  data_time: 0.0274  lr: 0.0011454  max_mem: 10885M
[12/10 22:28:01 d2.utils.events]:  eta: 0:32:18  iter: 5819  total_loss: 2.987  loss_sem_seg: 1.593  loss_center: 0.6458  loss_offset: 0.7509  time: 0.4657  data_time: 0.0270  lr: 0.0011405  max_mem: 10885M
[12/10 22:28:11 d2.utils.events]:  eta: 0:32:09  iter: 5839  total_loss: 3.242  loss_sem_seg: 1.975  loss_center: 0.5562  loss_offset: 0.8388  time: 0.4657  data_time: 0.0280  lr: 0.0011356  max_mem: 10885M
[12/10 22:28:20 d2.utils.events]:  eta: 0:32:00  iter: 5859  total_loss: 3.36  loss_sem_seg: 1.797  loss_center: 0.6681  loss_offset: 0.8438  time: 0.4657  data_time: 0.0269  lr: 0.0011307  max_mem: 10885M
[12/10 22:28:29 d2.utils.events]:  eta: 0:31:51  iter: 5879  total_loss: 3.105  loss_sem_seg: 1.739  loss_center: 0.6206  loss_offset: 0.9034  time: 0.4657  data_time: 0.0265  lr: 0.0011258  max_mem: 10885M
[12/10 22:28:39 d2.utils.events]:  eta: 0:31:42  iter: 5899  total_loss: 3.095  loss_sem_seg: 1.619  loss_center: 0.6024  loss_offset: 0.8551  time: 0.4657  data_time: 0.0264  lr: 0.0011208  max_mem: 10885M
[12/10 22:28:48 d2.utils.events]:  eta: 0:31:33  iter: 5919  total_loss: 3.196  loss_sem_seg: 1.685  loss_center: 0.5623  loss_offset: 0.8699  time: 0.4657  data_time: 0.0265  lr: 0.0011159  max_mem: 10885M
[12/10 22:28:57 d2.utils.events]:  eta: 0:31:23  iter: 5939  total_loss: 3.151  loss_sem_seg: 1.59  loss_center: 0.7339  loss_offset: 0.8285  time: 0.4657  data_time: 0.0272  lr: 0.001111  max_mem: 10885M
[12/10 22:29:07 d2.utils.events]:  eta: 0:31:13  iter: 5959  total_loss: 2.9  loss_sem_seg: 1.503  loss_center: 0.5415  loss_offset: 0.8471  time: 0.4657  data_time: 0.0267  lr: 0.0011061  max_mem: 10885M
[12/10 22:29:16 d2.utils.events]:  eta: 0:31:04  iter: 5979  total_loss: 3.122  loss_sem_seg: 1.729  loss_center: 0.6315  loss_offset: 0.6401  time: 0.4657  data_time: 0.0268  lr: 0.0011011  max_mem: 10885M
[12/10 22:29:25 d2.utils.events]:  eta: 0:30:54  iter: 5999  total_loss: 3.116  loss_sem_seg: 1.575  loss_center: 0.5983  loss_offset: 0.8219  time: 0.4657  data_time: 0.0266  lr: 0.0010962  max_mem: 10885M
[12/10 22:29:34 d2.utils.events]:  eta: 0:30:45  iter: 6019  total_loss: 2.939  loss_sem_seg: 1.571  loss_center: 0.5845  loss_offset: 0.7839  time: 0.4657  data_time: 0.0282  lr: 0.0010913  max_mem: 10885M
[12/10 22:29:44 d2.utils.events]:  eta: 0:30:36  iter: 6039  total_loss: 3.149  loss_sem_seg: 1.632  loss_center: 0.6829  loss_offset: 0.8103  time: 0.4657  data_time: 0.0254  lr: 0.0010863  max_mem: 10885M
[12/10 22:29:53 d2.utils.events]:  eta: 0:30:28  iter: 6059  total_loss: 3.291  loss_sem_seg: 1.742  loss_center: 0.6135  loss_offset: 0.8283  time: 0.4657  data_time: 0.0279  lr: 0.0010814  max_mem: 10885M
[12/10 22:30:02 d2.utils.events]:  eta: 0:30:18  iter: 6079  total_loss: 3.49  loss_sem_seg: 1.905  loss_center: 0.5897  loss_offset: 0.8998  time: 0.4657  data_time: 0.0266  lr: 0.0010765  max_mem: 10885M
[12/10 22:30:12 d2.utils.events]:  eta: 0:30:10  iter: 6099  total_loss: 3.081  loss_sem_seg: 1.65  loss_center: 0.7217  loss_offset: 0.6813  time: 0.4657  data_time: 0.0263  lr: 0.0010715  max_mem: 10885M
[12/10 22:30:21 d2.utils.events]:  eta: 0:30:00  iter: 6119  total_loss: 3.203  loss_sem_seg: 1.56  loss_center: 0.6363  loss_offset: 0.9374  time: 0.4657  data_time: 0.0254  lr: 0.0010666  max_mem: 10885M
[12/10 22:30:30 d2.utils.events]:  eta: 0:29:52  iter: 6139  total_loss: 2.92  loss_sem_seg: 1.567  loss_center: 0.6344  loss_offset: 0.8201  time: 0.4656  data_time: 0.0258  lr: 0.0010616  max_mem: 10885M
[12/10 22:30:40 d2.utils.events]:  eta: 0:29:42  iter: 6159  total_loss: 3.203  loss_sem_seg: 1.571  loss_center: 0.6883  loss_offset: 0.7965  time: 0.4656  data_time: 0.0269  lr: 0.0010567  max_mem: 10885M
[12/10 22:30:49 d2.utils.events]:  eta: 0:29:34  iter: 6179  total_loss: 3  loss_sem_seg: 1.499  loss_center: 0.6189  loss_offset: 0.765  time: 0.4656  data_time: 0.0274  lr: 0.0010517  max_mem: 10885M
[12/10 22:30:58 d2.utils.events]:  eta: 0:29:25  iter: 6199  total_loss: 3.23  loss_sem_seg: 1.733  loss_center: 0.5823  loss_offset: 0.8693  time: 0.4656  data_time: 0.0269  lr: 0.0010468  max_mem: 10885M
[12/10 22:31:08 d2.utils.events]:  eta: 0:29:16  iter: 6219  total_loss: 3.291  loss_sem_seg: 1.795  loss_center: 0.5663  loss_offset: 1.003  time: 0.4656  data_time: 0.0271  lr: 0.0010418  max_mem: 10885M
[12/10 22:31:17 d2.utils.events]:  eta: 0:29:05  iter: 6239  total_loss: 2.855  loss_sem_seg: 1.526  loss_center: 0.5327  loss_offset: 0.7421  time: 0.4656  data_time: 0.0263  lr: 0.0010368  max_mem: 10885M
[12/10 22:31:26 d2.utils.events]:  eta: 0:28:57  iter: 6259  total_loss: 3.366  loss_sem_seg: 1.651  loss_center: 0.6649  loss_offset: 0.8353  time: 0.4656  data_time: 0.0269  lr: 0.0010319  max_mem: 10885M
[12/10 22:31:35 d2.utils.events]:  eta: 0:28:47  iter: 6279  total_loss: 3.018  loss_sem_seg: 1.609  loss_center: 0.4864  loss_offset: 0.7611  time: 0.4656  data_time: 0.0279  lr: 0.0010269  max_mem: 10885M
[12/10 22:31:45 d2.utils.events]:  eta: 0:28:38  iter: 6299  total_loss: 2.953  loss_sem_seg: 1.735  loss_center: 0.3973  loss_offset: 0.8351  time: 0.4656  data_time: 0.0267  lr: 0.0010219  max_mem: 10885M
[12/10 22:31:54 d2.utils.events]:  eta: 0:28:28  iter: 6319  total_loss: 3.157  loss_sem_seg: 1.615  loss_center: 0.5677  loss_offset: 0.8864  time: 0.4656  data_time: 0.0262  lr: 0.001017  max_mem: 10885M
[12/10 22:32:03 d2.utils.events]:  eta: 0:28:19  iter: 6339  total_loss: 3.042  loss_sem_seg: 1.498  loss_center: 0.6594  loss_offset: 0.7937  time: 0.4656  data_time: 0.0267  lr: 0.001012  max_mem: 10885M
[12/10 22:32:13 d2.utils.events]:  eta: 0:28:09  iter: 6359  total_loss: 3.124  loss_sem_seg: 1.509  loss_center: 0.6702  loss_offset: 0.778  time: 0.4656  data_time: 0.0281  lr: 0.001007  max_mem: 10885M
[12/10 22:32:22 d2.utils.events]:  eta: 0:28:00  iter: 6379  total_loss: 3.19  loss_sem_seg: 1.594  loss_center: 0.6121  loss_offset: 0.8111  time: 0.4656  data_time: 0.0244  lr: 0.001002  max_mem: 10885M
[12/10 22:32:31 d2.utils.events]:  eta: 0:27:50  iter: 6399  total_loss: 3.338  loss_sem_seg: 1.663  loss_center: 0.7032  loss_offset: 0.8057  time: 0.4656  data_time: 0.0287  lr: 0.00099706  max_mem: 10885M
[12/10 22:32:40 d2.utils.events]:  eta: 0:27:41  iter: 6419  total_loss: 2.912  loss_sem_seg: 1.475  loss_center: 0.7142  loss_offset: 0.7909  time: 0.4656  data_time: 0.0261  lr: 0.00099207  max_mem: 10885M
[12/10 22:32:50 d2.utils.events]:  eta: 0:27:32  iter: 6439  total_loss: 3.214  loss_sem_seg: 1.6  loss_center: 0.6972  loss_offset: 0.784  time: 0.4656  data_time: 0.0249  lr: 0.00098709  max_mem: 10885M
[12/10 22:32:59 d2.utils.events]:  eta: 0:27:22  iter: 6459  total_loss: 3.115  loss_sem_seg: 1.578  loss_center: 0.5416  loss_offset: 0.7922  time: 0.4656  data_time: 0.0273  lr: 0.00098209  max_mem: 10885M
[12/10 22:33:08 d2.utils.events]:  eta: 0:27:13  iter: 6479  total_loss: 3.202  loss_sem_seg: 1.564  loss_center: 0.4949  loss_offset: 0.8382  time: 0.4656  data_time: 0.0266  lr: 0.0009771  max_mem: 10885M
[12/10 22:33:18 d2.utils.events]:  eta: 0:27:04  iter: 6499  total_loss: 3.154  loss_sem_seg: 1.578  loss_center: 0.6474  loss_offset: 0.8122  time: 0.4656  data_time: 0.0277  lr: 0.0009721  max_mem: 10885M
[12/10 22:33:27 d2.utils.events]:  eta: 0:26:54  iter: 6519  total_loss: 3.07  loss_sem_seg: 1.539  loss_center: 0.6354  loss_offset: 0.8662  time: 0.4656  data_time: 0.0255  lr: 0.00096711  max_mem: 10885M
[12/10 22:33:36 d2.utils.events]:  eta: 0:26:44  iter: 6539  total_loss: 3.002  loss_sem_seg: 1.602  loss_center: 0.5754  loss_offset: 0.868  time: 0.4656  data_time: 0.0274  lr: 0.0009621  max_mem: 10885M
[12/10 22:33:46 d2.utils.events]:  eta: 0:26:35  iter: 6559  total_loss: 2.863  loss_sem_seg: 1.445  loss_center: 0.6568  loss_offset: 0.7615  time: 0.4656  data_time: 0.0245  lr: 0.0009571  max_mem: 10885M
[12/10 22:33:55 d2.utils.events]:  eta: 0:26:26  iter: 6579  total_loss: 2.865  loss_sem_seg: 1.457  loss_center: 0.5468  loss_offset: 0.8251  time: 0.4656  data_time: 0.0274  lr: 0.00095209  max_mem: 10885M
[12/10 22:34:04 d2.utils.events]:  eta: 0:26:17  iter: 6599  total_loss: 2.863  loss_sem_seg: 1.584  loss_center: 0.6373  loss_offset: 0.7549  time: 0.4656  data_time: 0.0289  lr: 0.00094708  max_mem: 10885M
[12/10 22:34:14 d2.utils.events]:  eta: 0:26:08  iter: 6619  total_loss: 2.899  loss_sem_seg: 1.456  loss_center: 0.6369  loss_offset: 0.6747  time: 0.4656  data_time: 0.0240  lr: 0.00094206  max_mem: 10885M
[12/10 22:34:23 d2.utils.events]:  eta: 0:25:58  iter: 6639  total_loss: 3.049  loss_sem_seg: 1.59  loss_center: 0.5593  loss_offset: 0.8401  time: 0.4656  data_time: 0.0255  lr: 0.00093705  max_mem: 10885M
[12/10 22:34:32 d2.utils.events]:  eta: 0:25:49  iter: 6659  total_loss: 3.409  loss_sem_seg: 1.761  loss_center: 0.7713  loss_offset: 0.8517  time: 0.4656  data_time: 0.0258  lr: 0.00093203  max_mem: 10885M
[12/10 22:34:41 d2.utils.events]:  eta: 0:25:39  iter: 6679  total_loss: 3.31  loss_sem_seg: 1.537  loss_center: 0.7662  loss_offset: 0.8057  time: 0.4656  data_time: 0.0267  lr: 0.000927  max_mem: 10885M
[12/10 22:34:51 d2.utils.events]:  eta: 0:25:30  iter: 6699  total_loss: 3.167  loss_sem_seg: 1.48  loss_center: 0.6123  loss_offset: 0.8113  time: 0.4656  data_time: 0.0264  lr: 0.00092198  max_mem: 10885M
[12/10 22:35:00 d2.utils.events]:  eta: 0:25:21  iter: 6719  total_loss: 3.339  loss_sem_seg: 1.7  loss_center: 0.6508  loss_offset: 0.7842  time: 0.4655  data_time: 0.0243  lr: 0.00091695  max_mem: 10885M
[12/10 22:35:09 d2.utils.events]:  eta: 0:25:11  iter: 6739  total_loss: 3.038  loss_sem_seg: 1.464  loss_center: 0.6359  loss_offset: 0.7241  time: 0.4655  data_time: 0.0258  lr: 0.00091192  max_mem: 10885M
[12/10 22:35:18 d2.utils.events]:  eta: 0:25:02  iter: 6759  total_loss: 3.154  loss_sem_seg: 1.598  loss_center: 0.751  loss_offset: 0.7877  time: 0.4655  data_time: 0.0262  lr: 0.00090688  max_mem: 10885M
[12/10 22:35:28 d2.utils.events]:  eta: 0:24:53  iter: 6779  total_loss: 3.051  loss_sem_seg: 1.596  loss_center: 0.5664  loss_offset: 0.8126  time: 0.4655  data_time: 0.0273  lr: 0.00090184  max_mem: 10885M
[12/10 22:35:37 d2.utils.events]:  eta: 0:24:43  iter: 6799  total_loss: 2.848  loss_sem_seg: 1.512  loss_center: 0.5876  loss_offset: 0.7179  time: 0.4655  data_time: 0.0255  lr: 0.0008968  max_mem: 10885M
[12/10 22:35:46 d2.utils.events]:  eta: 0:24:34  iter: 6819  total_loss: 2.852  loss_sem_seg: 1.358  loss_center: 0.8107  loss_offset: 0.6458  time: 0.4655  data_time: 0.0258  lr: 0.00089176  max_mem: 10885M
[12/10 22:35:56 d2.utils.events]:  eta: 0:24:24  iter: 6839  total_loss: 3.404  loss_sem_seg: 1.753  loss_center: 0.6459  loss_offset: 0.8546  time: 0.4655  data_time: 0.0270  lr: 0.00088671  max_mem: 10885M
[12/10 22:36:05 d2.utils.events]:  eta: 0:24:15  iter: 6859  total_loss: 3.462  loss_sem_seg: 1.552  loss_center: 0.7493  loss_offset: 0.9644  time: 0.4655  data_time: 0.0271  lr: 0.00088166  max_mem: 10885M
[12/10 22:36:14 d2.utils.events]:  eta: 0:24:06  iter: 6879  total_loss: 3.345  loss_sem_seg: 1.942  loss_center: 0.5542  loss_offset: 0.8505  time: 0.4655  data_time: 0.0266  lr: 0.00087661  max_mem: 10885M
[12/10 22:36:24 d2.utils.events]:  eta: 0:23:57  iter: 6899  total_loss: 2.962  loss_sem_seg: 1.462  loss_center: 0.7169  loss_offset: 0.7767  time: 0.4655  data_time: 0.0252  lr: 0.00087155  max_mem: 10885M
[12/10 22:36:33 d2.utils.events]:  eta: 0:23:48  iter: 6919  total_loss: 3.227  loss_sem_seg: 1.773  loss_center: 0.6033  loss_offset: 0.9101  time: 0.4655  data_time: 0.0256  lr: 0.00086649  max_mem: 10885M
[12/10 22:36:42 d2.utils.events]:  eta: 0:23:39  iter: 6939  total_loss: 3.026  loss_sem_seg: 1.507  loss_center: 0.5978  loss_offset: 0.8264  time: 0.4655  data_time: 0.0283  lr: 0.00086142  max_mem: 10885M
[12/10 22:36:52 d2.utils.events]:  eta: 0:23:29  iter: 6959  total_loss: 3.187  loss_sem_seg: 1.598  loss_center: 0.7198  loss_offset: 0.7658  time: 0.4655  data_time: 0.0259  lr: 0.00085636  max_mem: 10885M
[12/10 22:37:01 d2.utils.events]:  eta: 0:23:20  iter: 6979  total_loss: 3.093  loss_sem_seg: 1.535  loss_center: 0.67  loss_offset: 0.7882  time: 0.4655  data_time: 0.0278  lr: 0.00085129  max_mem: 10885M
[12/10 22:37:10 d2.utils.events]:  eta: 0:23:11  iter: 6999  total_loss: 2.939  loss_sem_seg: 1.662  loss_center: 0.5651  loss_offset: 0.7671  time: 0.4655  data_time: 0.0261  lr: 0.00084621  max_mem: 10885M
[12/10 22:37:19 d2.utils.events]:  eta: 0:23:01  iter: 7019  total_loss: 3.033  loss_sem_seg: 1.514  loss_center: 0.5558  loss_offset: 0.7583  time: 0.4655  data_time: 0.0263  lr: 0.00084114  max_mem: 10885M
[12/10 22:37:29 d2.utils.events]:  eta: 0:22:52  iter: 7039  total_loss: 3.064  loss_sem_seg: 1.671  loss_center: 0.6715  loss_offset: 0.7777  time: 0.4655  data_time: 0.0260  lr: 0.00083605  max_mem: 10885M
[12/10 22:37:38 d2.utils.events]:  eta: 0:22:42  iter: 7059  total_loss: 3.142  loss_sem_seg: 1.52  loss_center: 0.7285  loss_offset: 0.8226  time: 0.4655  data_time: 0.0254  lr: 0.00083097  max_mem: 10885M
[12/10 22:37:47 d2.utils.events]:  eta: 0:22:32  iter: 7079  total_loss: 2.963  loss_sem_seg: 1.544  loss_center: 0.6697  loss_offset: 0.7833  time: 0.4655  data_time: 0.0260  lr: 0.00082588  max_mem: 10885M
[12/10 22:37:56 d2.utils.events]:  eta: 0:22:23  iter: 7099  total_loss: 2.852  loss_sem_seg: 1.413  loss_center: 0.5578  loss_offset: 0.7478  time: 0.4655  data_time: 0.0266  lr: 0.00082079  max_mem: 10885M
[12/10 22:38:06 d2.utils.events]:  eta: 0:22:14  iter: 7119  total_loss: 2.657  loss_sem_seg: 1.417  loss_center: 0.6152  loss_offset: 0.686  time: 0.4655  data_time: 0.0265  lr: 0.0008157  max_mem: 10885M
[12/10 22:38:15 d2.utils.events]:  eta: 0:22:04  iter: 7139  total_loss: 3.038  loss_sem_seg: 1.613  loss_center: 0.5957  loss_offset: 0.7884  time: 0.4655  data_time: 0.0266  lr: 0.0008106  max_mem: 10885M
[12/10 22:38:24 d2.utils.events]:  eta: 0:21:55  iter: 7159  total_loss: 3.13  loss_sem_seg: 1.607  loss_center: 0.6445  loss_offset: 0.8061  time: 0.4655  data_time: 0.0261  lr: 0.0008055  max_mem: 10885M
[12/10 22:38:34 d2.utils.events]:  eta: 0:21:45  iter: 7179  total_loss: 3.078  loss_sem_seg: 1.517  loss_center: 0.72  loss_offset: 0.7939  time: 0.4655  data_time: 0.0282  lr: 0.00080039  max_mem: 10885M
[12/10 22:38:43 d2.utils.events]:  eta: 0:21:36  iter: 7199  total_loss: 2.931  loss_sem_seg: 1.537  loss_center: 0.6743  loss_offset: 0.69  time: 0.4654  data_time: 0.0239  lr: 0.00079528  max_mem: 10885M
[12/10 22:38:52 d2.utils.events]:  eta: 0:21:26  iter: 7219  total_loss: 3.028  loss_sem_seg: 1.466  loss_center: 0.6317  loss_offset: 0.77  time: 0.4654  data_time: 0.0270  lr: 0.00079017  max_mem: 10885M
[12/10 22:39:01 d2.utils.events]:  eta: 0:21:17  iter: 7239  total_loss: 3.17  loss_sem_seg: 1.69  loss_center: 0.5092  loss_offset: 0.9056  time: 0.4654  data_time: 0.0270  lr: 0.00078505  max_mem: 10885M
[12/10 22:39:11 d2.utils.events]:  eta: 0:21:08  iter: 7259  total_loss: 3.023  loss_sem_seg: 1.616  loss_center: 0.6377  loss_offset: 0.7737  time: 0.4654  data_time: 0.0248  lr: 0.00077993  max_mem: 10885M
[12/10 22:39:20 d2.utils.events]:  eta: 0:20:58  iter: 7279  total_loss: 2.907  loss_sem_seg: 1.38  loss_center: 0.6348  loss_offset: 0.7583  time: 0.4654  data_time: 0.0272  lr: 0.00077481  max_mem: 10885M
[12/10 22:39:29 d2.utils.events]:  eta: 0:20:49  iter: 7299  total_loss: 2.992  loss_sem_seg: 1.649  loss_center: 0.5601  loss_offset: 0.7225  time: 0.4654  data_time: 0.0257  lr: 0.00076968  max_mem: 10885M
[12/10 22:39:39 d2.utils.events]:  eta: 0:20:39  iter: 7319  total_loss: 3.103  loss_sem_seg: 1.6  loss_center: 0.6378  loss_offset: 0.9228  time: 0.4654  data_time: 0.0252  lr: 0.00076455  max_mem: 10885M
[12/10 22:39:48 d2.utils.events]:  eta: 0:20:30  iter: 7339  total_loss: 3.082  loss_sem_seg: 1.672  loss_center: 0.5925  loss_offset: 0.7791  time: 0.4654  data_time: 0.0257  lr: 0.00075942  max_mem: 10885M
[12/10 22:39:57 d2.utils.events]:  eta: 0:20:21  iter: 7359  total_loss: 2.87  loss_sem_seg: 1.421  loss_center: 0.5851  loss_offset: 0.7658  time: 0.4654  data_time: 0.0272  lr: 0.00075428  max_mem: 10885M
[12/10 22:40:06 d2.utils.events]:  eta: 0:20:12  iter: 7379  total_loss: 3.004  loss_sem_seg: 1.502  loss_center: 0.7005  loss_offset: 0.7564  time: 0.4654  data_time: 0.0268  lr: 0.00074914  max_mem: 10885M
[12/10 22:40:16 d2.utils.events]:  eta: 0:20:03  iter: 7399  total_loss: 2.92  loss_sem_seg: 1.4  loss_center: 0.6448  loss_offset: 0.8312  time: 0.4654  data_time: 0.0255  lr: 0.00074399  max_mem: 10885M
[12/10 22:40:25 d2.utils.events]:  eta: 0:19:54  iter: 7419  total_loss: 3.144  loss_sem_seg: 1.62  loss_center: 0.7203  loss_offset: 0.8339  time: 0.4654  data_time: 0.0263  lr: 0.00073884  max_mem: 10885M
[12/10 22:40:34 d2.utils.events]:  eta: 0:19:45  iter: 7439  total_loss: 2.807  loss_sem_seg: 1.434  loss_center: 0.5711  loss_offset: 0.7537  time: 0.4654  data_time: 0.0253  lr: 0.00073368  max_mem: 10885M
[12/10 22:40:43 d2.utils.events]:  eta: 0:19:35  iter: 7459  total_loss: 2.908  loss_sem_seg: 1.485  loss_center: 0.5423  loss_offset: 0.8332  time: 0.4654  data_time: 0.0256  lr: 0.00072852  max_mem: 10885M
[12/10 22:40:53 d2.utils.events]:  eta: 0:19:26  iter: 7479  total_loss: 2.963  loss_sem_seg: 1.623  loss_center: 0.6465  loss_offset: 0.8119  time: 0.4654  data_time: 0.0240  lr: 0.00072336  max_mem: 10885M
[12/10 22:41:02 d2.utils.events]:  eta: 0:19:17  iter: 7499  total_loss: 2.885  loss_sem_seg: 1.406  loss_center: 0.5942  loss_offset: 0.7439  time: 0.4653  data_time: 0.0277  lr: 0.00071819  max_mem: 10885M
[12/10 22:41:11 d2.utils.events]:  eta: 0:19:07  iter: 7519  total_loss: 3.068  loss_sem_seg: 1.622  loss_center: 0.5141  loss_offset: 0.8737  time: 0.4653  data_time: 0.0259  lr: 0.00071302  max_mem: 10885M
[12/10 22:41:21 d2.utils.events]:  eta: 0:18:58  iter: 7539  total_loss: 3.079  loss_sem_seg: 1.686  loss_center: 0.6207  loss_offset: 0.6912  time: 0.4653  data_time: 0.0269  lr: 0.00070785  max_mem: 10885M
[12/10 22:41:30 d2.utils.events]:  eta: 0:18:49  iter: 7559  total_loss: 3.305  loss_sem_seg: 1.844  loss_center: 0.5434  loss_offset: 0.9938  time: 0.4653  data_time: 0.0265  lr: 0.00070267  max_mem: 10885M
[12/10 22:41:39 d2.utils.events]:  eta: 0:18:39  iter: 7579  total_loss: 3.303  loss_sem_seg: 1.66  loss_center: 0.5729  loss_offset: 0.8231  time: 0.4653  data_time: 0.0266  lr: 0.00069749  max_mem: 10885M
[12/10 22:41:48 d2.utils.events]:  eta: 0:18:30  iter: 7599  total_loss: 2.853  loss_sem_seg: 1.462  loss_center: 0.5402  loss_offset: 0.729  time: 0.4653  data_time: 0.0268  lr: 0.0006923  max_mem: 10885M
[12/10 22:41:58 d2.utils.events]:  eta: 0:18:21  iter: 7619  total_loss: 2.899  loss_sem_seg: 1.583  loss_center: 0.6093  loss_offset: 0.7226  time: 0.4653  data_time: 0.0270  lr: 0.00068711  max_mem: 10885M
[12/10 22:42:07 d2.utils.events]:  eta: 0:18:11  iter: 7639  total_loss: 3.114  loss_sem_seg: 1.507  loss_center: 0.4472  loss_offset: 0.827  time: 0.4653  data_time: 0.0258  lr: 0.00068191  max_mem: 10885M
[12/10 22:42:16 d2.utils.events]:  eta: 0:18:02  iter: 7659  total_loss: 3.039  loss_sem_seg: 1.493  loss_center: 0.5381  loss_offset: 0.7997  time: 0.4653  data_time: 0.0267  lr: 0.00067671  max_mem: 10885M
[12/10 22:42:25 d2.utils.events]:  eta: 0:17:53  iter: 7679  total_loss: 3.002  loss_sem_seg: 1.512  loss_center: 0.6265  loss_offset: 0.7162  time: 0.4653  data_time: 0.0258  lr: 0.0006715  max_mem: 10885M
[12/10 22:42:35 d2.utils.events]:  eta: 0:17:44  iter: 7699  total_loss: 3.067  loss_sem_seg: 1.606  loss_center: 0.7286  loss_offset: 0.7955  time: 0.4653  data_time: 0.0256  lr: 0.00066629  max_mem: 10885M
[12/10 22:42:44 d2.utils.events]:  eta: 0:17:34  iter: 7719  total_loss: 3.102  loss_sem_seg: 1.521  loss_center: 0.7019  loss_offset: 0.7429  time: 0.4653  data_time: 0.0255  lr: 0.00066108  max_mem: 10885M
[12/10 22:42:53 d2.utils.events]:  eta: 0:17:25  iter: 7739  total_loss: 2.925  loss_sem_seg: 1.521  loss_center: 0.6575  loss_offset: 0.7001  time: 0.4653  data_time: 0.0276  lr: 0.00065586  max_mem: 10885M
[12/10 22:43:03 d2.utils.events]:  eta: 0:17:16  iter: 7759  total_loss: 2.84  loss_sem_seg: 1.568  loss_center: 0.5804  loss_offset: 0.6875  time: 0.4653  data_time: 0.0283  lr: 0.00065064  max_mem: 10885M
[12/10 22:43:12 d2.utils.events]:  eta: 0:17:07  iter: 7779  total_loss: 3.09  loss_sem_seg: 1.463  loss_center: 0.6926  loss_offset: 0.8207  time: 0.4653  data_time: 0.0261  lr: 0.00064541  max_mem: 10885M
[12/10 22:43:21 d2.utils.events]:  eta: 0:16:58  iter: 7799  total_loss: 2.885  loss_sem_seg: 1.423  loss_center: 0.5762  loss_offset: 0.7829  time: 0.4653  data_time: 0.0261  lr: 0.00064017  max_mem: 10885M
[12/10 22:43:31 d2.utils.events]:  eta: 0:16:49  iter: 7819  total_loss: 3.228  loss_sem_seg: 1.64  loss_center: 0.6113  loss_offset: 0.7766  time: 0.4653  data_time: 0.0267  lr: 0.00063494  max_mem: 10885M
[12/10 22:43:40 d2.utils.events]:  eta: 0:16:40  iter: 7839  total_loss: 3.129  loss_sem_seg: 1.565  loss_center: 0.6832  loss_offset: 0.8148  time: 0.4653  data_time: 0.0265  lr: 0.00062969  max_mem: 10885M
[12/10 22:43:49 d2.utils.events]:  eta: 0:16:30  iter: 7859  total_loss: 2.979  loss_sem_seg: 1.435  loss_center: 0.6428  loss_offset: 0.7736  time: 0.4653  data_time: 0.0246  lr: 0.00062445  max_mem: 10885M
[12/10 22:43:58 d2.utils.events]:  eta: 0:16:20  iter: 7879  total_loss: 3.078  loss_sem_seg: 1.471  loss_center: 0.65  loss_offset: 0.7692  time: 0.4653  data_time: 0.0252  lr: 0.00061919  max_mem: 10885M
[12/10 22:44:08 d2.utils.events]:  eta: 0:16:11  iter: 7899  total_loss: 2.857  loss_sem_seg: 1.352  loss_center: 0.7213  loss_offset: 0.7416  time: 0.4653  data_time: 0.0261  lr: 0.00061394  max_mem: 10885M
[12/10 22:44:17 d2.utils.events]:  eta: 0:16:01  iter: 7919  total_loss: 2.965  loss_sem_seg: 1.513  loss_center: 0.6294  loss_offset: 0.7917  time: 0.4653  data_time: 0.0241  lr: 0.00060867  max_mem: 10885M
[12/10 22:44:26 d2.utils.events]:  eta: 0:15:52  iter: 7939  total_loss: 2.749  loss_sem_seg: 1.365  loss_center: 0.5183  loss_offset: 0.6931  time: 0.4653  data_time: 0.0265  lr: 0.00060341  max_mem: 10885M
[12/10 22:44:35 d2.utils.events]:  eta: 0:15:43  iter: 7959  total_loss: 3.337  loss_sem_seg: 1.755  loss_center: 0.5844  loss_offset: 0.7916  time: 0.4653  data_time: 0.0261  lr: 0.00059813  max_mem: 10885M
[12/10 22:44:45 d2.utils.events]:  eta: 0:15:33  iter: 7979  total_loss: 2.769  loss_sem_seg: 1.328  loss_center: 0.5464  loss_offset: 0.7138  time: 0.4652  data_time: 0.0262  lr: 0.00059286  max_mem: 10885M
[12/10 22:44:54 d2.utils.events]:  eta: 0:15:24  iter: 7999  total_loss: 3.095  loss_sem_seg: 1.649  loss_center: 0.6133  loss_offset: 0.772  time: 0.4652  data_time: 0.0252  lr: 0.00058757  max_mem: 10885M
[12/10 22:45:03 d2.utils.events]:  eta: 0:15:15  iter: 8019  total_loss: 3.051  loss_sem_seg: 1.469  loss_center: 0.6607  loss_offset: 0.8424  time: 0.4652  data_time: 0.0248  lr: 0.00058229  max_mem: 10885M
[12/10 22:45:13 d2.utils.events]:  eta: 0:15:05  iter: 8039  total_loss: 2.854  loss_sem_seg: 1.544  loss_center: 0.575  loss_offset: 0.7946  time: 0.4652  data_time: 0.0260  lr: 0.00057699  max_mem: 10885M
[12/10 22:45:22 d2.utils.events]:  eta: 0:14:56  iter: 8059  total_loss: 2.574  loss_sem_seg: 1.418  loss_center: 0.4926  loss_offset: 0.6879  time: 0.4652  data_time: 0.0263  lr: 0.00057169  max_mem: 10885M
[12/10 22:45:31 d2.utils.events]:  eta: 0:14:47  iter: 8079  total_loss: 2.998  loss_sem_seg: 1.541  loss_center: 0.5821  loss_offset: 0.9341  time: 0.4652  data_time: 0.0261  lr: 0.00056639  max_mem: 10885M
[12/10 22:45:40 d2.utils.events]:  eta: 0:14:38  iter: 8099  total_loss: 3.008  loss_sem_seg: 1.494  loss_center: 0.7421  loss_offset: 0.7426  time: 0.4652  data_time: 0.0259  lr: 0.00056108  max_mem: 10885M
[12/10 22:45:50 d2.utils.events]:  eta: 0:14:29  iter: 8119  total_loss: 3.297  loss_sem_seg: 1.813  loss_center: 0.5651  loss_offset: 0.7474  time: 0.4652  data_time: 0.0262  lr: 0.00055576  max_mem: 10885M
[12/10 22:45:59 d2.utils.events]:  eta: 0:14:19  iter: 8139  total_loss: 2.817  loss_sem_seg: 1.374  loss_center: 0.6116  loss_offset: 0.7607  time: 0.4652  data_time: 0.0244  lr: 0.00055044  max_mem: 10885M
[12/10 22:46:08 d2.utils.events]:  eta: 0:14:10  iter: 8159  total_loss: 2.974  loss_sem_seg: 1.418  loss_center: 0.6541  loss_offset: 0.7176  time: 0.4652  data_time: 0.0272  lr: 0.00054512  max_mem: 10885M
[12/10 22:46:18 d2.utils.events]:  eta: 0:14:01  iter: 8179  total_loss: 3.177  loss_sem_seg: 1.599  loss_center: 0.7388  loss_offset: 0.7552  time: 0.4652  data_time: 0.0253  lr: 0.00053978  max_mem: 10885M
[12/10 22:46:27 d2.utils.events]:  eta: 0:13:52  iter: 8199  total_loss: 2.899  loss_sem_seg: 1.583  loss_center: 0.5954  loss_offset: 0.7435  time: 0.4652  data_time: 0.0266  lr: 0.00053444  max_mem: 10885M
[12/10 22:46:36 d2.utils.events]:  eta: 0:13:42  iter: 8219  total_loss: 3.238  loss_sem_seg: 1.586  loss_center: 0.6126  loss_offset: 0.8209  time: 0.4652  data_time: 0.0264  lr: 0.0005291  max_mem: 10885M
[12/10 22:46:45 d2.utils.events]:  eta: 0:13:33  iter: 8239  total_loss: 3.046  loss_sem_seg: 1.485  loss_center: 0.531  loss_offset: 0.7645  time: 0.4652  data_time: 0.0259  lr: 0.00052375  max_mem: 10885M
[12/10 22:46:55 d2.utils.events]:  eta: 0:13:24  iter: 8259  total_loss: 2.894  loss_sem_seg: 1.355  loss_center: 0.7042  loss_offset: 0.7769  time: 0.4652  data_time: 0.0256  lr: 0.00051839  max_mem: 10885M
[12/10 22:47:04 d2.utils.events]:  eta: 0:13:15  iter: 8279  total_loss: 2.831  loss_sem_seg: 1.529  loss_center: 0.6122  loss_offset: 0.6904  time: 0.4652  data_time: 0.0273  lr: 0.00051303  max_mem: 10885M
[12/10 22:47:13 d2.utils.events]:  eta: 0:13:06  iter: 8299  total_loss: 2.573  loss_sem_seg: 1.368  loss_center: 0.6236  loss_offset: 0.7192  time: 0.4652  data_time: 0.0266  lr: 0.00050766  max_mem: 10885M
[12/10 22:47:23 d2.utils.events]:  eta: 0:12:57  iter: 8319  total_loss: 3.265  loss_sem_seg: 1.678  loss_center: 0.5111  loss_offset: 0.9465  time: 0.4652  data_time: 0.0271  lr: 0.00050229  max_mem: 10885M
[12/10 22:47:32 d2.utils.events]:  eta: 0:12:48  iter: 8339  total_loss: 2.947  loss_sem_seg: 1.41  loss_center: 0.6798  loss_offset: 0.706  time: 0.4652  data_time: 0.0272  lr: 0.0004969  max_mem: 10885M
[12/10 22:47:41 d2.utils.events]:  eta: 0:12:38  iter: 8359  total_loss: 2.998  loss_sem_seg: 1.452  loss_center: 0.5201  loss_offset: 0.7453  time: 0.4652  data_time: 0.0272  lr: 0.00049152  max_mem: 10885M
[12/10 22:47:51 d2.utils.events]:  eta: 0:12:29  iter: 8379  total_loss: 3.151  loss_sem_seg: 1.591  loss_center: 0.6244  loss_offset: 0.8616  time: 0.4652  data_time: 0.0265  lr: 0.00048612  max_mem: 10885M
[12/10 22:48:00 d2.utils.events]:  eta: 0:12:20  iter: 8399  total_loss: 3.175  loss_sem_seg: 1.412  loss_center: 0.6401  loss_offset: 0.836  time: 0.4652  data_time: 0.0256  lr: 0.00048072  max_mem: 10885M
[12/10 22:48:09 d2.utils.events]:  eta: 0:12:11  iter: 8419  total_loss: 3.11  loss_sem_seg: 1.647  loss_center: 0.6796  loss_offset: 0.7299  time: 0.4652  data_time: 0.0278  lr: 0.00047531  max_mem: 10885M
[12/10 22:48:19 d2.utils.events]:  eta: 0:12:02  iter: 8439  total_loss: 2.999  loss_sem_seg: 1.517  loss_center: 0.6281  loss_offset: 0.8656  time: 0.4652  data_time: 0.0253  lr: 0.0004699  max_mem: 10885M
[12/10 22:48:28 d2.utils.events]:  eta: 0:11:52  iter: 8459  total_loss: 2.856  loss_sem_seg: 1.461  loss_center: 0.7062  loss_offset: 0.7338  time: 0.4652  data_time: 0.0247  lr: 0.00046448  max_mem: 10885M
[12/10 22:48:37 d2.utils.events]:  eta: 0:11:43  iter: 8479  total_loss: 2.66  loss_sem_seg: 1.488  loss_center: 0.5094  loss_offset: 0.6991  time: 0.4652  data_time: 0.0264  lr: 0.00045905  max_mem: 10885M
[12/10 22:48:46 d2.utils.events]:  eta: 0:11:34  iter: 8499  total_loss: 3.066  loss_sem_seg: 1.471  loss_center: 0.6348  loss_offset: 0.7615  time: 0.4652  data_time: 0.0270  lr: 0.00045361  max_mem: 10885M
[12/10 22:48:56 d2.utils.events]:  eta: 0:11:25  iter: 8519  total_loss: 2.665  loss_sem_seg: 1.208  loss_center: 0.5863  loss_offset: 0.785  time: 0.4652  data_time: 0.0259  lr: 0.00044817  max_mem: 10885M
[12/10 22:49:05 d2.utils.events]:  eta: 0:11:15  iter: 8539  total_loss: 3.135  loss_sem_seg: 1.57  loss_center: 0.6352  loss_offset: 0.8531  time: 0.4652  data_time: 0.0258  lr: 0.00044272  max_mem: 10885M
[12/10 22:49:14 d2.utils.events]:  eta: 0:11:06  iter: 8559  total_loss: 3.401  loss_sem_seg: 1.667  loss_center: 0.8246  loss_offset: 0.7972  time: 0.4652  data_time: 0.0269  lr: 0.00043726  max_mem: 10885M
[12/10 22:49:24 d2.utils.events]:  eta: 0:10:57  iter: 8579  total_loss: 2.897  loss_sem_seg: 1.529  loss_center: 0.6232  loss_offset: 0.7992  time: 0.4652  data_time: 0.0258  lr: 0.00043179  max_mem: 10885M
[12/10 22:49:33 d2.utils.events]:  eta: 0:10:48  iter: 8599  total_loss: 3.056  loss_sem_seg: 1.59  loss_center: 0.6455  loss_offset: 0.8457  time: 0.4652  data_time: 0.0252  lr: 0.00042632  max_mem: 10885M
[12/10 22:49:42 d2.utils.events]:  eta: 0:10:38  iter: 8619  total_loss: 2.718  loss_sem_seg: 1.36  loss_center: 0.5863  loss_offset: 0.7096  time: 0.4652  data_time: 0.0269  lr: 0.00042084  max_mem: 10885M
[12/10 22:49:51 d2.utils.events]:  eta: 0:10:29  iter: 8639  total_loss: 2.774  loss_sem_seg: 1.407  loss_center: 0.6061  loss_offset: 0.8456  time: 0.4651  data_time: 0.0260  lr: 0.00041535  max_mem: 10885M
[12/10 22:50:01 d2.utils.events]:  eta: 0:10:20  iter: 8659  total_loss: 3.166  loss_sem_seg: 1.574  loss_center: 0.6613  loss_offset: 0.7428  time: 0.4651  data_time: 0.0263  lr: 0.00040985  max_mem: 10885M
[12/10 22:50:10 d2.utils.events]:  eta: 0:10:11  iter: 8679  total_loss: 3.028  loss_sem_seg: 1.71  loss_center: 0.5235  loss_offset: 0.759  time: 0.4651  data_time: 0.0262  lr: 0.00040435  max_mem: 10885M
[12/10 22:50:19 d2.utils.events]:  eta: 0:10:01  iter: 8699  total_loss: 2.779  loss_sem_seg: 1.381  loss_center: 0.6479  loss_offset: 0.6985  time: 0.4651  data_time: 0.0249  lr: 0.00039883  max_mem: 10885M
[12/10 22:50:28 d2.utils.events]:  eta: 0:09:52  iter: 8719  total_loss: 2.969  loss_sem_seg: 1.506  loss_center: 0.7378  loss_offset: 0.7647  time: 0.4651  data_time: 0.0261  lr: 0.00039331  max_mem: 10885M
[12/10 22:50:38 d2.utils.events]:  eta: 0:09:42  iter: 8739  total_loss: 2.877  loss_sem_seg: 1.389  loss_center: 0.5859  loss_offset: 0.7799  time: 0.4651  data_time: 0.0275  lr: 0.00038778  max_mem: 10885M
[12/10 22:50:47 d2.utils.events]:  eta: 0:09:33  iter: 8759  total_loss: 2.554  loss_sem_seg: 1.443  loss_center: 0.537  loss_offset: 0.6301  time: 0.4651  data_time: 0.0257  lr: 0.00038224  max_mem: 10885M
[12/10 22:50:56 d2.utils.events]:  eta: 0:09:24  iter: 8779  total_loss: 2.925  loss_sem_seg: 1.62  loss_center: 0.6115  loss_offset: 0.6596  time: 0.4651  data_time: 0.0264  lr: 0.00037669  max_mem: 10885M
[12/10 22:51:05 d2.utils.events]:  eta: 0:09:14  iter: 8799  total_loss: 2.793  loss_sem_seg: 1.318  loss_center: 0.4911  loss_offset: 0.6841  time: 0.4651  data_time: 0.0247  lr: 0.00037113  max_mem: 10885M
[12/10 22:51:15 d2.utils.events]:  eta: 0:09:05  iter: 8819  total_loss: 3.036  loss_sem_seg: 1.574  loss_center: 0.5619  loss_offset: 0.8493  time: 0.4651  data_time: 0.0257  lr: 0.00036557  max_mem: 10885M
[12/10 22:51:24 d2.utils.events]:  eta: 0:08:56  iter: 8839  total_loss: 2.938  loss_sem_seg: 1.594  loss_center: 0.5376  loss_offset: 0.8008  time: 0.4651  data_time: 0.0263  lr: 0.00035999  max_mem: 10885M
[12/10 22:51:33 d2.utils.events]:  eta: 0:08:47  iter: 8859  total_loss: 3.004  loss_sem_seg: 1.497  loss_center: 0.6792  loss_offset: 0.7172  time: 0.4651  data_time: 0.0260  lr: 0.0003544  max_mem: 10885M
[12/10 22:51:43 d2.utils.events]:  eta: 0:08:38  iter: 8879  total_loss: 3.037  loss_sem_seg: 1.527  loss_center: 0.502  loss_offset: 0.7643  time: 0.4651  data_time: 0.0250  lr: 0.00034881  max_mem: 10885M
[12/10 22:51:52 d2.utils.events]:  eta: 0:08:28  iter: 8899  total_loss: 2.896  loss_sem_seg: 1.534  loss_center: 0.5887  loss_offset: 0.7187  time: 0.4651  data_time: 0.0267  lr: 0.0003432  max_mem: 10885M
[12/10 22:52:01 d2.utils.events]:  eta: 0:08:19  iter: 8919  total_loss: 2.999  loss_sem_seg: 1.487  loss_center: 0.5378  loss_offset: 0.7802  time: 0.4651  data_time: 0.0255  lr: 0.00033758  max_mem: 10885M
[12/10 22:52:10 d2.utils.events]:  eta: 0:08:10  iter: 8939  total_loss: 2.782  loss_sem_seg: 1.228  loss_center: 0.5665  loss_offset: 0.6945  time: 0.4651  data_time: 0.0248  lr: 0.00033196  max_mem: 10885M
[12/10 22:52:20 d2.utils.events]:  eta: 0:08:01  iter: 8959  total_loss: 2.734  loss_sem_seg: 1.428  loss_center: 0.4772  loss_offset: 0.7817  time: 0.4651  data_time: 0.0260  lr: 0.00032632  max_mem: 10885M
[12/10 22:52:29 d2.utils.events]:  eta: 0:07:51  iter: 8979  total_loss: 2.767  loss_sem_seg: 1.422  loss_center: 0.6029  loss_offset: 0.6509  time: 0.4651  data_time: 0.0277  lr: 0.00032067  max_mem: 10885M
[12/10 22:52:38 d2.utils.events]:  eta: 0:07:42  iter: 8999  total_loss: 3.265  loss_sem_seg: 1.481  loss_center: 0.7042  loss_offset: 0.7571  time: 0.4651  data_time: 0.0278  lr: 0.00031501  max_mem: 10885M
[12/10 22:52:48 d2.utils.events]:  eta: 0:07:33  iter: 9019  total_loss: 2.636  loss_sem_seg: 1.3  loss_center: 0.5692  loss_offset: 0.7305  time: 0.4651  data_time: 0.0277  lr: 0.00030934  max_mem: 10885M
[12/10 22:52:57 d2.utils.events]:  eta: 0:07:24  iter: 9039  total_loss: 3.019  loss_sem_seg: 1.415  loss_center: 0.6735  loss_offset: 0.6991  time: 0.4651  data_time: 0.0253  lr: 0.00030366  max_mem: 10885M
[12/10 22:53:06 d2.utils.events]:  eta: 0:07:14  iter: 9059  total_loss: 3.054  loss_sem_seg: 1.638  loss_center: 0.5583  loss_offset: 0.7911  time: 0.4651  data_time: 0.0281  lr: 0.00029797  max_mem: 10885M
[12/10 22:53:16 d2.utils.events]:  eta: 0:07:05  iter: 9079  total_loss: 3.038  loss_sem_seg: 1.508  loss_center: 0.6369  loss_offset: 0.7533  time: 0.4651  data_time: 0.0275  lr: 0.00029226  max_mem: 10885M
[12/10 22:53:25 d2.utils.events]:  eta: 0:06:56  iter: 9099  total_loss: 2.836  loss_sem_seg: 1.366  loss_center: 0.6817  loss_offset: 0.683  time: 0.4651  data_time: 0.0274  lr: 0.00028654  max_mem: 10885M
[12/10 22:53:34 d2.utils.events]:  eta: 0:06:47  iter: 9119  total_loss: 2.915  loss_sem_seg: 1.475  loss_center: 0.6281  loss_offset: 0.7275  time: 0.4651  data_time: 0.0258  lr: 0.00028081  max_mem: 10885M
[12/10 22:53:44 d2.utils.events]:  eta: 0:06:38  iter: 9139  total_loss: 2.689  loss_sem_seg: 1.264  loss_center: 0.5008  loss_offset: 0.738  time: 0.4651  data_time: 0.0255  lr: 0.00027507  max_mem: 10885M
[12/10 22:53:53 d2.utils.events]:  eta: 0:06:28  iter: 9159  total_loss: 2.63  loss_sem_seg: 1.448  loss_center: 0.6061  loss_offset: 0.7622  time: 0.4651  data_time: 0.0259  lr: 0.00026931  max_mem: 10885M
[12/10 22:54:02 d2.utils.events]:  eta: 0:06:19  iter: 9179  total_loss: 2.8  loss_sem_seg: 1.515  loss_center: 0.5008  loss_offset: 0.697  time: 0.4651  data_time: 0.0259  lr: 0.00026354  max_mem: 10885M
[12/10 22:54:11 d2.utils.events]:  eta: 0:06:10  iter: 9199  total_loss: 2.416  loss_sem_seg: 1.299  loss_center: 0.5474  loss_offset: 0.6845  time: 0.4651  data_time: 0.0264  lr: 0.00025776  max_mem: 10885M
[12/10 22:54:21 d2.utils.events]:  eta: 0:06:01  iter: 9219  total_loss: 2.746  loss_sem_seg: 1.442  loss_center: 0.4803  loss_offset: 0.7542  time: 0.4651  data_time: 0.0261  lr: 0.00025196  max_mem: 10885M
[12/10 22:54:30 d2.utils.events]:  eta: 0:05:51  iter: 9239  total_loss: 2.911  loss_sem_seg: 1.638  loss_center: 0.7539  loss_offset: 0.7009  time: 0.4651  data_time: 0.0258  lr: 0.00024614  max_mem: 10885M
[12/10 22:54:39 d2.utils.events]:  eta: 0:05:42  iter: 9259  total_loss: 2.728  loss_sem_seg: 1.329  loss_center: 0.6241  loss_offset: 0.7184  time: 0.4651  data_time: 0.0268  lr: 0.00024031  max_mem: 10885M
[12/10 22:54:49 d2.utils.events]:  eta: 0:05:33  iter: 9279  total_loss: 2.746  loss_sem_seg: 1.45  loss_center: 0.6352  loss_offset: 0.7638  time: 0.4651  data_time: 0.0269  lr: 0.00023447  max_mem: 10885M
[12/10 22:54:58 d2.utils.events]:  eta: 0:05:23  iter: 9299  total_loss: 2.569  loss_sem_seg: 1.326  loss_center: 0.5007  loss_offset: 0.7276  time: 0.4651  data_time: 0.0269  lr: 0.00022861  max_mem: 10885M
[12/10 22:55:07 d2.utils.events]:  eta: 0:05:14  iter: 9319  total_loss: 2.643  loss_sem_seg: 1.361  loss_center: 0.6082  loss_offset: 0.7357  time: 0.4651  data_time: 0.0268  lr: 0.00022273  max_mem: 10885M
[12/10 22:55:16 d2.utils.events]:  eta: 0:05:05  iter: 9339  total_loss: 2.848  loss_sem_seg: 1.38  loss_center: 0.6119  loss_offset: 0.8489  time: 0.4651  data_time: 0.0248  lr: 0.00021683  max_mem: 10885M
[12/10 22:55:26 d2.utils.events]:  eta: 0:04:56  iter: 9359  total_loss: 2.85  loss_sem_seg: 1.661  loss_center: 0.5667  loss_offset: 0.8009  time: 0.4651  data_time: 0.0295  lr: 0.00021092  max_mem: 10885M
[12/10 22:55:35 d2.utils.events]:  eta: 0:04:46  iter: 9379  total_loss: 2.898  loss_sem_seg: 1.531  loss_center: 0.589  loss_offset: 0.7104  time: 0.4651  data_time: 0.0268  lr: 0.00020499  max_mem: 10885M
[12/10 22:55:44 d2.utils.events]:  eta: 0:04:37  iter: 9399  total_loss: 3.004  loss_sem_seg: 1.496  loss_center: 0.4791  loss_offset: 0.7282  time: 0.4651  data_time: 0.0248  lr: 0.00019903  max_mem: 10885M
[12/10 22:55:54 d2.utils.events]:  eta: 0:04:28  iter: 9419  total_loss: 2.687  loss_sem_seg: 1.346  loss_center: 0.5065  loss_offset: 0.6805  time: 0.4651  data_time: 0.0276  lr: 0.00019306  max_mem: 10885M
[12/10 22:56:03 d2.utils.events]:  eta: 0:04:19  iter: 9439  total_loss: 2.653  loss_sem_seg: 1.343  loss_center: 0.4966  loss_offset: 0.6791  time: 0.4651  data_time: 0.0265  lr: 0.00018707  max_mem: 10885M
[12/10 22:56:12 d2.utils.events]:  eta: 0:04:09  iter: 9459  total_loss: 2.945  loss_sem_seg: 1.458  loss_center: 0.5464  loss_offset: 0.8035  time: 0.4651  data_time: 0.0275  lr: 0.00018106  max_mem: 10885M
[12/10 22:56:21 d2.utils.events]:  eta: 0:04:00  iter: 9479  total_loss: 2.948  loss_sem_seg: 1.469  loss_center: 0.6241  loss_offset: 0.7156  time: 0.4651  data_time: 0.0249  lr: 0.00017502  max_mem: 10885M
[12/10 22:56:31 d2.utils.events]:  eta: 0:03:51  iter: 9499  total_loss: 2.898  loss_sem_seg: 1.495  loss_center: 0.67  loss_offset: 0.7412  time: 0.4650  data_time: 0.0259  lr: 0.00016896  max_mem: 10885M
[12/10 22:56:40 d2.utils.events]:  eta: 0:03:42  iter: 9519  total_loss: 2.546  loss_sem_seg: 1.324  loss_center: 0.5731  loss_offset: 0.6237  time: 0.4650  data_time: 0.0255  lr: 0.00016288  max_mem: 10885M
[12/10 22:56:49 d2.utils.events]:  eta: 0:03:32  iter: 9539  total_loss: 2.895  loss_sem_seg: 1.488  loss_center: 0.5888  loss_offset: 0.7722  time: 0.4650  data_time: 0.0257  lr: 0.00015677  max_mem: 10885M
[12/10 22:56:59 d2.utils.events]:  eta: 0:03:23  iter: 9559  total_loss: 3.038  loss_sem_seg: 1.358  loss_center: 0.6431  loss_offset: 0.8533  time: 0.4650  data_time: 0.0269  lr: 0.00015064  max_mem: 10885M
[12/10 22:57:08 d2.utils.events]:  eta: 0:03:14  iter: 9579  total_loss: 2.831  loss_sem_seg: 1.431  loss_center: 0.7087  loss_offset: 0.796  time: 0.4650  data_time: 0.0258  lr: 0.00014448  max_mem: 10885M
[12/10 22:57:17 d2.utils.events]:  eta: 0:03:05  iter: 9599  total_loss: 2.915  loss_sem_seg: 1.461  loss_center: 0.4971  loss_offset: 0.805  time: 0.4650  data_time: 0.0272  lr: 0.00013828  max_mem: 10885M
[12/10 22:57:26 d2.utils.events]:  eta: 0:02:55  iter: 9619  total_loss: 2.809  loss_sem_seg: 1.458  loss_center: 0.6057  loss_offset: 0.6358  time: 0.4650  data_time: 0.0270  lr: 0.00013206  max_mem: 10885M
[12/10 22:57:36 d2.utils.events]:  eta: 0:02:46  iter: 9639  total_loss: 2.688  loss_sem_seg: 1.349  loss_center: 0.5255  loss_offset: 0.8178  time: 0.4650  data_time: 0.0259  lr: 0.0001258  max_mem: 10885M
[12/10 22:57:45 d2.utils.events]:  eta: 0:02:37  iter: 9659  total_loss: 2.969  loss_sem_seg: 1.468  loss_center: 0.626  loss_offset: 0.7509  time: 0.4650  data_time: 0.0261  lr: 0.00011951  max_mem: 10885M
[12/10 22:57:54 d2.utils.events]:  eta: 0:02:28  iter: 9679  total_loss: 2.685  loss_sem_seg: 1.402  loss_center: 0.5943  loss_offset: 0.7367  time: 0.4650  data_time: 0.0267  lr: 0.00011319  max_mem: 10885M
[12/10 22:58:04 d2.utils.events]:  eta: 0:02:18  iter: 9699  total_loss: 2.963  loss_sem_seg: 1.454  loss_center: 0.5338  loss_offset: 0.7923  time: 0.4650  data_time: 0.0277  lr: 0.00010682  max_mem: 10885M
[12/10 22:58:13 d2.utils.events]:  eta: 0:02:09  iter: 9719  total_loss: 2.793  loss_sem_seg: 1.31  loss_center: 0.6487  loss_offset: 0.7743  time: 0.4650  data_time: 0.0262  lr: 0.00010041  max_mem: 10885M
[12/10 22:58:22 d2.utils.events]:  eta: 0:02:00  iter: 9739  total_loss: 2.78  loss_sem_seg: 1.357  loss_center: 0.6744  loss_offset: 0.7334  time: 0.4650  data_time: 0.0251  lr: 9.3954e-05  max_mem: 10885M
[12/10 22:58:31 d2.utils.events]:  eta: 0:01:51  iter: 9759  total_loss: 2.782  loss_sem_seg: 1.346  loss_center: 0.6241  loss_offset: 0.6825  time: 0.4650  data_time: 0.0261  lr: 8.7449e-05  max_mem: 10885M
[12/10 22:58:41 d2.utils.events]:  eta: 0:01:41  iter: 9779  total_loss: 2.906  loss_sem_seg: 1.437  loss_center: 0.6218  loss_offset: 0.762  time: 0.4650  data_time: 0.0261  lr: 8.089e-05  max_mem: 10885M
[12/10 22:58:50 d2.utils.events]:  eta: 0:01:32  iter: 9799  total_loss: 2.86  loss_sem_seg: 1.357  loss_center: 0.5707  loss_offset: 0.7617  time: 0.4650  data_time: 0.0273  lr: 7.4271e-05  max_mem: 10885M
[12/10 22:58:59 d2.utils.events]:  eta: 0:01:23  iter: 9819  total_loss: 2.205  loss_sem_seg: 1.105  loss_center: 0.5173  loss_offset: 0.694  time: 0.4650  data_time: 0.0259  lr: 6.7585e-05  max_mem: 10885M
[12/10 22:59:09 d2.utils.events]:  eta: 0:01:14  iter: 9839  total_loss: 2.814  loss_sem_seg: 1.399  loss_center: 0.6348  loss_offset: 0.7304  time: 0.4650  data_time: 0.0260  lr: 6.0825e-05  max_mem: 10885M
[12/10 22:59:18 d2.utils.events]:  eta: 0:01:04  iter: 9859  total_loss: 2.856  loss_sem_seg: 1.313  loss_center: 0.6982  loss_offset: 0.7914  time: 0.4650  data_time: 0.0276  lr: 5.3981e-05  max_mem: 10885M
[12/10 22:59:27 d2.utils.events]:  eta: 0:00:55  iter: 9879  total_loss: 2.722  loss_sem_seg: 1.345  loss_center: 0.5395  loss_offset: 0.6313  time: 0.4650  data_time: 0.0285  lr: 4.7038e-05  max_mem: 10885M
[12/10 22:59:37 d2.utils.events]:  eta: 0:00:46  iter: 9899  total_loss: 2.918  loss_sem_seg: 1.525  loss_center: 0.4448  loss_offset: 0.7628  time: 0.4650  data_time: 0.0262  lr: 3.9979e-05  max_mem: 10885M
[12/10 22:59:46 d2.utils.events]:  eta: 0:00:37  iter: 9919  total_loss: 2.755  loss_sem_seg: 1.458  loss_center: 0.5347  loss_offset: 0.6844  time: 0.4650  data_time: 0.0267  lr: 3.2778e-05  max_mem: 10885M
[12/10 22:59:55 d2.utils.events]:  eta: 0:00:27  iter: 9939  total_loss: 3.158  loss_sem_seg: 1.254  loss_center: 0.627  loss_offset: 0.8069  time: 0.4650  data_time: 0.0260  lr: 2.5394e-05  max_mem: 10885M
[12/10 23:00:04 d2.utils.events]:  eta: 0:00:18  iter: 9959  total_loss: 2.876  loss_sem_seg: 1.71  loss_center: 0.5212  loss_offset: 0.7984  time: 0.4650  data_time: 0.0258  lr: 1.776e-05  max_mem: 10885M
[12/10 23:00:14 d2.utils.events]:  eta: 0:00:09  iter: 9979  total_loss: 2.972  loss_sem_seg: 1.632  loss_center: 0.539  loss_offset: 0.7073  time: 0.4650  data_time: 0.0272  lr: 9.7261e-06  max_mem: 10885M
[12/10 23:00:23 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0009999.pth
[12/10 23:00:25 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_final.pth
[12/10 23:00:26 d2.utils.events]:  eta: 0:00:00  iter: 9999  total_loss: 2.928  loss_sem_seg: 1.481  loss_center: 0.5436  loss_offset: 0.793  time: 0.4650  data_time: 0.0273  lr: 6.2797e-07  max_mem: 10885M
[12/10 23:00:27 d2.engine.hooks]: Overall training speed: 9998 iterations in 1:17:29 (0.4650 s / it)
[12/10 23:00:27 d2.engine.hooks]: Total training time: 1:17:39 (0:00:09 on hooks)
[12/10 23:00:27 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[12/10 23:00:27 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/10 23:00:27 d2.data.common]: Serializing 5000 elements to byte tensors and concatenating them all ...
[12/10 23:00:27 d2.data.common]: Serialized dataset takes 3.40 MiB
/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 10 worker processes in total. Our suggested max number of worker in current system is 8, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  cpuset_checked))
[12/10 23:00:28 d2.evaluation.evaluator]: Start inference on 5000 batches
/usr/local/lib/python3.7/dist-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
[12/10 23:00:30 d2.evaluation.evaluator]: Inference done 11/5000. Dataloading: 0.0003 s/iter. Inference: 0.0647 s/iter. Eval: 0.0400 s/iter. Total: 0.1050 s/iter. ETA=0:08:43
[12/10 23:00:35 d2.evaluation.evaluator]: Inference done 65/5000. Dataloading: 0.0010 s/iter. Inference: 0.0608 s/iter. Eval: 0.0324 s/iter. Total: 0.0943 s/iter. ETA=0:07:45
[12/10 23:00:40 d2.evaluation.evaluator]: Inference done 115/5000. Dataloading: 0.0011 s/iter. Inference: 0.0615 s/iter. Eval: 0.0344 s/iter. Total: 0.0971 s/iter. ETA=0:07:54
[12/10 23:00:45 d2.evaluation.evaluator]: Inference done 165/5000. Dataloading: 0.0011 s/iter. Inference: 0.0622 s/iter. Eval: 0.0349 s/iter. Total: 0.0982 s/iter. ETA=0:07:54
[12/10 23:00:50 d2.evaluation.evaluator]: Inference done 216/5000. Dataloading: 0.0011 s/iter. Inference: 0.0620 s/iter. Eval: 0.0352 s/iter. Total: 0.0984 s/iter. ETA=0:07:50
[12/10 23:00:55 d2.evaluation.evaluator]: Inference done 269/5000. Dataloading: 0.0011 s/iter. Inference: 0.0617 s/iter. Eval: 0.0349 s/iter. Total: 0.0978 s/iter. ETA=0:07:42
[12/10 23:01:00 d2.evaluation.evaluator]: Inference done 320/5000. Dataloading: 0.0011 s/iter. Inference: 0.0617 s/iter. Eval: 0.0351 s/iter. Total: 0.0980 s/iter. ETA=0:07:38
[12/10 23:01:05 d2.evaluation.evaluator]: Inference done 370/5000. Dataloading: 0.0011 s/iter. Inference: 0.0620 s/iter. Eval: 0.0353 s/iter. Total: 0.0984 s/iter. ETA=0:07:35
[12/10 23:01:10 d2.evaluation.evaluator]: Inference done 423/5000. Dataloading: 0.0011 s/iter. Inference: 0.0617 s/iter. Eval: 0.0350 s/iter. Total: 0.0980 s/iter. ETA=0:07:28
[12/10 23:01:15 d2.evaluation.evaluator]: Inference done 478/5000. Dataloading: 0.0011 s/iter. Inference: 0.0614 s/iter. Eval: 0.0347 s/iter. Total: 0.0973 s/iter. ETA=0:07:19
[12/10 23:01:20 d2.evaluation.evaluator]: Inference done 529/5000. Dataloading: 0.0011 s/iter. Inference: 0.0614 s/iter. Eval: 0.0347 s/iter. Total: 0.0974 s/iter. ETA=0:07:15
[12/10 23:01:26 d2.evaluation.evaluator]: Inference done 580/5000. Dataloading: 0.0011 s/iter. Inference: 0.0616 s/iter. Eval: 0.0348 s/iter. Total: 0.0976 s/iter. ETA=0:07:11
[12/10 23:01:31 d2.evaluation.evaluator]: Inference done 632/5000. Dataloading: 0.0011 s/iter. Inference: 0.0615 s/iter. Eval: 0.0348 s/iter. Total: 0.0976 s/iter. ETA=0:07:06
[12/10 23:01:36 d2.evaluation.evaluator]: Inference done 681/5000. Dataloading: 0.0011 s/iter. Inference: 0.0617 s/iter. Eval: 0.0350 s/iter. Total: 0.0979 s/iter. ETA=0:07:02
[12/10 23:01:41 d2.evaluation.evaluator]: Inference done 732/5000. Dataloading: 0.0011 s/iter. Inference: 0.0617 s/iter. Eval: 0.0351 s/iter. Total: 0.0980 s/iter. ETA=0:06:58
[12/10 23:01:46 d2.evaluation.evaluator]: Inference done 784/5000. Dataloading: 0.0011 s/iter. Inference: 0.0616 s/iter. Eval: 0.0351 s/iter. Total: 0.0979 s/iter. ETA=0:06:52
[12/10 23:01:51 d2.evaluation.evaluator]: Inference done 837/5000. Dataloading: 0.0012 s/iter. Inference: 0.0615 s/iter. Eval: 0.0350 s/iter. Total: 0.0977 s/iter. ETA=0:06:46
[12/10 23:01:56 d2.evaluation.evaluator]: Inference done 890/5000. Dataloading: 0.0011 s/iter. Inference: 0.0614 s/iter. Eval: 0.0349 s/iter. Total: 0.0976 s/iter. ETA=0:06:40
[12/10 23:02:01 d2.evaluation.evaluator]: Inference done 944/5000. Dataloading: 0.0011 s/iter. Inference: 0.0612 s/iter. Eval: 0.0348 s/iter. Total: 0.0973 s/iter. ETA=0:06:34
[12/10 23:02:06 d2.evaluation.evaluator]: Inference done 995/5000. Dataloading: 0.0012 s/iter. Inference: 0.0613 s/iter. Eval: 0.0349 s/iter. Total: 0.0974 s/iter. ETA=0:06:29
[12/10 23:02:11 d2.evaluation.evaluator]: Inference done 1046/5000. Dataloading: 0.0012 s/iter. Inference: 0.0614 s/iter. Eval: 0.0349 s/iter. Total: 0.0975 s/iter. ETA=0:06:25
[12/10 23:02:16 d2.evaluation.evaluator]: Inference done 1099/5000. Dataloading: 0.0012 s/iter. Inference: 0.0613 s/iter. Eval: 0.0348 s/iter. Total: 0.0974 s/iter. ETA=0:06:19
[12/10 23:02:21 d2.evaluation.evaluator]: Inference done 1151/5000. Dataloading: 0.0012 s/iter. Inference: 0.0613 s/iter. Eval: 0.0348 s/iter. Total: 0.0973 s/iter. ETA=0:06:14
[12/10 23:02:26 d2.evaluation.evaluator]: Inference done 1203/5000. Dataloading: 0.0012 s/iter. Inference: 0.0613 s/iter. Eval: 0.0348 s/iter. Total: 0.0973 s/iter. ETA=0:06:09
[12/10 23:02:31 d2.evaluation.evaluator]: Inference done 1251/5000. Dataloading: 0.0012 s/iter. Inference: 0.0615 s/iter. Eval: 0.0349 s/iter. Total: 0.0976 s/iter. ETA=0:06:05
[12/10 23:02:36 d2.evaluation.evaluator]: Inference done 1302/5000. Dataloading: 0.0012 s/iter. Inference: 0.0615 s/iter. Eval: 0.0349 s/iter. Total: 0.0977 s/iter. ETA=0:06:01
[12/10 23:02:41 d2.evaluation.evaluator]: Inference done 1354/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0349 s/iter. Total: 0.0977 s/iter. ETA=0:05:56
[12/10 23:02:46 d2.evaluation.evaluator]: Inference done 1408/5000. Dataloading: 0.0012 s/iter. Inference: 0.0615 s/iter. Eval: 0.0348 s/iter. Total: 0.0975 s/iter. ETA=0:05:50
[12/10 23:02:51 d2.evaluation.evaluator]: Inference done 1460/5000. Dataloading: 0.0012 s/iter. Inference: 0.0614 s/iter. Eval: 0.0349 s/iter. Total: 0.0975 s/iter. ETA=0:05:45
[12/10 23:02:56 d2.evaluation.evaluator]: Inference done 1509/5000. Dataloading: 0.0012 s/iter. Inference: 0.0615 s/iter. Eval: 0.0350 s/iter. Total: 0.0977 s/iter. ETA=0:05:40
[12/10 23:03:01 d2.evaluation.evaluator]: Inference done 1559/5000. Dataloading: 0.0012 s/iter. Inference: 0.0615 s/iter. Eval: 0.0350 s/iter. Total: 0.0977 s/iter. ETA=0:05:36
[12/10 23:03:06 d2.evaluation.evaluator]: Inference done 1608/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0351 s/iter. Total: 0.0979 s/iter. ETA=0:05:31
[12/10 23:03:11 d2.evaluation.evaluator]: Inference done 1661/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0350 s/iter. Total: 0.0978 s/iter. ETA=0:05:26
[12/10 23:03:16 d2.evaluation.evaluator]: Inference done 1712/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0350 s/iter. Total: 0.0978 s/iter. ETA=0:05:21
[12/10 23:03:21 d2.evaluation.evaluator]: Inference done 1763/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0350 s/iter. Total: 0.0978 s/iter. ETA=0:05:16
[12/10 23:03:26 d2.evaluation.evaluator]: Inference done 1813/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0351 s/iter. Total: 0.0979 s/iter. ETA=0:05:12
[12/10 23:03:31 d2.evaluation.evaluator]: Inference done 1865/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0351 s/iter. Total: 0.0979 s/iter. ETA=0:05:06
[12/10 23:03:36 d2.evaluation.evaluator]: Inference done 1915/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0351 s/iter. Total: 0.0980 s/iter. ETA=0:05:02
[12/10 23:03:41 d2.evaluation.evaluator]: Inference done 1968/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0351 s/iter. Total: 0.0979 s/iter. ETA=0:04:56
[12/10 23:03:47 d2.evaluation.evaluator]: Inference done 2018/5000. Dataloading: 0.0012 s/iter. Inference: 0.0617 s/iter. Eval: 0.0351 s/iter. Total: 0.0980 s/iter. ETA=0:04:52
[12/10 23:03:52 d2.evaluation.evaluator]: Inference done 2070/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0351 s/iter. Total: 0.0979 s/iter. ETA=0:04:46
[12/10 23:03:57 d2.evaluation.evaluator]: Inference done 2122/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0350 s/iter. Total: 0.0979 s/iter. ETA=0:04:41
[12/10 23:04:02 d2.evaluation.evaluator]: Inference done 2173/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0351 s/iter. Total: 0.0979 s/iter. ETA=0:04:36
[12/10 23:04:07 d2.evaluation.evaluator]: Inference done 2225/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0350 s/iter. Total: 0.0979 s/iter. ETA=0:04:31
[12/10 23:04:12 d2.evaluation.evaluator]: Inference done 2279/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0350 s/iter. Total: 0.0978 s/iter. ETA=0:04:26
[12/10 23:04:17 d2.evaluation.evaluator]: Inference done 2332/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0350 s/iter. Total: 0.0977 s/iter. ETA=0:04:20
[12/10 23:04:22 d2.evaluation.evaluator]: Inference done 2385/5000. Dataloading: 0.0012 s/iter. Inference: 0.0615 s/iter. Eval: 0.0349 s/iter. Total: 0.0977 s/iter. ETA=0:04:15
[12/10 23:04:27 d2.evaluation.evaluator]: Inference done 2435/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0350 s/iter. Total: 0.0978 s/iter. ETA=0:04:10
[12/10 23:04:32 d2.evaluation.evaluator]: Inference done 2487/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0350 s/iter. Total: 0.0977 s/iter. ETA=0:04:05
[12/10 23:04:37 d2.evaluation.evaluator]: Inference done 2539/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0350 s/iter. Total: 0.0977 s/iter. ETA=0:04:00
[12/10 23:04:42 d2.evaluation.evaluator]: Inference done 2590/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0350 s/iter. Total: 0.0978 s/iter. ETA=0:03:55
[12/10 23:04:47 d2.evaluation.evaluator]: Inference done 2640/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0350 s/iter. Total: 0.0978 s/iter. ETA=0:03:50
[12/10 23:04:52 d2.evaluation.evaluator]: Inference done 2694/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0349 s/iter. Total: 0.0977 s/iter. ETA=0:03:45
[12/10 23:04:57 d2.evaluation.evaluator]: Inference done 2746/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0349 s/iter. Total: 0.0977 s/iter. ETA=0:03:40
[12/10 23:05:02 d2.evaluation.evaluator]: Inference done 2797/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0349 s/iter. Total: 0.0977 s/iter. ETA=0:03:35
[12/10 23:05:07 d2.evaluation.evaluator]: Inference done 2849/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0349 s/iter. Total: 0.0977 s/iter. ETA=0:03:30
[12/10 23:05:12 d2.evaluation.evaluator]: Inference done 2902/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0349 s/iter. Total: 0.0977 s/iter. ETA=0:03:24
[12/10 23:05:17 d2.evaluation.evaluator]: Inference done 2950/5000. Dataloading: 0.0012 s/iter. Inference: 0.0617 s/iter. Eval: 0.0349 s/iter. Total: 0.0978 s/iter. ETA=0:03:20
[12/10 23:05:22 d2.evaluation.evaluator]: Inference done 3003/5000. Dataloading: 0.0012 s/iter. Inference: 0.0617 s/iter. Eval: 0.0349 s/iter. Total: 0.0978 s/iter. ETA=0:03:15
[12/10 23:05:28 d2.evaluation.evaluator]: Inference done 3058/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0348 s/iter. Total: 0.0977 s/iter. ETA=0:03:09
[12/10 23:05:33 d2.evaluation.evaluator]: Inference done 3112/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0348 s/iter. Total: 0.0976 s/iter. ETA=0:03:04
[12/10 23:05:38 d2.evaluation.evaluator]: Inference done 3162/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0348 s/iter. Total: 0.0976 s/iter. ETA=0:02:59
[12/10 23:05:43 d2.evaluation.evaluator]: Inference done 3213/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0348 s/iter. Total: 0.0977 s/iter. ETA=0:02:54
[12/10 23:05:48 d2.evaluation.evaluator]: Inference done 3265/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0348 s/iter. Total: 0.0977 s/iter. ETA=0:02:49
[12/10 23:05:53 d2.evaluation.evaluator]: Inference done 3315/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0349 s/iter. Total: 0.0977 s/iter. ETA=0:02:44
[12/10 23:05:58 d2.evaluation.evaluator]: Inference done 3366/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0349 s/iter. Total: 0.0977 s/iter. ETA=0:02:39
[12/10 23:06:03 d2.evaluation.evaluator]: Inference done 3417/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0349 s/iter. Total: 0.0978 s/iter. ETA=0:02:34
[12/10 23:06:08 d2.evaluation.evaluator]: Inference done 3468/5000. Dataloading: 0.0012 s/iter. Inference: 0.0617 s/iter. Eval: 0.0349 s/iter. Total: 0.0978 s/iter. ETA=0:02:29
[12/10 23:06:13 d2.evaluation.evaluator]: Inference done 3521/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0349 s/iter. Total: 0.0978 s/iter. ETA=0:02:24
[12/10 23:06:18 d2.evaluation.evaluator]: Inference done 3571/5000. Dataloading: 0.0012 s/iter. Inference: 0.0617 s/iter. Eval: 0.0349 s/iter. Total: 0.0978 s/iter. ETA=0:02:19
[12/10 23:06:23 d2.evaluation.evaluator]: Inference done 3622/5000. Dataloading: 0.0012 s/iter. Inference: 0.0617 s/iter. Eval: 0.0349 s/iter. Total: 0.0978 s/iter. ETA=0:02:14
[12/10 23:06:28 d2.evaluation.evaluator]: Inference done 3676/5000. Dataloading: 0.0012 s/iter. Inference: 0.0617 s/iter. Eval: 0.0349 s/iter. Total: 0.0978 s/iter. ETA=0:02:09
[12/10 23:06:33 d2.evaluation.evaluator]: Inference done 3727/5000. Dataloading: 0.0012 s/iter. Inference: 0.0617 s/iter. Eval: 0.0349 s/iter. Total: 0.0978 s/iter. ETA=0:02:04
[12/10 23:06:38 d2.evaluation.evaluator]: Inference done 3777/5000. Dataloading: 0.0012 s/iter. Inference: 0.0617 s/iter. Eval: 0.0349 s/iter. Total: 0.0978 s/iter. ETA=0:01:59
[12/10 23:06:43 d2.evaluation.evaluator]: Inference done 3827/5000. Dataloading: 0.0012 s/iter. Inference: 0.0617 s/iter. Eval: 0.0349 s/iter. Total: 0.0978 s/iter. ETA=0:01:54
[12/10 23:06:48 d2.evaluation.evaluator]: Inference done 3882/5000. Dataloading: 0.0012 s/iter. Inference: 0.0617 s/iter. Eval: 0.0349 s/iter. Total: 0.0978 s/iter. ETA=0:01:49
[12/10 23:06:53 d2.evaluation.evaluator]: Inference done 3935/5000. Dataloading: 0.0012 s/iter. Inference: 0.0617 s/iter. Eval: 0.0348 s/iter. Total: 0.0977 s/iter. ETA=0:01:44
[12/10 23:06:58 d2.evaluation.evaluator]: Inference done 3989/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0348 s/iter. Total: 0.0977 s/iter. ETA=0:01:38
[12/10 23:07:03 d2.evaluation.evaluator]: Inference done 4039/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0348 s/iter. Total: 0.0977 s/iter. ETA=0:01:33
[12/10 23:07:09 d2.evaluation.evaluator]: Inference done 4089/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0349 s/iter. Total: 0.0977 s/iter. ETA=0:01:29
[12/10 23:07:14 d2.evaluation.evaluator]: Inference done 4142/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0349 s/iter. Total: 0.0977 s/iter. ETA=0:01:23
[12/10 23:07:19 d2.evaluation.evaluator]: Inference done 4192/5000. Dataloading: 0.0012 s/iter. Inference: 0.0617 s/iter. Eval: 0.0349 s/iter. Total: 0.0978 s/iter. ETA=0:01:19
[12/10 23:07:24 d2.evaluation.evaluator]: Inference done 4244/5000. Dataloading: 0.0012 s/iter. Inference: 0.0617 s/iter. Eval: 0.0349 s/iter. Total: 0.0978 s/iter. ETA=0:01:13
[12/10 23:07:29 d2.evaluation.evaluator]: Inference done 4295/5000. Dataloading: 0.0012 s/iter. Inference: 0.0617 s/iter. Eval: 0.0349 s/iter. Total: 0.0978 s/iter. ETA=0:01:08
[12/10 23:07:34 d2.evaluation.evaluator]: Inference done 4348/5000. Dataloading: 0.0012 s/iter. Inference: 0.0616 s/iter. Eval: 0.0348 s/iter. Total: 0.0977 s/iter. ETA=0:01:03
[12/10 23:07:39 d2.evaluation.evaluator]: Inference done 4400/5000. Dataloading: 0.0012 s/iter. Inference: 0.0617 s/iter. Eval: 0.0348 s/iter. Total: 0.0977 s/iter. ETA=0:00:58
[12/10 23:07:44 d2.evaluation.evaluator]: Inference done 4451/5000. Dataloading: 0.0012 s/iter. Inference: 0.0617 s/iter. Eval: 0.0348 s/iter. Total: 0.0977 s/iter. ETA=0:00:53
[12/10 23:07:49 d2.evaluation.evaluator]: Inference done 4502/5000. Dataloading: 0.0012 s/iter. Inference: 0.0617 s/iter. Eval: 0.0348 s/iter. Total: 0.0978 s/iter. ETA=0:00:48
[12/10 23:07:54 d2.evaluation.evaluator]: Inference done 4553/5000. Dataloading: 0.0012 s/iter. Inference: 0.0617 s/iter. Eval: 0.0348 s/iter. Total: 0.0978 s/iter. ETA=0:00:43
[12/10 23:07:59 d2.evaluation.evaluator]: Inference done 4605/5000. Dataloading: 0.0012 s/iter. Inference: 0.0617 s/iter. Eval: 0.0348 s/iter. Total: 0.0978 s/iter. ETA=0:00:38
[12/10 23:08:04 d2.evaluation.evaluator]: Inference done 4655/5000. Dataloading: 0.0012 s/iter. Inference: 0.0617 s/iter. Eval: 0.0348 s/iter. Total: 0.0978 s/iter. ETA=0:00:33
[12/10 23:08:09 d2.evaluation.evaluator]: Inference done 4707/5000. Dataloading: 0.0012 s/iter. Inference: 0.0617 s/iter. Eval: 0.0348 s/iter. Total: 0.0978 s/iter. ETA=0:00:28
[12/10 23:08:14 d2.evaluation.evaluator]: Inference done 4760/5000. Dataloading: 0.0012 s/iter. Inference: 0.0617 s/iter. Eval: 0.0348 s/iter. Total: 0.0978 s/iter. ETA=0:00:23
[12/10 23:08:19 d2.evaluation.evaluator]: Inference done 4811/5000. Dataloading: 0.0012 s/iter. Inference: 0.0617 s/iter. Eval: 0.0348 s/iter. Total: 0.0978 s/iter. ETA=0:00:18
[12/10 23:08:24 d2.evaluation.evaluator]: Inference done 4864/5000. Dataloading: 0.0012 s/iter. Inference: 0.0617 s/iter. Eval: 0.0348 s/iter. Total: 0.0977 s/iter. ETA=0:00:13
[12/10 23:08:29 d2.evaluation.evaluator]: Inference done 4915/5000. Dataloading: 0.0012 s/iter. Inference: 0.0617 s/iter. Eval: 0.0348 s/iter. Total: 0.0978 s/iter. ETA=0:00:08
[12/10 23:08:34 d2.evaluation.evaluator]: Inference done 4969/5000. Dataloading: 0.0012 s/iter. Inference: 0.0617 s/iter. Eval: 0.0348 s/iter. Total: 0.0977 s/iter. ETA=0:00:03
[12/10 23:08:38 d2.evaluation.evaluator]: Total inference time: 0:08:08.183733 (0.097734 s / iter per device, on 1 devices)
[12/10 23:08:38 d2.evaluation.evaluator]: Total inference pure compute time: 0:05:08 (0.061690 s / iter per device, on 1 devices)
[12/10 23:08:38 d2.evaluation.panoptic_evaluation]: Writing all panoptic predictions to /tmp/panoptic_evalz5c9urth ...
[12/10 23:09:01 d2.evaluation.panoptic_evaluation]: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 7.250  | 46.056 | 9.733  |      133      |
| Things | 5.340  | 47.882 | 7.247  |      80       |
| Stuff  | 10.132 | 43.300 | 13.485 |      53       |
[12/10 23:09:02 d2.evaluation.coco_evaluation]: Preparing results for COCO format ...
[12/10 23:09:02 d2.evaluation.coco_evaluation]: Saving results to ./output/inference/coco_instances_results.json
[12/10 23:09:02 d2.evaluation.coco_evaluation]: Evaluating predictions with unofficial COCO API...
Loading and preparing results...
DONE (t=0.03s)
creating index...
index created!
[12/10 23:09:02 d2.evaluation.fast_eval_api]: Evaluate annotation type *bbox*
[12/10 23:09:10 d2.evaluation.fast_eval_api]: COCOeval_opt.evaluate() finished in 7.90 seconds.
[12/10 23:09:10 d2.evaluation.fast_eval_api]: Accumulating evaluation results...
[12/10 23:09:11 d2.evaluation.fast_eval_api]: COCOeval_opt.accumulate() finished in 0.64 seconds.
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.016
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.034
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.014
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.001
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.010
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.030
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.028
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.040
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.040
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.002
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.021
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.070
[12/10 23:09:11 d2.evaluation.coco_evaluation]: Evaluation results for bbox: 
|  AP   |  AP50  |  AP75  |  APs  |  APm  |  APl  |
|:-----:|:------:|:------:|:-----:|:-----:|:-----:|
| 1.628 | 3.437  | 1.442  | 0.142 | 1.035 | 3.003 |
[12/10 23:09:11 d2.evaluation.coco_evaluation]: Per-category bbox AP: 
| category      | AP    | category     | AP     | category       | AP     |
|:--------------|:------|:-------------|:-------|:---------------|:-------|
| person        | 7.754 | bicycle      | 0.125  | car            | 2.854  |
| motorcycle    | 1.274 | airplane     | 0.867  | bus            | 12.062 |
| train         | 4.735 | truck        | 0.774  | boat           | 0.183  |
| traffic light | 0.173 | fire hydrant | 0.000  | stop sign      | 14.860 |
| parking meter | 0.000 | bench        | 0.029  | bird           | 0.207  |
| cat           | 3.753 | dog          | 0.504  | horse          | 0.912  |
| sheep         | 1.369 | cow          | 3.317  | elephant       | 6.566  |
| bear          | 5.389 | zebra        | 18.142 | giraffe        | 9.693  |
| backpack      | 0.000 | umbrella     | 0.400  | handbag        | 0.000  |
| tie           | 0.000 | suitcase     | 1.007  | frisbee        | 0.000  |
| skis          | 0.049 | snowboard    | 0.000  | sports ball    | 0.792  |
| kite          | 1.880 | baseball bat | 0.000  | baseball glove | 0.000  |
| skateboard    | 0.139 | surfboard    | 0.761  | tennis racket  | 0.363  |
| bottle        | 0.033 | wine glass   | 0.000  | cup            | 0.031  |
| fork          | 0.000 | knife        | 0.000  | spoon          | 0.000  |
| bowl          | 0.445 | banana       | 0.278  | apple          | 0.396  |
| sandwich      | 0.110 | orange       | 0.620  | broccoli       | 0.005  |
| carrot        | 0.406 | hot dog      | 0.000  | pizza          | 1.330  |
| donut         | 0.000 | cake         | 0.000  | chair          | 0.484  |
| couch         | 0.516 | potted plant | 0.092  | bed            | 3.412  |
| dining table  | 1.379 | toilet       | 8.942  | tv             | 5.861  |
| laptop        | 0.642 | mouse        | 0.000  | remote         | 0.000  |
| keyboard      | 0.248 | cell phone   | 0.008  | microwave      | 0.000  |
| oven          | 1.096 | toaster      | 0.000  | sink           | 0.966  |
| refrigerator  | 0.108 | book         | 0.014  | clock          | 1.345  |
| vase          | 0.000 | scissors     | 0.000  | teddy bear     | 0.515  |
| hair drier    | 0.000 | toothbrush   | 0.000  |                |        |
Loading and preparing results...
DONE (t=0.45s)
creating index...
index created!
[12/10 23:09:12 d2.evaluation.fast_eval_api]: Evaluate annotation type *segm*
[12/10 23:09:21 d2.evaluation.fast_eval_api]: COCOeval_opt.evaluate() finished in 8.91 seconds.
[12/10 23:09:21 d2.evaluation.fast_eval_api]: Accumulating evaluation results...
[12/10 23:09:21 d2.evaluation.fast_eval_api]: COCOeval_opt.accumulate() finished in 0.69 seconds.
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.016
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.035
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.015
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.001
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.009
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.038
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.026
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.034
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.034
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.001
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.018
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.061
[12/10 23:09:23 d2.evaluation.coco_evaluation]: Evaluation results for segm: 
|  AP   |  AP50  |  AP75  |  APs  |  APm  |  APl  |
|:-----:|:------:|:------:|:-----:|:-----:|:-----:|
| 1.641 | 3.476  | 1.459  | 0.077 | 0.940 | 3.813 |
[12/10 23:09:23 d2.evaluation.coco_evaluation]: Per-category segm AP: 
| category      | AP    | category     | AP     | category       | AP     |
|:--------------|:------|:-------------|:-------|:---------------|:-------|
| person        | 4.985 | bicycle      | 0.026  | car            | 2.997  |
| motorcycle    | 0.435 | airplane     | 0.784  | bus            | 11.555 |
| train         | 5.453 | truck        | 0.748  | boat           | 0.071  |
| traffic light | 0.139 | fire hydrant | 0.000  | stop sign      | 19.786 |
| parking meter | 0.000 | bench        | 0.012  | bird           | 0.198  |
| cat           | 3.387 | dog          | 1.192  | horse          | 0.609  |
| sheep         | 1.278 | cow          | 2.454  | elephant       | 6.936  |
| bear          | 9.091 | zebra        | 15.489 | giraffe        | 7.225  |
| backpack      | 0.000 | umbrella     | 0.119  | handbag        | 0.000  |
| tie           | 0.000 | suitcase     | 1.280  | frisbee        | 0.000  |
| skis          | 0.000 | snowboard    | 0.000  | sports ball    | 1.446  |
| kite          | 1.271 | baseball bat | 0.000  | baseball glove | 0.000  |
| skateboard    | 0.000 | surfboard    | 0.693  | tennis racket  | 2.467  |
| bottle        | 0.058 | wine glass   | 0.000  | cup            | 0.076  |
| fork          | 0.000 | knife        | 0.000  | spoon          | 0.000  |
| bowl          | 1.021 | banana       | 0.118  | apple          | 0.198  |
| sandwich      | 0.370 | orange       | 1.598  | broccoli       | 0.009  |
| carrot        | 0.141 | hot dog      | 0.000  | pizza          | 1.149  |
| donut         | 0.000 | cake         | 0.000  | chair          | 0.277  |
| couch         | 0.203 | potted plant | 0.049  | bed            | 2.624  |
| dining table  | 0.184 | toilet       | 9.803  | tv             | 6.204  |
| laptop        | 0.518 | mouse        | 0.000  | remote         | 0.000  |
| keyboard      | 0.248 | cell phone   | 0.061  | microwave      | 0.000  |
| oven          | 0.368 | toaster      | 0.000  | sink           | 1.173  |
| refrigerator  | 0.050 | book         | 0.018  | clock          | 2.235  |
| vase          | 0.000 | scissors     | 0.000  | teddy bear     | 0.440  |
| hair drier    | 0.000 | toothbrush   | 0.000  |                |        |
[12/10 23:09:28 d2.engine.defaults]: Evaluation results for coco_2017_val_panoptic in csv format:
[12/10 23:09:28 d2.evaluation.testing]: copypaste: Task: panoptic_seg
[12/10 23:09:28 d2.evaluation.testing]: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[12/10 23:09:28 d2.evaluation.testing]: copypaste: 7.2497,46.0562,9.7328,5.3399,47.8820,7.2471,10.1324,43.3003,13.4847
[12/10 23:09:28 d2.evaluation.testing]: copypaste: Task: bbox
[12/10 23:09:28 d2.evaluation.testing]: copypaste: AP,AP50,AP75,APs,APm,APl
[12/10 23:09:28 d2.evaluation.testing]: copypaste: 1.6277,3.4374,1.4421,0.1418,1.0350,3.0027
[12/10 23:09:28 d2.evaluation.testing]: copypaste: Task: segm
[12/10 23:09:28 d2.evaluation.testing]: copypaste: AP,AP50,AP75,APs,APm,APl
[12/10 23:09:28 d2.evaluation.testing]: copypaste: 1.6415,3.4762,1.4591,0.0774,0.9397,3.8132