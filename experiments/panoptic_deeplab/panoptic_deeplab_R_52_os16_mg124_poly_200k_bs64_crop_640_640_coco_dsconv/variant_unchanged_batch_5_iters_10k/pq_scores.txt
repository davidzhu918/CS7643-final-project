env: DETECTRON2_DATASETS=/content/datasets
Command Line Args: Namespace(config_file='./detectron2/projects/Panoptic-DeepLab/configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.RESNETS.NORM', 'BN', 'MODEL.INS_EMBED_HEAD.NORM', 'BN', 'MODEL.SEM_SEG_HEAD.NORM', 'BN', 'SOLVER.MAX_ITER', '10000', 'SOLVER.IMS_PER_BATCH', '5', 'SOLVER.BASE_LR', '0.0025'], resume=False)
Loading config ./detectron2/projects/Panoptic-DeepLab/configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv.yaml with yaml.unsafe_load. Your machine may be at risk if the file contains malicious content.
[12/10 06:18:27 detectron2]: Rank of current process: 0. World size: 1
[12/10 06:18:28 detectron2]: Environment info:
----------------------  ----------------------------------------------------------------
sys.platform            linux
Python                  3.7.12 (default, Jan 15 2022, 18:48:18) [GCC 7.5.0]
numpy                   1.21.5
detectron2              0.6 @/content/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.1
detectron2 arch flags   7.0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.10.0+cu111 @/usr/local/lib/python3.7/dist-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0                   Tesla V100-SXM2-16GB (arch=7.0)
Driver version          460.32.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.1.2
torchvision             0.11.1+cu111 @/usr/local/lib/python3.7/dist-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20221122
iopath                  0.1.9
cv2                     4.1.2
----------------------  ----------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[12/10 06:18:28 detectron2]: Command line arguments: Namespace(config_file='./detectron2/projects/Panoptic-DeepLab/configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.RESNETS.NORM', 'BN', 'MODEL.INS_EMBED_HEAD.NORM', 'BN', 'MODEL.SEM_SEG_HEAD.NORM', 'BN', 'SOLVER.MAX_ITER', '10000', 'SOLVER.IMS_PER_BATCH', '5', 'SOLVER.BASE_LR', '0.0025'], resume=False)
[12/10 06:18:28 detectron2]: Contents of args.config_file=./detectron2/projects/Panoptic-DeepLab/configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv.yaml:
_BASE_: ../Cityscapes-PanopticSegmentation/Base-PanopticDeepLab-OS16.yaml
MODEL:
  WEIGHTS: "detectron2://DeepLab/R-52.pkl"
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  BACKBONE:
    NAME: "build_resnet_deeplab_backbone"
  RESNETS:
    DEPTH: 50
    NORM: "SyncBN"
    RES5_MULTI_GRID: [1, 2, 4]
    STEM_TYPE: "deeplab"
    STEM_OUT_CHANNELS: 128
    STRIDE_IN_1X1: False
  SEM_SEG_HEAD:
    NUM_CLASSES: 133
    LOSS_TOP_K: 1.0
    USE_DEPTHWISE_SEPARABLE_CONV: True
  PANOPTIC_DEEPLAB:
    STUFF_AREA: 4096
    NMS_KERNEL: 41
    SIZE_DIVISIBILITY: 640
    USE_DEPTHWISE_SEPARABLE_CONV: True
DATASETS:
  TRAIN: ("coco_2017_train_panoptic",)
  TEST: ("coco_2017_val_panoptic",)
SOLVER:
  BASE_LR: 0.0005
  MAX_ITER: 200000
  IMS_PER_BATCH: 64
INPUT:
  FORMAT: "RGB"
  GAUSSIAN_SIGMA: 8
  MIN_SIZE_TRAIN: !!python/object/apply:eval ["[int(x * 0.1 * 640) for x in range(5, 16)]"]
  MIN_SIZE_TRAIN_SAMPLING: "choice"
  MIN_SIZE_TEST: 640
  MAX_SIZE_TRAIN: 960
  MAX_SIZE_TEST: 640
  CROP:
    ENABLED: True
    TYPE: "absolute"
    SIZE: (640, 640)

[12/10 06:18:28 detectron2]: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 10
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - coco_2017_val_panoptic
  TRAIN:
  - coco_2017_train_panoptic
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: true
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 640
    - 640
    TYPE: absolute
  FORMAT: RGB
  GAUSSIAN_SIGMA: 8
  IGNORE_CROWD_IN_SEMANTIC: false
  IGNORE_STUFF_IN_OFFSET: true
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 640
  MAX_SIZE_TRAIN: 960
  MIN_SIZE_TEST: 640
  MIN_SIZE_TRAIN:
  - 320
  - 384
  - 448
  - 512
  - 576
  - 640
  - 704
  - 768
  - 832
  - 896
  - 960
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SMALL_INSTANCE_AREA: 4096
  SMALL_INSTANCE_WEIGHT: 3
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_deeplab_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  INS_EMBED_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    CENTER_LOSS_WEIGHT: 200.0
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    HEAD_CHANNELS: 32
    IN_FEATURES:
    - res2
    - res3
    - res5
    NAME: PanopticDeepLabInsEmbedHead
    NORM: BN
    OFFSET_LOSS_WEIGHT: 0.01
    PROJECT_CHANNELS:
    - 32
    - 64
    PROJECT_FEATURES:
    - res2
    - res3
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: PanopticDeepLab
  PANOPTIC_DEEPLAB:
    BENCHMARK_NETWORK_SPEED: false
    CENTER_THRESHOLD: 0.1
    NMS_KERNEL: 41
    PREDICT_INSTANCES: true
    SIZE_DIVISIBILITY: 640
    STUFF_AREA: 4096
    TOP_K_INSTANCE: 200
    USE_DEPTHWISE_SEPARABLE_CONV: true
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: BN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 2
    RES5_MULTI_GRID:
    - 1
    - 2
    - 4
    STEM_OUT_CHANNELS: 128
    STEM_TYPE: deeplab
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id001
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS:
    - 10.0
    - 10.0
    - 5.0
    - 5.0
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    HEAD_CHANNELS: 256
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res5
    LOSS_TOP_K: 1.0
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    NAME: PanopticDeepLabSemSegHead
    NORM: BN
    NUM_CLASSES: 133
    PROJECT_CHANNELS:
    - 32
    - 64
    PROJECT_FEATURES:
    - res2
    - res3
    USE_DEPTHWISE_SEPARABLE_CONV: true
  WEIGHTS: detectron2://DeepLab/R-52.pkl
OUTPUT_DIR: ./output
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.0025
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 5
  LR_SCHEDULER_NAME: WarmupPolyLR
  MAX_ITER: 10000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAM
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 30000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0
  WEIGHT_DECAY_BIAS: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/10 06:18:28 detectron2]: Full config saved to ./output/config.yaml
[12/10 06:18:28 d2.utils.env]: Using a generated random seed 28315749
[12/10 06:18:32 d2.engine.defaults]: Model:
PanopticDeepLab(
  (backbone): ResNet(
    (stem): DeepLabStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
        (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv2): Conv2d(
        64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (conv3): Conv2d(
        64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(8, 8), dilation=(8, 8), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (sem_seg_head): PanopticDeepLabSemSegHead(
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            288, 288, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=288, bias=False
            (norm): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            288, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AvgPool2d(kernel_size=(40, 40), stride=1, padding=0)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=256, bias=False
        (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (predictor): Conv2d(256, 133, kernel_size=(1, 1), stride=(1, 1))
    (loss): DeepLabCE(
      (criterion): CrossEntropyLoss()
    )
  )
  (ins_embed_head): PanopticDeepLabInsEmbedHead(
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            160, 160, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=160, bias=False
            (norm): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AvgPool2d(kernel_size=(40, 40), stride=1, padding=0)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (center_head): Sequential(
      (0): Conv2d(
        128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): Conv2d(
        128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (center_predictor): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
    (offset_head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=128, bias=False
        (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (offset_predictor): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
    (center_loss): MSELoss()
    (offset_loss): L1Loss()
  )
)
[12/10 06:18:32 d2.projects.panoptic_deeplab.dataset_mapper]: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960), max_size=960, sample_style='choice'), RandomCrop(crop_type='absolute', crop_size=[640, 640]), RandomFlip()]
[12/10 06:18:40 d2.data.build]: Using training sampler TrainingSampler
[12/10 06:18:40 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/10 06:18:40 d2.data.common]: Serializing 118287 elements to byte tensors and concatenating them all ...
[12/10 06:18:41 d2.data.common]: Serialized dataset takes 80.32 MiB
/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 10 worker processes in total. Our suggested max number of worker in current system is 8, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  cpuset_checked))
[12/10 06:18:44 fvcore.common.checkpoint]: [Checkpointer] Loading from detectron2://DeepLab/R-52.pkl ...
[12/10 06:18:44 fvcore.common.checkpoint]: Reading a file from 'torchvision'
[12/10 06:18:44 d2.checkpoint.c2_model_loading]: Following weights matched with submodule backbone:
| Names in Model    | Names in Checkpoint                                                                                        | Shapes                                             |
|:------------------|:-----------------------------------------------------------------------------------------------------------|:---------------------------------------------------|
| res2.0.conv1.*    | res2.0.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) () (64,) (64,) (64,) (64,128,1,1)            |
| res2.0.conv2.*    | res2.0.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) () (64,) (64,) (64,) (64,64,3,3)             |
| res2.0.conv3.*    | res2.0.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,64,1,1)        |
| res2.0.shortcut.* | res2.0.shortcut.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) () (256,) (256,) (256,) (256,128,1,1)       |
| res2.1.conv1.*    | res2.1.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) () (64,) (64,) (64,) (64,256,1,1)            |
| res2.1.conv2.*    | res2.1.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) () (64,) (64,) (64,) (64,64,3,3)             |
| res2.1.conv3.*    | res2.1.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,64,1,1)        |
| res2.2.conv1.*    | res2.2.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) () (64,) (64,) (64,) (64,256,1,1)            |
| res2.2.conv2.*    | res2.2.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) () (64,) (64,) (64,) (64,64,3,3)             |
| res2.2.conv3.*    | res2.2.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,64,1,1)        |
| res3.0.conv1.*    | res3.0.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3.0.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3.0.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3.0.shortcut.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) () (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3.1.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3.1.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3.1.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3.2.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3.2.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3.2.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3.3.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3.3.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3.3.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4.0.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4.0.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4.0.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4.0.shortcut.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) () (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4.1.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4.1.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4.1.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4.2.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4.2.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4.2.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4.3.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4.3.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4.3.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4.4.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4.4.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4.4.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4.5.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4.5.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4.5.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) () (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) () (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) () (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) () (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.*      | stem.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) () (64,) (64,) (64,) (64,3,3,3)              |
| stem.conv2.*      | stem.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) () (64,) (64,) (64,) (64,64,3,3)             |
| stem.conv3.*      | stem.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}      | (128,) () (128,) (128,) (128,) (128,64,3,3)        |
WARNING [12/10 06:18:45 fvcore.common.checkpoint]: Some model parameters or buffers are not found in the checkpoint:
ins_embed_head.center_head.0.norm.{bias, running_mean, running_var, weight}
ins_embed_head.center_head.0.weight
ins_embed_head.center_head.1.norm.{bias, running_mean, running_var, weight}
ins_embed_head.center_head.1.weight
ins_embed_head.center_predictor.{bias, weight}
ins_embed_head.decoder.res2.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res2.fuse_conv.depthwise.weight
ins_embed_head.decoder.res2.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res2.fuse_conv.pointwise.weight
ins_embed_head.decoder.res2.project_conv.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res2.project_conv.weight
ins_embed_head.decoder.res3.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res3.fuse_conv.depthwise.weight
ins_embed_head.decoder.res3.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res3.fuse_conv.pointwise.weight
ins_embed_head.decoder.res3.project_conv.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res3.project_conv.weight
ins_embed_head.decoder.res5.project_conv.convs.0.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.0.weight
ins_embed_head.decoder.res5.project_conv.convs.1.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.1.depthwise.weight
ins_embed_head.decoder.res5.project_conv.convs.1.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.1.pointwise.weight
ins_embed_head.decoder.res5.project_conv.convs.2.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.2.depthwise.weight
ins_embed_head.decoder.res5.project_conv.convs.2.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.2.pointwise.weight
ins_embed_head.decoder.res5.project_conv.convs.3.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.3.depthwise.weight
ins_embed_head.decoder.res5.project_conv.convs.3.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.3.pointwise.weight
ins_embed_head.decoder.res5.project_conv.convs.4.1.{bias, weight}
ins_embed_head.decoder.res5.project_conv.project.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.project.weight
ins_embed_head.offset_head.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.offset_head.depthwise.weight
ins_embed_head.offset_head.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.offset_head.pointwise.weight
ins_embed_head.offset_predictor.{bias, weight}
sem_seg_head.decoder.res2.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res2.fuse_conv.depthwise.weight
sem_seg_head.decoder.res2.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res2.fuse_conv.pointwise.weight
sem_seg_head.decoder.res2.project_conv.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res2.project_conv.weight
sem_seg_head.decoder.res3.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res3.fuse_conv.depthwise.weight
sem_seg_head.decoder.res3.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res3.fuse_conv.pointwise.weight
sem_seg_head.decoder.res3.project_conv.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res3.project_conv.weight
sem_seg_head.decoder.res5.project_conv.convs.0.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.0.weight
sem_seg_head.decoder.res5.project_conv.convs.1.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.1.depthwise.weight
sem_seg_head.decoder.res5.project_conv.convs.1.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.1.pointwise.weight
sem_seg_head.decoder.res5.project_conv.convs.2.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.2.depthwise.weight
sem_seg_head.decoder.res5.project_conv.convs.2.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.2.pointwise.weight
sem_seg_head.decoder.res5.project_conv.convs.3.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.3.depthwise.weight
sem_seg_head.decoder.res5.project_conv.convs.3.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.3.pointwise.weight
sem_seg_head.decoder.res5.project_conv.convs.4.1.{bias, weight}
sem_seg_head.decoder.res5.project_conv.project.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.project.weight
sem_seg_head.head.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.head.depthwise.weight
sem_seg_head.head.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.head.pointwise.weight
sem_seg_head.predictor.{bias, weight}
WARNING [12/10 06:18:45 fvcore.common.checkpoint]: The checkpoint state_dict contains keys that are not used by the model:
  stem.fc.{bias, weight}
[12/10 06:18:45 d2.engine.train_loop]: Starting training from iteration 0
/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 10 worker processes in total. Our suggested max number of worker in current system is 8, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  cpuset_checked))
[12/10 06:18:55 d2.utils.events]:  eta: 1:11:19  iter: 19  total_loss: 6.13  loss_sem_seg: 3.944  loss_center: 0.7299  loss_offset: 1.539  time: 0.4317  data_time: 0.0763  lr: 4.9867e-05  max_mem: 11463M
[12/10 06:19:04 d2.utils.events]:  eta: 1:11:49  iter: 39  total_loss: 5.904  loss_sem_seg: 3.874  loss_center: 0.6786  loss_offset: 1.577  time: 0.4347  data_time: 0.0283  lr: 9.9552e-05  max_mem: 11463M
[12/10 06:19:12 d2.utils.events]:  eta: 1:11:16  iter: 59  total_loss: 5.896  loss_sem_seg: 3.53  loss_center: 0.8643  loss_offset: 1.482  time: 0.4326  data_time: 0.0250  lr: 0.00014906  max_mem: 11463M
[12/10 06:19:21 d2.utils.events]:  eta: 1:11:31  iter: 79  total_loss: 5.802  loss_sem_seg: 3.427  loss_center: 0.7121  loss_offset: 1.594  time: 0.4333  data_time: 0.0269  lr: 0.00019838  max_mem: 11463M
[12/10 06:19:30 d2.utils.events]:  eta: 1:11:18  iter: 99  total_loss: 5.584  loss_sem_seg: 3.151  loss_center: 0.6105  loss_offset: 1.521  time: 0.4334  data_time: 0.0275  lr: 0.00024753  max_mem: 11463M
[12/10 06:19:38 d2.utils.events]:  eta: 1:11:11  iter: 119  total_loss: 5.29  loss_sem_seg: 3.101  loss_center: 0.6619  loss_offset: 1.423  time: 0.4331  data_time: 0.0265  lr: 0.00029649  max_mem: 11463M
[12/10 06:19:47 d2.utils.events]:  eta: 1:10:56  iter: 139  total_loss: 5.226  loss_sem_seg: 2.982  loss_center: 0.8192  loss_offset: 1.584  time: 0.4329  data_time: 0.0262  lr: 0.00034528  max_mem: 11463M
[12/10 06:19:55 d2.utils.events]:  eta: 1:10:45  iter: 159  total_loss: 4.855  loss_sem_seg: 2.811  loss_center: 0.6493  loss_offset: 1.229  time: 0.4325  data_time: 0.0260  lr: 0.00039388  max_mem: 11463M
[12/10 06:20:04 d2.utils.events]:  eta: 1:10:28  iter: 179  total_loss: 5.355  loss_sem_seg: 2.838  loss_center: 0.7285  loss_offset: 1.571  time: 0.4323  data_time: 0.0265  lr: 0.0004423  max_mem: 11463M
[12/10 06:20:13 d2.utils.events]:  eta: 1:10:27  iter: 199  total_loss: 4.927  loss_sem_seg: 2.714  loss_center: 0.6047  loss_offset: 1.556  time: 0.4323  data_time: 0.0273  lr: 0.00049055  max_mem: 11463M
[12/10 06:20:21 d2.utils.events]:  eta: 1:10:15  iter: 219  total_loss: 5.092  loss_sem_seg: 2.781  loss_center: 0.7097  loss_offset: 1.617  time: 0.4322  data_time: 0.0242  lr: 0.00053861  max_mem: 11463M
[12/10 06:20:30 d2.utils.events]:  eta: 1:10:10  iter: 239  total_loss: 5.038  loss_sem_seg: 2.861  loss_center: 0.7383  loss_offset: 1.425  time: 0.4322  data_time: 0.0272  lr: 0.00058649  max_mem: 11463M
[12/10 06:20:39 d2.utils.events]:  eta: 1:10:03  iter: 259  total_loss: 4.995  loss_sem_seg: 2.431  loss_center: 0.6986  loss_offset: 1.47  time: 0.4322  data_time: 0.0264  lr: 0.0006342  max_mem: 11463M
[12/10 06:20:47 d2.utils.events]:  eta: 1:09:54  iter: 279  total_loss: 4.733  loss_sem_seg: 2.479  loss_center: 0.6069  loss_offset: 1.579  time: 0.4324  data_time: 0.0267  lr: 0.00068172  max_mem: 11463M
[12/10 06:20:56 d2.utils.events]:  eta: 1:09:46  iter: 299  total_loss: 4.731  loss_sem_seg: 2.57  loss_center: 0.7794  loss_offset: 1.438  time: 0.4326  data_time: 0.0294  lr: 0.00072906  max_mem: 11463M
[12/10 06:21:05 d2.utils.events]:  eta: 1:09:38  iter: 319  total_loss: 4.926  loss_sem_seg: 2.744  loss_center: 0.7818  loss_offset: 1.42  time: 0.4327  data_time: 0.0284  lr: 0.00077622  max_mem: 11463M
[12/10 06:21:13 d2.utils.events]:  eta: 1:09:34  iter: 339  total_loss: 4.549  loss_sem_seg: 2.46  loss_center: 0.8043  loss_offset: 1.384  time: 0.4327  data_time: 0.0272  lr: 0.0008232  max_mem: 11463M
[12/10 06:21:22 d2.utils.events]:  eta: 1:09:27  iter: 359  total_loss: 5.025  loss_sem_seg: 2.706  loss_center: 0.6577  loss_offset: 1.414  time: 0.4328  data_time: 0.0280  lr: 0.00087  max_mem: 11463M
[12/10 06:21:31 d2.utils.events]:  eta: 1:09:18  iter: 379  total_loss: 4.247  loss_sem_seg: 2.498  loss_center: 0.7372  loss_offset: 1.23  time: 0.4327  data_time: 0.0255  lr: 0.00091662  max_mem: 11463M
[12/10 06:21:39 d2.utils.events]:  eta: 1:09:09  iter: 399  total_loss: 4.879  loss_sem_seg: 2.571  loss_center: 0.8069  loss_offset: 1.444  time: 0.4329  data_time: 0.0279  lr: 0.00096306  max_mem: 11463M
[12/10 06:21:48 d2.utils.events]:  eta: 1:09:01  iter: 419  total_loss: 4.741  loss_sem_seg: 2.64  loss_center: 0.8456  loss_offset: 1.356  time: 0.4328  data_time: 0.0256  lr: 0.0010093  max_mem: 11463M
[12/10 06:21:57 d2.utils.events]:  eta: 1:08:52  iter: 439  total_loss: 4.578  loss_sem_seg: 2.481  loss_center: 0.7663  loss_offset: 1.401  time: 0.4329  data_time: 0.0273  lr: 0.0010554  max_mem: 11463M
[12/10 06:22:05 d2.utils.events]:  eta: 1:08:43  iter: 459  total_loss: 4.546  loss_sem_seg: 2.621  loss_center: 0.5881  loss_offset: 1.258  time: 0.4328  data_time: 0.0268  lr: 0.0011013  max_mem: 11463M
[12/10 06:22:14 d2.utils.events]:  eta: 1:08:34  iter: 479  total_loss: 4.455  loss_sem_seg: 2.47  loss_center: 0.5625  loss_offset: 1.362  time: 0.4329  data_time: 0.0269  lr: 0.001147  max_mem: 11463M
[12/10 06:22:23 d2.utils.events]:  eta: 1:08:26  iter: 499  total_loss: 4.565  loss_sem_seg: 2.658  loss_center: 0.7681  loss_offset: 1.219  time: 0.4328  data_time: 0.0251  lr: 0.0011925  max_mem: 11463M
[12/10 06:22:31 d2.utils.events]:  eta: 1:08:18  iter: 519  total_loss: 4.506  loss_sem_seg: 2.643  loss_center: 0.5838  loss_offset: 1.207  time: 0.4328  data_time: 0.0261  lr: 0.0012379  max_mem: 11463M
[12/10 06:22:40 d2.utils.events]:  eta: 1:08:09  iter: 539  total_loss: 4.584  loss_sem_seg: 2.63  loss_center: 0.6567  loss_offset: 1.267  time: 0.4328  data_time: 0.0278  lr: 0.001283  max_mem: 11463M
[12/10 06:22:49 d2.utils.events]:  eta: 1:07:59  iter: 559  total_loss: 4.469  loss_sem_seg: 2.521  loss_center: 0.6205  loss_offset: 1.221  time: 0.4327  data_time: 0.0257  lr: 0.001328  max_mem: 11463M
[12/10 06:22:57 d2.utils.events]:  eta: 1:07:47  iter: 579  total_loss: 4.454  loss_sem_seg: 2.434  loss_center: 0.6731  loss_offset: 1.247  time: 0.4326  data_time: 0.0264  lr: 0.0013728  max_mem: 11463M
[12/10 06:23:06 d2.utils.events]:  eta: 1:07:41  iter: 599  total_loss: 4.723  loss_sem_seg: 2.601  loss_center: 0.6843  loss_offset: 1.204  time: 0.4327  data_time: 0.0277  lr: 0.0014175  max_mem: 11463M
[12/10 06:23:15 d2.utils.events]:  eta: 1:07:31  iter: 619  total_loss: 4.484  loss_sem_seg: 2.654  loss_center: 0.6996  loss_offset: 1.238  time: 0.4326  data_time: 0.0263  lr: 0.0014619  max_mem: 11463M
[12/10 06:23:23 d2.utils.events]:  eta: 1:07:22  iter: 639  total_loss: 4.628  loss_sem_seg: 2.387  loss_center: 0.9547  loss_offset: 1.265  time: 0.4326  data_time: 0.0260  lr: 0.0015062  max_mem: 11463M
[12/10 06:23:32 d2.utils.events]:  eta: 1:07:13  iter: 659  total_loss: 4.443  loss_sem_seg: 2.432  loss_center: 0.7167  loss_offset: 1.063  time: 0.4326  data_time: 0.0266  lr: 0.0015503  max_mem: 11463M
[12/10 06:23:41 d2.utils.events]:  eta: 1:07:05  iter: 679  total_loss: 4.368  loss_sem_seg: 2.532  loss_center: 0.6162  loss_offset: 1.217  time: 0.4326  data_time: 0.0254  lr: 0.0015942  max_mem: 11463M
[12/10 06:23:49 d2.utils.events]:  eta: 1:06:55  iter: 699  total_loss: 4.469  loss_sem_seg: 2.59  loss_center: 0.8436  loss_offset: 1.182  time: 0.4326  data_time: 0.0267  lr: 0.0016379  max_mem: 11463M
[12/10 06:23:58 d2.utils.events]:  eta: 1:06:46  iter: 719  total_loss: 4.429  loss_sem_seg: 2.52  loss_center: 0.8239  loss_offset: 1.14  time: 0.4326  data_time: 0.0268  lr: 0.0016814  max_mem: 11463M
[12/10 06:24:07 d2.utils.events]:  eta: 1:06:37  iter: 739  total_loss: 4.188  loss_sem_seg: 2.166  loss_center: 0.7094  loss_offset: 1.197  time: 0.4326  data_time: 0.0265  lr: 0.0017248  max_mem: 11463M
[12/10 06:24:15 d2.utils.events]:  eta: 1:06:30  iter: 759  total_loss: 4.045  loss_sem_seg: 2.39  loss_center: 0.6401  loss_offset: 1.011  time: 0.4327  data_time: 0.0276  lr: 0.0017679  max_mem: 11463M
[12/10 06:24:24 d2.utils.events]:  eta: 1:06:21  iter: 779  total_loss: 4.418  loss_sem_seg: 2.547  loss_center: 0.6688  loss_offset: 1.176  time: 0.4327  data_time: 0.0274  lr: 0.0018109  max_mem: 11463M
[12/10 06:24:33 d2.utils.events]:  eta: 1:06:13  iter: 799  total_loss: 4.683  loss_sem_seg: 2.606  loss_center: 0.704  loss_offset: 1.213  time: 0.4327  data_time: 0.0255  lr: 0.0018537  max_mem: 11463M
[12/10 06:24:41 d2.utils.events]:  eta: 1:06:04  iter: 819  total_loss: 4.191  loss_sem_seg: 2.531  loss_center: 0.5512  loss_offset: 1.21  time: 0.4327  data_time: 0.0262  lr: 0.0018964  max_mem: 11463M
[12/10 06:24:50 d2.utils.events]:  eta: 1:05:54  iter: 839  total_loss: 4.421  loss_sem_seg: 2.34  loss_center: 0.6616  loss_offset: 1.241  time: 0.4326  data_time: 0.0273  lr: 0.0019388  max_mem: 11463M
[12/10 06:24:59 d2.utils.events]:  eta: 1:05:46  iter: 859  total_loss: 4.656  loss_sem_seg: 2.576  loss_center: 0.7669  loss_offset: 1.304  time: 0.4326  data_time: 0.0259  lr: 0.0019811  max_mem: 11463M
[12/10 06:25:07 d2.utils.events]:  eta: 1:05:36  iter: 879  total_loss: 4.464  loss_sem_seg: 2.6  loss_center: 0.8109  loss_offset: 1.107  time: 0.4326  data_time: 0.0267  lr: 0.0020231  max_mem: 11463M
[12/10 06:25:16 d2.utils.events]:  eta: 1:05:27  iter: 899  total_loss: 4.159  loss_sem_seg: 2.321  loss_center: 0.6369  loss_offset: 1.066  time: 0.4325  data_time: 0.0257  lr: 0.002065  max_mem: 11463M
[12/10 06:25:24 d2.utils.events]:  eta: 1:05:18  iter: 919  total_loss: 4.188  loss_sem_seg: 2.297  loss_center: 0.7571  loss_offset: 1.092  time: 0.4325  data_time: 0.0250  lr: 0.0021068  max_mem: 11463M
[12/10 06:25:33 d2.utils.events]:  eta: 1:05:09  iter: 939  total_loss: 4.201  loss_sem_seg: 2.45  loss_center: 0.6511  loss_offset: 1.146  time: 0.4324  data_time: 0.0259  lr: 0.0021483  max_mem: 11463M
[12/10 06:25:42 d2.utils.events]:  eta: 1:05:00  iter: 959  total_loss: 4.684  loss_sem_seg: 2.657  loss_center: 0.7914  loss_offset: 1.214  time: 0.4324  data_time: 0.0261  lr: 0.0021896  max_mem: 11463M
[12/10 06:25:50 d2.utils.events]:  eta: 1:04:51  iter: 979  total_loss: 4.443  loss_sem_seg: 2.437  loss_center: 0.6375  loss_offset: 1.163  time: 0.4324  data_time: 0.0256  lr: 0.0022308  max_mem: 11463M
[12/10 06:25:59 d2.utils.events]:  eta: 1:04:43  iter: 999  total_loss: 4.313  loss_sem_seg: 2.478  loss_center: 0.5855  loss_offset: 1.29  time: 0.4324  data_time: 0.0280  lr: 0.0022718  max_mem: 11463M
[12/10 06:26:08 d2.utils.events]:  eta: 1:04:34  iter: 1019  total_loss: 4.322  loss_sem_seg: 2.376  loss_center: 0.7307  loss_offset: 1.135  time: 0.4324  data_time: 0.0259  lr: 0.0022695  max_mem: 11463M
[12/10 06:26:16 d2.utils.events]:  eta: 1:04:26  iter: 1039  total_loss: 4.256  loss_sem_seg: 2.288  loss_center: 0.6565  loss_offset: 1.194  time: 0.4324  data_time: 0.0264  lr: 0.002265  max_mem: 11463M
[12/10 06:26:25 d2.utils.events]:  eta: 1:04:17  iter: 1059  total_loss: 4.423  loss_sem_seg: 2.424  loss_center: 0.6129  loss_offset: 1.212  time: 0.4324  data_time: 0.0272  lr: 0.0022604  max_mem: 11463M
[12/10 06:26:34 d2.utils.events]:  eta: 1:04:07  iter: 1079  total_loss: 4.471  loss_sem_seg: 2.357  loss_center: 0.849  loss_offset: 1.141  time: 0.4324  data_time: 0.0266  lr: 0.0022559  max_mem: 11463M
[12/10 06:26:42 d2.utils.events]:  eta: 1:03:58  iter: 1099  total_loss: 4.52  loss_sem_seg: 2.42  loss_center: 0.7698  loss_offset: 1.143  time: 0.4324  data_time: 0.0266  lr: 0.0022513  max_mem: 11463M
[12/10 06:26:51 d2.utils.events]:  eta: 1:03:50  iter: 1119  total_loss: 4.511  loss_sem_seg: 2.537  loss_center: 0.7997  loss_offset: 1.088  time: 0.4324  data_time: 0.0264  lr: 0.0022468  max_mem: 11463M
[12/10 06:27:00 d2.utils.events]:  eta: 1:03:42  iter: 1139  total_loss: 4.369  loss_sem_seg: 2.515  loss_center: 0.8399  loss_offset: 1.019  time: 0.4325  data_time: 0.0275  lr: 0.0022422  max_mem: 11463M
[12/10 06:27:08 d2.utils.events]:  eta: 1:03:34  iter: 1159  total_loss: 4.05  loss_sem_seg: 2.109  loss_center: 0.8279  loss_offset: 1.01  time: 0.4325  data_time: 0.0269  lr: 0.0022376  max_mem: 11463M
[12/10 06:27:17 d2.utils.events]:  eta: 1:03:26  iter: 1179  total_loss: 4.316  loss_sem_seg: 2.546  loss_center: 0.6284  loss_offset: 1.118  time: 0.4325  data_time: 0.0270  lr: 0.0022331  max_mem: 11463M
[12/10 06:27:26 d2.utils.events]:  eta: 1:03:16  iter: 1199  total_loss: 4.088  loss_sem_seg: 2.289  loss_center: 0.6134  loss_offset: 1.121  time: 0.4325  data_time: 0.0265  lr: 0.0022285  max_mem: 11463M
[12/10 06:27:34 d2.utils.events]:  eta: 1:03:07  iter: 1219  total_loss: 4.575  loss_sem_seg: 2.691  loss_center: 0.6927  loss_offset: 1.052  time: 0.4325  data_time: 0.0272  lr: 0.002224  max_mem: 11463M
[12/10 06:27:43 d2.utils.events]:  eta: 1:02:59  iter: 1239  total_loss: 4.318  loss_sem_seg: 2.385  loss_center: 0.7561  loss_offset: 1.116  time: 0.4325  data_time: 0.0269  lr: 0.0022194  max_mem: 11463M
[12/10 06:27:52 d2.utils.events]:  eta: 1:02:50  iter: 1259  total_loss: 4.201  loss_sem_seg: 2.281  loss_center: 0.6745  loss_offset: 1.101  time: 0.4325  data_time: 0.0257  lr: 0.0022149  max_mem: 11463M
[12/10 06:28:00 d2.utils.events]:  eta: 1:02:42  iter: 1279  total_loss: 4.29  loss_sem_seg: 2.316  loss_center: 0.6881  loss_offset: 1.118  time: 0.4325  data_time: 0.0271  lr: 0.0022103  max_mem: 11463M
[12/10 06:28:09 d2.utils.events]:  eta: 1:02:32  iter: 1299  total_loss: 3.961  loss_sem_seg: 2.237  loss_center: 0.5829  loss_offset: 1.076  time: 0.4325  data_time: 0.0269  lr: 0.0022057  max_mem: 11463M
[12/10 06:28:18 d2.utils.events]:  eta: 1:02:22  iter: 1319  total_loss: 3.708  loss_sem_seg: 2.151  loss_center: 0.5783  loss_offset: 1.007  time: 0.4325  data_time: 0.0259  lr: 0.0022012  max_mem: 11463M
[12/10 06:28:26 d2.utils.events]:  eta: 1:02:12  iter: 1339  total_loss: 4.318  loss_sem_seg: 2.299  loss_center: 0.7491  loss_offset: 1.068  time: 0.4325  data_time: 0.0266  lr: 0.0021966  max_mem: 11463M
[12/10 06:28:35 d2.utils.events]:  eta: 1:02:03  iter: 1359  total_loss: 4.221  loss_sem_seg: 2.354  loss_center: 0.6112  loss_offset: 1.087  time: 0.4325  data_time: 0.0264  lr: 0.002192  max_mem: 11463M
[12/10 06:28:44 d2.utils.events]:  eta: 1:01:55  iter: 1379  total_loss: 4.358  loss_sem_seg: 2.493  loss_center: 0.6559  loss_offset: 1.123  time: 0.4325  data_time: 0.0279  lr: 0.0021875  max_mem: 11463M
[12/10 06:28:52 d2.utils.events]:  eta: 1:01:47  iter: 1399  total_loss: 4.135  loss_sem_seg: 2.127  loss_center: 0.8626  loss_offset: 1.082  time: 0.4325  data_time: 0.0282  lr: 0.0021829  max_mem: 11463M
[12/10 06:29:01 d2.utils.events]:  eta: 1:01:38  iter: 1419  total_loss: 3.999  loss_sem_seg: 2.322  loss_center: 0.6463  loss_offset: 1.18  time: 0.4325  data_time: 0.0264  lr: 0.0021783  max_mem: 11463M
[12/10 06:29:10 d2.utils.events]:  eta: 1:01:30  iter: 1439  total_loss: 4.097  loss_sem_seg: 2.176  loss_center: 0.7623  loss_offset: 0.9939  time: 0.4325  data_time: 0.0276  lr: 0.0021738  max_mem: 11463M
[12/10 06:29:18 d2.utils.events]:  eta: 1:01:21  iter: 1459  total_loss: 4.138  loss_sem_seg: 2.2  loss_center: 0.6066  loss_offset: 1.119  time: 0.4325  data_time: 0.0266  lr: 0.0021692  max_mem: 11463M
[12/10 06:29:27 d2.utils.events]:  eta: 1:01:13  iter: 1479  total_loss: 4.234  loss_sem_seg: 2.331  loss_center: 0.8264  loss_offset: 0.9539  time: 0.4326  data_time: 0.0279  lr: 0.0021646  max_mem: 11463M
[12/10 06:29:36 d2.utils.events]:  eta: 1:01:04  iter: 1499  total_loss: 3.845  loss_sem_seg: 2.151  loss_center: 0.6464  loss_offset: 0.9974  time: 0.4326  data_time: 0.0286  lr: 0.00216  max_mem: 11463M
[12/10 06:29:44 d2.utils.events]:  eta: 1:00:55  iter: 1519  total_loss: 3.866  loss_sem_seg: 2.134  loss_center: 0.6904  loss_offset: 0.9492  time: 0.4326  data_time: 0.0285  lr: 0.0021555  max_mem: 11463M
[12/10 06:29:53 d2.utils.events]:  eta: 1:00:47  iter: 1539  total_loss: 3.861  loss_sem_seg: 2.316  loss_center: 0.5946  loss_offset: 0.9982  time: 0.4326  data_time: 0.0264  lr: 0.0021509  max_mem: 11463M
[12/10 06:30:02 d2.utils.events]:  eta: 1:00:39  iter: 1559  total_loss: 4.023  loss_sem_seg: 2.347  loss_center: 0.8302  loss_offset: 1.038  time: 0.4326  data_time: 0.0259  lr: 0.0021463  max_mem: 11463M
[12/10 06:30:10 d2.utils.events]:  eta: 1:00:30  iter: 1579  total_loss: 4.263  loss_sem_seg: 2.416  loss_center: 0.6091  loss_offset: 1.007  time: 0.4326  data_time: 0.0269  lr: 0.0021417  max_mem: 11463M
[12/10 06:30:19 d2.utils.events]:  eta: 1:00:21  iter: 1599  total_loss: 3.771  loss_sem_seg: 2.174  loss_center: 0.5686  loss_offset: 1.033  time: 0.4326  data_time: 0.0269  lr: 0.0021372  max_mem: 11463M
[12/10 06:30:28 d2.utils.events]:  eta: 1:00:13  iter: 1619  total_loss: 4.042  loss_sem_seg: 2.244  loss_center: 0.5904  loss_offset: 1.061  time: 0.4326  data_time: 0.0265  lr: 0.0021326  max_mem: 11463M
[12/10 06:30:36 d2.utils.events]:  eta: 1:00:04  iter: 1639  total_loss: 4.071  loss_sem_seg: 2.164  loss_center: 0.5631  loss_offset: 1.031  time: 0.4326  data_time: 0.0249  lr: 0.002128  max_mem: 11463M
[12/10 06:30:45 d2.utils.events]:  eta: 0:59:56  iter: 1659  total_loss: 3.685  loss_sem_seg: 2.017  loss_center: 0.5665  loss_offset: 1.073  time: 0.4326  data_time: 0.0281  lr: 0.0021234  max_mem: 11463M
[12/10 06:30:54 d2.utils.events]:  eta: 0:59:47  iter: 1679  total_loss: 3.98  loss_sem_seg: 2.332  loss_center: 0.5704  loss_offset: 1.034  time: 0.4326  data_time: 0.0251  lr: 0.0021188  max_mem: 11463M
[12/10 06:31:02 d2.utils.events]:  eta: 0:59:39  iter: 1699  total_loss: 4.142  loss_sem_seg: 2.282  loss_center: 0.5894  loss_offset: 1.103  time: 0.4326  data_time: 0.0268  lr: 0.0021143  max_mem: 11463M
[12/10 06:31:11 d2.utils.events]:  eta: 0:59:30  iter: 1719  total_loss: 4.251  loss_sem_seg: 2.458  loss_center: 0.5356  loss_offset: 1.105  time: 0.4327  data_time: 0.0288  lr: 0.0021097  max_mem: 11463M
[12/10 06:31:20 d2.utils.events]:  eta: 0:59:23  iter: 1739  total_loss: 3.95  loss_sem_seg: 2.22  loss_center: 0.7299  loss_offset: 1.063  time: 0.4327  data_time: 0.0293  lr: 0.0021051  max_mem: 11463M
[12/10 06:31:28 d2.utils.events]:  eta: 0:59:13  iter: 1759  total_loss: 4.059  loss_sem_seg: 2.113  loss_center: 0.7321  loss_offset: 0.9921  time: 0.4327  data_time: 0.0249  lr: 0.0021005  max_mem: 11463M
[12/10 06:31:37 d2.utils.events]:  eta: 0:59:06  iter: 1779  total_loss: 4.17  loss_sem_seg: 2.307  loss_center: 0.7223  loss_offset: 1.121  time: 0.4327  data_time: 0.0277  lr: 0.0020959  max_mem: 11463M
[12/10 06:31:46 d2.utils.events]:  eta: 0:58:58  iter: 1799  total_loss: 3.937  loss_sem_seg: 1.923  loss_center: 0.7905  loss_offset: 0.9788  time: 0.4327  data_time: 0.0262  lr: 0.0020913  max_mem: 11463M
[12/10 06:31:55 d2.utils.events]:  eta: 0:58:49  iter: 1819  total_loss: 3.879  loss_sem_seg: 2.011  loss_center: 0.7339  loss_offset: 1.107  time: 0.4327  data_time: 0.0276  lr: 0.0020867  max_mem: 11463M
[12/10 06:32:03 d2.utils.events]:  eta: 0:58:42  iter: 1839  total_loss: 3.84  loss_sem_seg: 2.043  loss_center: 0.7635  loss_offset: 1.135  time: 0.4328  data_time: 0.0265  lr: 0.0020821  max_mem: 11463M
[12/10 06:32:12 d2.utils.events]:  eta: 0:58:31  iter: 1859  total_loss: 3.848  loss_sem_seg: 2.129  loss_center: 0.5682  loss_offset: 1.131  time: 0.4328  data_time: 0.0283  lr: 0.0020775  max_mem: 11463M
[12/10 06:32:21 d2.utils.events]:  eta: 0:58:23  iter: 1879  total_loss: 4.06  loss_sem_seg: 2.172  loss_center: 0.6456  loss_offset: 1.123  time: 0.4328  data_time: 0.0275  lr: 0.0020729  max_mem: 11463M
[12/10 06:32:29 d2.utils.events]:  eta: 0:58:16  iter: 1899  total_loss: 4.033  loss_sem_seg: 2.064  loss_center: 0.6876  loss_offset: 1.178  time: 0.4328  data_time: 0.0292  lr: 0.0020684  max_mem: 11463M
[12/10 06:32:38 d2.utils.events]:  eta: 0:58:08  iter: 1919  total_loss: 4.176  loss_sem_seg: 2.17  loss_center: 0.8803  loss_offset: 1.023  time: 0.4328  data_time: 0.0264  lr: 0.0020638  max_mem: 11463M
[12/10 06:32:47 d2.utils.events]:  eta: 0:58:00  iter: 1939  total_loss: 3.983  loss_sem_seg: 2.106  loss_center: 0.7151  loss_offset: 1.079  time: 0.4328  data_time: 0.0259  lr: 0.0020592  max_mem: 11463M
[12/10 06:32:55 d2.utils.events]:  eta: 0:57:51  iter: 1959  total_loss: 3.811  loss_sem_seg: 2.127  loss_center: 0.723  loss_offset: 1.027  time: 0.4328  data_time: 0.0269  lr: 0.0020546  max_mem: 11463M
[12/10 06:33:04 d2.utils.events]:  eta: 0:57:43  iter: 1979  total_loss: 4.134  loss_sem_seg: 2.054  loss_center: 0.9888  loss_offset: 1.067  time: 0.4329  data_time: 0.0288  lr: 0.00205  max_mem: 11463M
[12/10 06:33:13 d2.utils.events]:  eta: 0:57:34  iter: 1999  total_loss: 4.002  loss_sem_seg: 2.109  loss_center: 0.7434  loss_offset: 0.9932  time: 0.4329  data_time: 0.0263  lr: 0.0020454  max_mem: 11463M
[12/10 06:33:21 d2.utils.events]:  eta: 0:57:25  iter: 2019  total_loss: 3.909  loss_sem_seg: 2.122  loss_center: 0.6561  loss_offset: 1.029  time: 0.4329  data_time: 0.0271  lr: 0.0020408  max_mem: 11463M
[12/10 06:33:30 d2.utils.events]:  eta: 0:57:17  iter: 2039  total_loss: 4.397  loss_sem_seg: 2.448  loss_center: 0.8134  loss_offset: 1.114  time: 0.4329  data_time: 0.0278  lr: 0.0020362  max_mem: 11463M
[12/10 06:33:39 d2.utils.events]:  eta: 0:57:09  iter: 2059  total_loss: 3.837  loss_sem_seg: 2.04  loss_center: 0.748  loss_offset: 1.008  time: 0.4329  data_time: 0.0268  lr: 0.0020316  max_mem: 11463M
[12/10 06:33:48 d2.utils.events]:  eta: 0:57:01  iter: 2079  total_loss: 3.799  loss_sem_seg: 2.114  loss_center: 0.6218  loss_offset: 1.028  time: 0.4329  data_time: 0.0284  lr: 0.0020269  max_mem: 11463M
[12/10 06:33:56 d2.utils.events]:  eta: 0:56:52  iter: 2099  total_loss: 4.051  loss_sem_seg: 2.399  loss_center: 0.569  loss_offset: 1.029  time: 0.4330  data_time: 0.0273  lr: 0.0020223  max_mem: 11463M
[12/10 06:34:05 d2.utils.events]:  eta: 0:56:45  iter: 2119  total_loss: 3.82  loss_sem_seg: 2.029  loss_center: 0.7757  loss_offset: 0.9469  time: 0.4329  data_time: 0.0275  lr: 0.0020177  max_mem: 11463M
[12/10 06:34:14 d2.utils.events]:  eta: 0:56:37  iter: 2139  total_loss: 3.876  loss_sem_seg: 2.183  loss_center: 0.8658  loss_offset: 0.9878  time: 0.4329  data_time: 0.0263  lr: 0.0020131  max_mem: 11463M
[12/10 06:34:22 d2.utils.events]:  eta: 0:56:29  iter: 2159  total_loss: 4.095  loss_sem_seg: 2.326  loss_center: 0.8565  loss_offset: 0.9878  time: 0.4330  data_time: 0.0304  lr: 0.0020085  max_mem: 11463M
[12/10 06:34:31 d2.utils.events]:  eta: 0:56:19  iter: 2179  total_loss: 4.126  loss_sem_seg: 2.209  loss_center: 0.7089  loss_offset: 1.014  time: 0.4330  data_time: 0.0279  lr: 0.0020039  max_mem: 11463M
[12/10 06:34:40 d2.utils.events]:  eta: 0:56:12  iter: 2199  total_loss: 3.766  loss_sem_seg: 1.974  loss_center: 0.7293  loss_offset: 0.9574  time: 0.4330  data_time: 0.0270  lr: 0.0019993  max_mem: 11463M
[12/10 06:34:48 d2.utils.events]:  eta: 0:56:03  iter: 2219  total_loss: 3.778  loss_sem_seg: 2.193  loss_center: 0.7255  loss_offset: 0.9424  time: 0.4330  data_time: 0.0264  lr: 0.0019947  max_mem: 11463M
[12/10 06:34:57 d2.utils.events]:  eta: 0:55:55  iter: 2239  total_loss: 3.875  loss_sem_seg: 1.987  loss_center: 0.7432  loss_offset: 0.9405  time: 0.4330  data_time: 0.0278  lr: 0.0019901  max_mem: 11463M
[12/10 06:35:06 d2.utils.events]:  eta: 0:55:47  iter: 2259  total_loss: 3.734  loss_sem_seg: 1.887  loss_center: 0.7903  loss_offset: 0.9208  time: 0.4330  data_time: 0.0260  lr: 0.0019854  max_mem: 11463M
[12/10 06:35:14 d2.utils.events]:  eta: 0:55:38  iter: 2279  total_loss: 3.952  loss_sem_seg: 2.178  loss_center: 0.5852  loss_offset: 0.976  time: 0.4331  data_time: 0.0270  lr: 0.0019808  max_mem: 11463M
[12/10 06:35:23 d2.utils.events]:  eta: 0:55:32  iter: 2299  total_loss: 3.518  loss_sem_seg: 1.736  loss_center: 0.7514  loss_offset: 0.9228  time: 0.4331  data_time: 0.0283  lr: 0.0019762  max_mem: 11463M
[12/10 06:35:32 d2.utils.events]:  eta: 0:55:25  iter: 2319  total_loss: 4.396  loss_sem_seg: 2.577  loss_center: 0.6578  loss_offset: 1.087  time: 0.4331  data_time: 0.0274  lr: 0.0019716  max_mem: 11463M
[12/10 06:35:41 d2.utils.events]:  eta: 0:55:17  iter: 2339  total_loss: 3.883  loss_sem_seg: 2.109  loss_center: 0.6767  loss_offset: 0.8821  time: 0.4331  data_time: 0.0279  lr: 0.001967  max_mem: 11463M
[12/10 06:35:49 d2.utils.events]:  eta: 0:55:08  iter: 2359  total_loss: 3.781  loss_sem_seg: 2.03  loss_center: 0.6197  loss_offset: 1.046  time: 0.4331  data_time: 0.0264  lr: 0.0019623  max_mem: 11463M
[12/10 06:35:58 d2.utils.events]:  eta: 0:55:00  iter: 2379  total_loss: 3.848  loss_sem_seg: 2.103  loss_center: 0.6978  loss_offset: 0.9735  time: 0.4331  data_time: 0.0275  lr: 0.0019577  max_mem: 11463M
[12/10 06:36:07 d2.utils.events]:  eta: 0:54:51  iter: 2399  total_loss: 3.987  loss_sem_seg: 2.146  loss_center: 0.6226  loss_offset: 1.058  time: 0.4331  data_time: 0.0254  lr: 0.0019531  max_mem: 11463M
[12/10 06:36:15 d2.utils.events]:  eta: 0:54:42  iter: 2419  total_loss: 4.022  loss_sem_seg: 2.063  loss_center: 0.7248  loss_offset: 1.011  time: 0.4331  data_time: 0.0288  lr: 0.0019485  max_mem: 11463M
[12/10 06:36:24 d2.utils.events]:  eta: 0:54:34  iter: 2439  total_loss: 3.889  loss_sem_seg: 2.094  loss_center: 0.7213  loss_offset: 0.9239  time: 0.4331  data_time: 0.0268  lr: 0.0019438  max_mem: 11463M
[12/10 06:36:33 d2.utils.events]:  eta: 0:54:25  iter: 2459  total_loss: 3.958  loss_sem_seg: 2.223  loss_center: 0.6721  loss_offset: 0.9694  time: 0.4331  data_time: 0.0275  lr: 0.0019392  max_mem: 11463M
[12/10 06:36:41 d2.utils.events]:  eta: 0:54:16  iter: 2479  total_loss: 3.864  loss_sem_seg: 2.048  loss_center: 0.7152  loss_offset: 1.018  time: 0.4331  data_time: 0.0274  lr: 0.0019346  max_mem: 11463M
[12/10 06:36:50 d2.utils.events]:  eta: 0:54:08  iter: 2499  total_loss: 3.539  loss_sem_seg: 1.827  loss_center: 0.7497  loss_offset: 0.9478  time: 0.4331  data_time: 0.0277  lr: 0.00193  max_mem: 11463M
[12/10 06:36:59 d2.utils.events]:  eta: 0:53:59  iter: 2519  total_loss: 3.758  loss_sem_seg: 1.844  loss_center: 0.6986  loss_offset: 1.001  time: 0.4331  data_time: 0.0266  lr: 0.0019253  max_mem: 11463M
[12/10 06:37:07 d2.utils.events]:  eta: 0:53:50  iter: 2539  total_loss: 3.933  loss_sem_seg: 2.064  loss_center: 0.7345  loss_offset: 0.9382  time: 0.4331  data_time: 0.0274  lr: 0.0019207  max_mem: 11463M
[12/10 06:37:16 d2.utils.events]:  eta: 0:53:42  iter: 2559  total_loss: 3.965  loss_sem_seg: 1.981  loss_center: 0.7294  loss_offset: 1.088  time: 0.4331  data_time: 0.0259  lr: 0.0019161  max_mem: 11463M
[12/10 06:37:25 d2.utils.events]:  eta: 0:53:33  iter: 2579  total_loss: 3.827  loss_sem_seg: 2.104  loss_center: 0.7002  loss_offset: 0.9315  time: 0.4331  data_time: 0.0277  lr: 0.0019114  max_mem: 11463M
[12/10 06:37:33 d2.utils.events]:  eta: 0:53:24  iter: 2599  total_loss: 3.947  loss_sem_seg: 2.042  loss_center: 0.7197  loss_offset: 0.9721  time: 0.4331  data_time: 0.0278  lr: 0.0019068  max_mem: 11463M
[12/10 06:37:42 d2.utils.events]:  eta: 0:53:15  iter: 2619  total_loss: 3.87  loss_sem_seg: 1.91  loss_center: 0.7753  loss_offset: 0.9242  time: 0.4331  data_time: 0.0267  lr: 0.0019021  max_mem: 11463M
[12/10 06:37:51 d2.utils.events]:  eta: 0:53:07  iter: 2639  total_loss: 3.964  loss_sem_seg: 2.046  loss_center: 0.8682  loss_offset: 1.078  time: 0.4331  data_time: 0.0265  lr: 0.0018975  max_mem: 11463M
[12/10 06:37:59 d2.utils.events]:  eta: 0:52:58  iter: 2659  total_loss: 3.973  loss_sem_seg: 2.144  loss_center: 0.7774  loss_offset: 0.9385  time: 0.4331  data_time: 0.0267  lr: 0.0018929  max_mem: 11463M
[12/10 06:38:08 d2.utils.events]:  eta: 0:52:49  iter: 2679  total_loss: 3.865  loss_sem_seg: 2.245  loss_center: 0.738  loss_offset: 0.9716  time: 0.4331  data_time: 0.0285  lr: 0.0018882  max_mem: 11463M
[12/10 06:38:17 d2.utils.events]:  eta: 0:52:41  iter: 2699  total_loss: 4.2  loss_sem_seg: 2.407  loss_center: 0.8286  loss_offset: 1.05  time: 0.4331  data_time: 0.0269  lr: 0.0018836  max_mem: 11463M
[12/10 06:38:25 d2.utils.events]:  eta: 0:52:32  iter: 2719  total_loss: 3.767  loss_sem_seg: 2.158  loss_center: 0.5986  loss_offset: 1.046  time: 0.4331  data_time: 0.0263  lr: 0.0018789  max_mem: 11463M
[12/10 06:38:34 d2.utils.events]:  eta: 0:52:22  iter: 2739  total_loss: 3.914  loss_sem_seg: 2.023  loss_center: 0.7209  loss_offset: 0.9984  time: 0.4331  data_time: 0.0275  lr: 0.0018743  max_mem: 11463M
[12/10 06:38:43 d2.utils.events]:  eta: 0:52:14  iter: 2759  total_loss: 3.971  loss_sem_seg: 2.149  loss_center: 0.7699  loss_offset: 0.9681  time: 0.4331  data_time: 0.0266  lr: 0.0018696  max_mem: 11463M
[12/10 06:38:52 d2.utils.events]:  eta: 0:52:05  iter: 2779  total_loss: 3.868  loss_sem_seg: 2.102  loss_center: 0.6771  loss_offset: 0.9911  time: 0.4332  data_time: 0.0273  lr: 0.001865  max_mem: 11463M
[12/10 06:39:00 d2.utils.events]:  eta: 0:51:57  iter: 2799  total_loss: 3.986  loss_sem_seg: 2.135  loss_center: 0.5669  loss_offset: 1.014  time: 0.4332  data_time: 0.0295  lr: 0.0018603  max_mem: 11463M
[12/10 06:39:09 d2.utils.events]:  eta: 0:51:49  iter: 2819  total_loss: 3.812  loss_sem_seg: 2.127  loss_center: 0.72  loss_offset: 0.9374  time: 0.4332  data_time: 0.0272  lr: 0.0018557  max_mem: 11463M
[12/10 06:39:18 d2.utils.events]:  eta: 0:51:41  iter: 2839  total_loss: 3.673  loss_sem_seg: 1.983  loss_center: 0.7148  loss_offset: 0.9942  time: 0.4332  data_time: 0.0289  lr: 0.001851  max_mem: 11463M
[12/10 06:39:26 d2.utils.events]:  eta: 0:51:32  iter: 2859  total_loss: 3.861  loss_sem_seg: 2.171  loss_center: 0.7033  loss_offset: 0.9114  time: 0.4332  data_time: 0.0256  lr: 0.0018464  max_mem: 11463M
[12/10 06:39:35 d2.utils.events]:  eta: 0:51:24  iter: 2879  total_loss: 3.821  loss_sem_seg: 2.25  loss_center: 0.7439  loss_offset: 0.9048  time: 0.4332  data_time: 0.0287  lr: 0.0018417  max_mem: 11463M
[12/10 06:39:44 d2.utils.events]:  eta: 0:51:16  iter: 2899  total_loss: 3.912  loss_sem_seg: 2.098  loss_center: 0.7621  loss_offset: 1.128  time: 0.4332  data_time: 0.0270  lr: 0.0018371  max_mem: 11463M
[12/10 06:39:52 d2.utils.events]:  eta: 0:51:07  iter: 2919  total_loss: 3.594  loss_sem_seg: 2.027  loss_center: 0.7278  loss_offset: 0.993  time: 0.4332  data_time: 0.0283  lr: 0.0018324  max_mem: 11463M
[12/10 06:40:01 d2.utils.events]:  eta: 0:50:58  iter: 2939  total_loss: 3.921  loss_sem_seg: 2.267  loss_center: 0.6358  loss_offset: 1.026  time: 0.4332  data_time: 0.0291  lr: 0.0018278  max_mem: 11463M
[12/10 06:40:10 d2.utils.events]:  eta: 0:50:49  iter: 2959  total_loss: 3.984  loss_sem_seg: 2.214  loss_center: 0.7296  loss_offset: 0.9757  time: 0.4332  data_time: 0.0290  lr: 0.0018231  max_mem: 11463M
[12/10 06:40:18 d2.utils.events]:  eta: 0:50:40  iter: 2979  total_loss: 3.729  loss_sem_seg: 2.033  loss_center: 0.6869  loss_offset: 0.8927  time: 0.4332  data_time: 0.0261  lr: 0.0018184  max_mem: 11463M
[12/10 06:40:27 d2.utils.events]:  eta: 0:50:30  iter: 2999  total_loss: 3.385  loss_sem_seg: 1.918  loss_center: 0.654  loss_offset: 0.927  time: 0.4332  data_time: 0.0278  lr: 0.0018138  max_mem: 11463M
[12/10 06:40:36 d2.utils.events]:  eta: 0:50:22  iter: 3019  total_loss: 3.839  loss_sem_seg: 2.211  loss_center: 0.5599  loss_offset: 1.018  time: 0.4332  data_time: 0.0271  lr: 0.0018091  max_mem: 11463M
[12/10 06:40:44 d2.utils.events]:  eta: 0:50:14  iter: 3039  total_loss: 3.955  loss_sem_seg: 2.007  loss_center: 0.8211  loss_offset: 0.9344  time: 0.4332  data_time: 0.0278  lr: 0.0018044  max_mem: 11463M
[12/10 06:40:53 d2.utils.events]:  eta: 0:50:05  iter: 3059  total_loss: 3.806  loss_sem_seg: 1.998  loss_center: 0.6418  loss_offset: 1.039  time: 0.4332  data_time: 0.0260  lr: 0.0017998  max_mem: 11463M
[12/10 06:41:02 d2.utils.events]:  eta: 0:49:56  iter: 3079  total_loss: 3.603  loss_sem_seg: 2.072  loss_center: 0.6577  loss_offset: 1.045  time: 0.4332  data_time: 0.0274  lr: 0.0017951  max_mem: 11463M
[12/10 06:41:11 d2.utils.events]:  eta: 0:49:48  iter: 3099  total_loss: 3.604  loss_sem_seg: 1.976  loss_center: 0.6624  loss_offset: 0.9339  time: 0.4333  data_time: 0.0292  lr: 0.0017904  max_mem: 11463M
[12/10 06:41:19 d2.utils.events]:  eta: 0:49:39  iter: 3119  total_loss: 3.893  loss_sem_seg: 2.25  loss_center: 0.6044  loss_offset: 0.9641  time: 0.4333  data_time: 0.0285  lr: 0.0017858  max_mem: 11463M
[12/10 06:41:28 d2.utils.events]:  eta: 0:49:31  iter: 3139  total_loss: 3.787  loss_sem_seg: 2.05  loss_center: 0.5978  loss_offset: 0.989  time: 0.4333  data_time: 0.0283  lr: 0.0017811  max_mem: 11463M
[12/10 06:41:37 d2.utils.events]:  eta: 0:49:22  iter: 3159  total_loss: 3.625  loss_sem_seg: 2.031  loss_center: 0.5955  loss_offset: 0.9015  time: 0.4333  data_time: 0.0274  lr: 0.0017764  max_mem: 11463M
[12/10 06:41:45 d2.utils.events]:  eta: 0:49:14  iter: 3179  total_loss: 3.628  loss_sem_seg: 1.944  loss_center: 0.6199  loss_offset: 0.9937  time: 0.4333  data_time: 0.0293  lr: 0.0017718  max_mem: 11463M
[12/10 06:41:54 d2.utils.events]:  eta: 0:49:05  iter: 3199  total_loss: 3.754  loss_sem_seg: 2.038  loss_center: 0.583  loss_offset: 0.95  time: 0.4333  data_time: 0.0262  lr: 0.0017671  max_mem: 11463M
[12/10 06:42:03 d2.utils.events]:  eta: 0:48:57  iter: 3219  total_loss: 3.778  loss_sem_seg: 2.112  loss_center: 0.6367  loss_offset: 0.9511  time: 0.4333  data_time: 0.0282  lr: 0.0017624  max_mem: 11463M
[12/10 06:42:12 d2.utils.events]:  eta: 0:48:48  iter: 3239  total_loss: 3.849  loss_sem_seg: 2.168  loss_center: 0.6303  loss_offset: 0.936  time: 0.4333  data_time: 0.0267  lr: 0.0017577  max_mem: 11463M
[12/10 06:42:20 d2.utils.events]:  eta: 0:48:39  iter: 3259  total_loss: 3.516  loss_sem_seg: 1.957  loss_center: 0.5438  loss_offset: 0.9777  time: 0.4333  data_time: 0.0275  lr: 0.001753  max_mem: 11463M
[12/10 06:42:29 d2.utils.events]:  eta: 0:48:30  iter: 3279  total_loss: 3.566  loss_sem_seg: 1.851  loss_center: 0.6676  loss_offset: 1.003  time: 0.4333  data_time: 0.0269  lr: 0.0017484  max_mem: 11463M
[12/10 06:42:37 d2.utils.events]:  eta: 0:48:21  iter: 3299  total_loss: 3.723  loss_sem_seg: 2.135  loss_center: 0.7023  loss_offset: 0.9174  time: 0.4333  data_time: 0.0253  lr: 0.0017437  max_mem: 11463M
[12/10 06:42:46 d2.utils.events]:  eta: 0:48:12  iter: 3319  total_loss: 3.733  loss_sem_seg: 2.005  loss_center: 0.6716  loss_offset: 0.9831  time: 0.4333  data_time: 0.0271  lr: 0.001739  max_mem: 11463M
[12/10 06:42:55 d2.utils.events]:  eta: 0:48:02  iter: 3339  total_loss: 3.678  loss_sem_seg: 1.925  loss_center: 0.6479  loss_offset: 0.9032  time: 0.4333  data_time: 0.0267  lr: 0.0017343  max_mem: 11463M
[12/10 06:43:04 d2.utils.events]:  eta: 0:47:53  iter: 3359  total_loss: 3.901  loss_sem_seg: 2.064  loss_center: 0.6207  loss_offset: 1.017  time: 0.4333  data_time: 0.0266  lr: 0.0017296  max_mem: 11463M
[12/10 06:43:12 d2.utils.events]:  eta: 0:47:44  iter: 3379  total_loss: 3.606  loss_sem_seg: 1.792  loss_center: 0.6088  loss_offset: 1.045  time: 0.4333  data_time: 0.0264  lr: 0.0017249  max_mem: 11463M
[12/10 06:43:21 d2.utils.events]:  eta: 0:47:35  iter: 3399  total_loss: 3.51  loss_sem_seg: 1.897  loss_center: 0.5431  loss_offset: 0.8874  time: 0.4333  data_time: 0.0272  lr: 0.0017202  max_mem: 11463M
[12/10 06:43:29 d2.utils.events]:  eta: 0:47:26  iter: 3419  total_loss: 3.544  loss_sem_seg: 2.061  loss_center: 0.6379  loss_offset: 0.9036  time: 0.4333  data_time: 0.0276  lr: 0.0017155  max_mem: 11463M
[12/10 06:43:38 d2.utils.events]:  eta: 0:47:18  iter: 3439  total_loss: 3.551  loss_sem_seg: 2.036  loss_center: 0.6541  loss_offset: 0.9111  time: 0.4333  data_time: 0.0275  lr: 0.0017109  max_mem: 11463M
[12/10 06:43:47 d2.utils.events]:  eta: 0:47:09  iter: 3459  total_loss: 3.644  loss_sem_seg: 1.939  loss_center: 0.6764  loss_offset: 1.03  time: 0.4333  data_time: 0.0255  lr: 0.0017062  max_mem: 11463M
[12/10 06:43:55 d2.utils.events]:  eta: 0:47:00  iter: 3479  total_loss: 3.617  loss_sem_seg: 1.978  loss_center: 0.6397  loss_offset: 0.9114  time: 0.4333  data_time: 0.0261  lr: 0.0017015  max_mem: 11463M
[12/10 06:44:04 d2.utils.events]:  eta: 0:46:52  iter: 3499  total_loss: 3.827  loss_sem_seg: 1.697  loss_center: 0.8665  loss_offset: 0.9154  time: 0.4333  data_time: 0.0271  lr: 0.0016968  max_mem: 11463M
[12/10 06:44:13 d2.utils.events]:  eta: 0:46:44  iter: 3519  total_loss: 3.603  loss_sem_seg: 2.062  loss_center: 0.6416  loss_offset: 0.879  time: 0.4333  data_time: 0.0280  lr: 0.0016921  max_mem: 11463M
[12/10 06:44:22 d2.utils.events]:  eta: 0:46:35  iter: 3539  total_loss: 3.526  loss_sem_seg: 1.968  loss_center: 0.7346  loss_offset: 0.9428  time: 0.4333  data_time: 0.0282  lr: 0.0016874  max_mem: 11463M
[12/10 06:44:30 d2.utils.events]:  eta: 0:46:26  iter: 3559  total_loss: 3.706  loss_sem_seg: 1.773  loss_center: 0.7359  loss_offset: 0.9213  time: 0.4333  data_time: 0.0256  lr: 0.0016827  max_mem: 11463M
[12/10 06:44:39 d2.utils.events]:  eta: 0:46:18  iter: 3579  total_loss: 3.91  loss_sem_seg: 2.052  loss_center: 0.8164  loss_offset: 0.9248  time: 0.4333  data_time: 0.0279  lr: 0.001678  max_mem: 11463M
[12/10 06:44:48 d2.utils.events]:  eta: 0:46:09  iter: 3599  total_loss: 3.898  loss_sem_seg: 2.163  loss_center: 0.7985  loss_offset: 0.9331  time: 0.4333  data_time: 0.0282  lr: 0.0016733  max_mem: 11463M
[12/10 06:44:56 d2.utils.events]:  eta: 0:46:01  iter: 3619  total_loss: 3.746  loss_sem_seg: 2.125  loss_center: 0.6286  loss_offset: 0.8342  time: 0.4333  data_time: 0.0274  lr: 0.0016686  max_mem: 11463M
[12/10 06:45:05 d2.utils.events]:  eta: 0:45:52  iter: 3639  total_loss: 3.802  loss_sem_seg: 2.044  loss_center: 0.6004  loss_offset: 1.095  time: 0.4333  data_time: 0.0268  lr: 0.0016638  max_mem: 11463M
[12/10 06:45:14 d2.utils.events]:  eta: 0:45:43  iter: 3659  total_loss: 3.853  loss_sem_seg: 2.063  loss_center: 0.7308  loss_offset: 0.9981  time: 0.4333  data_time: 0.0269  lr: 0.0016591  max_mem: 11463M
[12/10 06:45:22 d2.utils.events]:  eta: 0:45:34  iter: 3679  total_loss: 3.909  loss_sem_seg: 2.057  loss_center: 0.7344  loss_offset: 0.9698  time: 0.4333  data_time: 0.0276  lr: 0.0016544  max_mem: 11463M
[12/10 06:45:31 d2.utils.events]:  eta: 0:45:26  iter: 3699  total_loss: 3.829  loss_sem_seg: 2.188  loss_center: 0.704  loss_offset: 0.9803  time: 0.4333  data_time: 0.0278  lr: 0.0016497  max_mem: 11463M
[12/10 06:45:40 d2.utils.events]:  eta: 0:45:17  iter: 3719  total_loss: 3.508  loss_sem_seg: 1.827  loss_center: 0.7296  loss_offset: 0.9618  time: 0.4333  data_time: 0.0283  lr: 0.001645  max_mem: 11463M
[12/10 06:45:48 d2.utils.events]:  eta: 0:45:09  iter: 3739  total_loss: 3.17  loss_sem_seg: 1.714  loss_center: 0.6267  loss_offset: 0.8928  time: 0.4333  data_time: 0.0282  lr: 0.0016403  max_mem: 11463M
[12/10 06:45:57 d2.utils.events]:  eta: 0:45:00  iter: 3759  total_loss: 3.572  loss_sem_seg: 2.066  loss_center: 0.6251  loss_offset: 0.8834  time: 0.4333  data_time: 0.0290  lr: 0.0016356  max_mem: 11463M
[12/10 06:46:06 d2.utils.events]:  eta: 0:44:52  iter: 3779  total_loss: 3.783  loss_sem_seg: 1.973  loss_center: 0.6447  loss_offset: 1.042  time: 0.4333  data_time: 0.0274  lr: 0.0016309  max_mem: 11463M
[12/10 06:46:15 d2.utils.events]:  eta: 0:44:43  iter: 3799  total_loss: 3.483  loss_sem_seg: 1.908  loss_center: 0.5523  loss_offset: 0.9265  time: 0.4333  data_time: 0.0285  lr: 0.0016261  max_mem: 11463M
[12/10 06:46:23 d2.utils.events]:  eta: 0:44:34  iter: 3819  total_loss: 3.555  loss_sem_seg: 1.92  loss_center: 0.5196  loss_offset: 0.8853  time: 0.4334  data_time: 0.0272  lr: 0.0016214  max_mem: 11463M
[12/10 06:46:32 d2.utils.events]:  eta: 0:44:26  iter: 3839  total_loss: 3.427  loss_sem_seg: 1.874  loss_center: 0.5852  loss_offset: 0.8833  time: 0.4334  data_time: 0.0283  lr: 0.0016167  max_mem: 11463M
[12/10 06:46:41 d2.utils.events]:  eta: 0:44:18  iter: 3859  total_loss: 3.496  loss_sem_seg: 2.014  loss_center: 0.6875  loss_offset: 0.8218  time: 0.4334  data_time: 0.0279  lr: 0.001612  max_mem: 11463M
[12/10 06:46:49 d2.utils.events]:  eta: 0:44:09  iter: 3879  total_loss: 3.488  loss_sem_seg: 1.779  loss_center: 0.8427  loss_offset: 0.8747  time: 0.4334  data_time: 0.0275  lr: 0.0016072  max_mem: 11463M
[12/10 06:46:58 d2.utils.events]:  eta: 0:44:00  iter: 3899  total_loss: 3.456  loss_sem_seg: 1.791  loss_center: 0.7128  loss_offset: 0.849  time: 0.4334  data_time: 0.0259  lr: 0.0016025  max_mem: 11463M
[12/10 06:47:07 d2.utils.events]:  eta: 0:43:52  iter: 3919  total_loss: 3.764  loss_sem_seg: 1.994  loss_center: 0.9286  loss_offset: 0.9171  time: 0.4334  data_time: 0.0270  lr: 0.0015978  max_mem: 11463M
[12/10 06:47:15 d2.utils.events]:  eta: 0:43:44  iter: 3939  total_loss: 3.423  loss_sem_seg: 1.832  loss_center: 0.6891  loss_offset: 0.9515  time: 0.4334  data_time: 0.0272  lr: 0.0015931  max_mem: 11463M
[12/10 06:47:24 d2.utils.events]:  eta: 0:43:36  iter: 3959  total_loss: 3.571  loss_sem_seg: 1.766  loss_center: 0.6565  loss_offset: 1.006  time: 0.4334  data_time: 0.0268  lr: 0.0015883  max_mem: 11463M
[12/10 06:47:33 d2.utils.events]:  eta: 0:43:29  iter: 3979  total_loss: 3.55  loss_sem_seg: 1.952  loss_center: 0.6662  loss_offset: 0.8731  time: 0.4334  data_time: 0.0281  lr: 0.0015836  max_mem: 11463M
[12/10 06:47:41 d2.utils.events]:  eta: 0:43:20  iter: 3999  total_loss: 3.722  loss_sem_seg: 2.084  loss_center: 0.5679  loss_offset: 0.9227  time: 0.4334  data_time: 0.0264  lr: 0.0015789  max_mem: 11463M
[12/10 06:47:50 d2.utils.events]:  eta: 0:43:11  iter: 4019  total_loss: 3.408  loss_sem_seg: 1.977  loss_center: 0.5902  loss_offset: 0.9636  time: 0.4334  data_time: 0.0262  lr: 0.0015741  max_mem: 11463M
[12/10 06:47:59 d2.utils.events]:  eta: 0:43:00  iter: 4039  total_loss: 3.343  loss_sem_seg: 1.813  loss_center: 0.6341  loss_offset: 1.054  time: 0.4333  data_time: 0.0262  lr: 0.0015694  max_mem: 11463M
[12/10 06:48:07 d2.utils.events]:  eta: 0:42:53  iter: 4059  total_loss: 3.462  loss_sem_seg: 1.925  loss_center: 0.6189  loss_offset: 1.008  time: 0.4333  data_time: 0.0260  lr: 0.0015646  max_mem: 11463M
[12/10 06:48:16 d2.utils.events]:  eta: 0:42:45  iter: 4079  total_loss: 3.87  loss_sem_seg: 2.049  loss_center: 0.7343  loss_offset: 1  time: 0.4333  data_time: 0.0270  lr: 0.0015599  max_mem: 11463M
[12/10 06:48:25 d2.utils.events]:  eta: 0:42:35  iter: 4099  total_loss: 3.79  loss_sem_seg: 2.111  loss_center: 0.6875  loss_offset: 0.9844  time: 0.4333  data_time: 0.0277  lr: 0.0015552  max_mem: 11463M
[12/10 06:48:33 d2.utils.events]:  eta: 0:42:26  iter: 4119  total_loss: 3.74  loss_sem_seg: 1.841  loss_center: 0.6341  loss_offset: 0.9318  time: 0.4333  data_time: 0.0255  lr: 0.0015504  max_mem: 11463M
[12/10 06:48:42 d2.utils.events]:  eta: 0:42:16  iter: 4139  total_loss: 3.56  loss_sem_seg: 1.787  loss_center: 0.6472  loss_offset: 0.95  time: 0.4333  data_time: 0.0282  lr: 0.0015457  max_mem: 11463M
[12/10 06:48:51 d2.utils.events]:  eta: 0:42:07  iter: 4159  total_loss: 3.433  loss_sem_seg: 1.813  loss_center: 0.5319  loss_offset: 0.9249  time: 0.4333  data_time: 0.0273  lr: 0.0015409  max_mem: 11463M
[12/10 06:48:59 d2.utils.events]:  eta: 0:41:59  iter: 4179  total_loss: 3.231  loss_sem_seg: 1.899  loss_center: 0.5844  loss_offset: 0.7843  time: 0.4333  data_time: 0.0280  lr: 0.0015362  max_mem: 11463M
[12/10 06:49:08 d2.utils.events]:  eta: 0:41:50  iter: 4199  total_loss: 3.605  loss_sem_seg: 1.812  loss_center: 0.729  loss_offset: 0.9812  time: 0.4334  data_time: 0.0280  lr: 0.0015314  max_mem: 11463M
[12/10 06:49:17 d2.utils.events]:  eta: 0:41:41  iter: 4219  total_loss: 3.444  loss_sem_seg: 1.81  loss_center: 0.6967  loss_offset: 0.9177  time: 0.4334  data_time: 0.0273  lr: 0.0015267  max_mem: 11463M
[12/10 06:49:25 d2.utils.events]:  eta: 0:41:32  iter: 4239  total_loss: 3.532  loss_sem_seg: 1.84  loss_center: 0.738  loss_offset: 0.8284  time: 0.4334  data_time: 0.0275  lr: 0.0015219  max_mem: 11463M
[12/10 06:49:34 d2.utils.events]:  eta: 0:41:23  iter: 4259  total_loss: 3.257  loss_sem_seg: 1.715  loss_center: 0.7034  loss_offset: 0.8606  time: 0.4334  data_time: 0.0280  lr: 0.0015172  max_mem: 11463M
[12/10 06:49:43 d2.utils.events]:  eta: 0:41:15  iter: 4279  total_loss: 3.593  loss_sem_seg: 2.071  loss_center: 0.5088  loss_offset: 1.014  time: 0.4334  data_time: 0.0276  lr: 0.0015124  max_mem: 11463M
[12/10 06:49:52 d2.utils.events]:  eta: 0:41:07  iter: 4299  total_loss: 3.736  loss_sem_seg: 2.097  loss_center: 0.5911  loss_offset: 0.9742  time: 0.4334  data_time: 0.0285  lr: 0.0015076  max_mem: 11463M
[12/10 06:50:00 d2.utils.events]:  eta: 0:40:57  iter: 4319  total_loss: 3.535  loss_sem_seg: 2.125  loss_center: 0.6251  loss_offset: 0.9507  time: 0.4334  data_time: 0.0260  lr: 0.0015029  max_mem: 11463M
[12/10 06:50:09 d2.utils.events]:  eta: 0:40:49  iter: 4339  total_loss: 3.529  loss_sem_seg: 1.88  loss_center: 0.5653  loss_offset: 0.9195  time: 0.4334  data_time: 0.0280  lr: 0.0014981  max_mem: 11463M
[12/10 06:50:17 d2.utils.events]:  eta: 0:40:40  iter: 4359  total_loss: 3.625  loss_sem_seg: 1.811  loss_center: 0.7471  loss_offset: 0.9646  time: 0.4334  data_time: 0.0273  lr: 0.0014933  max_mem: 11463M
[12/10 06:50:26 d2.utils.events]:  eta: 0:40:31  iter: 4379  total_loss: 3.401  loss_sem_seg: 1.727  loss_center: 0.5414  loss_offset: 0.911  time: 0.4334  data_time: 0.0296  lr: 0.0014886  max_mem: 11463M
[12/10 06:50:35 d2.utils.events]:  eta: 0:40:23  iter: 4399  total_loss: 3.407  loss_sem_seg: 1.927  loss_center: 0.6295  loss_offset: 0.862  time: 0.4334  data_time: 0.0283  lr: 0.0014838  max_mem: 11463M
[12/10 06:50:44 d2.utils.events]:  eta: 0:40:14  iter: 4419  total_loss: 3.545  loss_sem_seg: 1.972  loss_center: 0.6776  loss_offset: 0.9319  time: 0.4334  data_time: 0.0261  lr: 0.001479  max_mem: 11463M
[12/10 06:50:52 d2.utils.events]:  eta: 0:40:05  iter: 4439  total_loss: 3.396  loss_sem_seg: 1.673  loss_center: 0.6618  loss_offset: 0.8507  time: 0.4334  data_time: 0.0261  lr: 0.0014743  max_mem: 11463M
[12/10 06:51:01 d2.utils.events]:  eta: 0:39:57  iter: 4459  total_loss: 3.601  loss_sem_seg: 1.969  loss_center: 0.6367  loss_offset: 1.001  time: 0.4334  data_time: 0.0292  lr: 0.0014695  max_mem: 11463M
[12/10 06:51:10 d2.utils.events]:  eta: 0:39:49  iter: 4479  total_loss: 3.277  loss_sem_seg: 1.521  loss_center: 0.6402  loss_offset: 0.8374  time: 0.4334  data_time: 0.0255  lr: 0.0014647  max_mem: 11463M
[12/10 06:51:18 d2.utils.events]:  eta: 0:39:40  iter: 4499  total_loss: 3.421  loss_sem_seg: 1.695  loss_center: 0.6164  loss_offset: 0.9542  time: 0.4334  data_time: 0.0278  lr: 0.0014599  max_mem: 11463M
[12/10 06:51:27 d2.utils.events]:  eta: 0:39:31  iter: 4519  total_loss: 3.359  loss_sem_seg: 1.643  loss_center: 0.7386  loss_offset: 0.8998  time: 0.4334  data_time: 0.0271  lr: 0.0014552  max_mem: 11463M
[12/10 06:51:36 d2.utils.events]:  eta: 0:39:24  iter: 4539  total_loss: 3.89  loss_sem_seg: 2.173  loss_center: 0.589  loss_offset: 0.9698  time: 0.4334  data_time: 0.0277  lr: 0.0014504  max_mem: 11463M
[12/10 06:51:44 d2.utils.events]:  eta: 0:39:15  iter: 4559  total_loss: 3.587  loss_sem_seg: 1.874  loss_center: 0.713  loss_offset: 0.8916  time: 0.4334  data_time: 0.0272  lr: 0.0014456  max_mem: 11463M
[12/10 06:51:53 d2.utils.events]:  eta: 0:39:05  iter: 4579  total_loss: 3.62  loss_sem_seg: 2.079  loss_center: 0.5947  loss_offset: 0.9158  time: 0.4334  data_time: 0.0277  lr: 0.0014408  max_mem: 11463M
[12/10 06:52:02 d2.utils.events]:  eta: 0:38:57  iter: 4599  total_loss: 3.552  loss_sem_seg: 1.902  loss_center: 0.6215  loss_offset: 0.9849  time: 0.4334  data_time: 0.0262  lr: 0.001436  max_mem: 11463M
[12/10 06:52:10 d2.utils.events]:  eta: 0:38:48  iter: 4619  total_loss: 3.462  loss_sem_seg: 1.845  loss_center: 0.7193  loss_offset: 0.8366  time: 0.4334  data_time: 0.0275  lr: 0.0014313  max_mem: 11463M
[12/10 06:52:19 d2.utils.events]:  eta: 0:38:41  iter: 4639  total_loss: 3.703  loss_sem_seg: 1.823  loss_center: 0.684  loss_offset: 0.8936  time: 0.4334  data_time: 0.0285  lr: 0.0014265  max_mem: 11463M
[12/10 06:52:28 d2.utils.events]:  eta: 0:38:32  iter: 4659  total_loss: 3.423  loss_sem_seg: 1.86  loss_center: 0.6974  loss_offset: 0.9063  time: 0.4334  data_time: 0.0273  lr: 0.0014217  max_mem: 11463M
[12/10 06:52:36 d2.utils.events]:  eta: 0:38:23  iter: 4679  total_loss: 3.621  loss_sem_seg: 1.91  loss_center: 0.732  loss_offset: 0.8984  time: 0.4334  data_time: 0.0273  lr: 0.0014169  max_mem: 11463M
[12/10 06:52:45 d2.utils.events]:  eta: 0:38:15  iter: 4699  total_loss: 3.319  loss_sem_seg: 1.652  loss_center: 0.5239  loss_offset: 0.8027  time: 0.4334  data_time: 0.0281  lr: 0.0014121  max_mem: 11463M
[12/10 06:52:54 d2.utils.events]:  eta: 0:38:06  iter: 4719  total_loss: 3.289  loss_sem_seg: 1.75  loss_center: 0.6723  loss_offset: 0.887  time: 0.4334  data_time: 0.0260  lr: 0.0014073  max_mem: 11463M
[12/10 06:53:02 d2.utils.events]:  eta: 0:37:57  iter: 4739  total_loss: 3.331  loss_sem_seg: 1.503  loss_center: 0.7715  loss_offset: 0.8647  time: 0.4334  data_time: 0.0260  lr: 0.0014025  max_mem: 11463M
[12/10 06:53:11 d2.utils.events]:  eta: 0:37:48  iter: 4759  total_loss: 3.444  loss_sem_seg: 1.821  loss_center: 0.566  loss_offset: 0.9154  time: 0.4334  data_time: 0.0275  lr: 0.0013977  max_mem: 11463M
[12/10 06:53:20 d2.utils.events]:  eta: 0:37:38  iter: 4779  total_loss: 3.529  loss_sem_seg: 1.817  loss_center: 0.7059  loss_offset: 0.9573  time: 0.4334  data_time: 0.0282  lr: 0.0013929  max_mem: 11463M
[12/10 06:53:28 d2.utils.events]:  eta: 0:37:29  iter: 4799  total_loss: 3.544  loss_sem_seg: 1.987  loss_center: 0.6574  loss_offset: 0.8692  time: 0.4334  data_time: 0.0263  lr: 0.0013881  max_mem: 11463M
[12/10 06:53:37 d2.utils.events]:  eta: 0:37:21  iter: 4819  total_loss: 3.42  loss_sem_seg: 1.8  loss_center: 0.6785  loss_offset: 0.8256  time: 0.4334  data_time: 0.0282  lr: 0.0013833  max_mem: 11463M
[12/10 06:53:46 d2.utils.events]:  eta: 0:37:11  iter: 4839  total_loss: 3.186  loss_sem_seg: 1.706  loss_center: 0.5547  loss_offset: 0.8803  time: 0.4334  data_time: 0.0273  lr: 0.0013785  max_mem: 11463M
[12/10 06:53:54 d2.utils.events]:  eta: 0:37:02  iter: 4859  total_loss: 3.901  loss_sem_seg: 2.044  loss_center: 0.8727  loss_offset: 0.9017  time: 0.4334  data_time: 0.0262  lr: 0.0013737  max_mem: 11463M
[12/10 06:54:03 d2.utils.events]:  eta: 0:36:55  iter: 4879  total_loss: 3.479  loss_sem_seg: 2.063  loss_center: 0.5407  loss_offset: 0.9369  time: 0.4334  data_time: 0.0277  lr: 0.0013689  max_mem: 11463M
[12/10 06:54:12 d2.utils.events]:  eta: 0:36:46  iter: 4899  total_loss: 3.624  loss_sem_seg: 1.938  loss_center: 0.7067  loss_offset: 0.8962  time: 0.4334  data_time: 0.0290  lr: 0.001364  max_mem: 11463M
[12/10 06:54:20 d2.utils.events]:  eta: 0:36:37  iter: 4919  total_loss: 3.391  loss_sem_seg: 1.62  loss_center: 0.6104  loss_offset: 0.9378  time: 0.4334  data_time: 0.0265  lr: 0.0013592  max_mem: 11463M
[12/10 06:54:29 d2.utils.events]:  eta: 0:36:29  iter: 4939  total_loss: 3.398  loss_sem_seg: 1.792  loss_center: 0.834  loss_offset: 0.7818  time: 0.4334  data_time: 0.0260  lr: 0.0013544  max_mem: 11463M
[12/10 06:54:38 d2.utils.events]:  eta: 0:36:20  iter: 4959  total_loss: 3.403  loss_sem_seg: 1.854  loss_center: 0.6658  loss_offset: 0.9179  time: 0.4334  data_time: 0.0264  lr: 0.0013496  max_mem: 11463M
[12/10 06:54:47 d2.utils.events]:  eta: 0:36:12  iter: 4979  total_loss: 3.618  loss_sem_seg: 2.078  loss_center: 0.5104  loss_offset: 0.9986  time: 0.4334  data_time: 0.0283  lr: 0.0013448  max_mem: 11463M
[12/10 06:54:55 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0004999.pth
[12/10 06:54:56 d2.utils.events]:  eta: 0:36:03  iter: 4999  total_loss: 3.59  loss_sem_seg: 1.912  loss_center: 0.6572  loss_offset: 0.956  time: 0.4334  data_time: 0.0265  lr: 0.00134  max_mem: 11463M
[12/10 06:55:05 d2.utils.events]:  eta: 0:35:54  iter: 5019  total_loss: 3.74  loss_sem_seg: 2.129  loss_center: 0.655  loss_offset: 0.91  time: 0.4334  data_time: 0.0274  lr: 0.0013351  max_mem: 11463M
[12/10 06:55:14 d2.utils.events]:  eta: 0:35:45  iter: 5039  total_loss: 3.628  loss_sem_seg: 2.071  loss_center: 0.6544  loss_offset: 0.8356  time: 0.4334  data_time: 0.0272  lr: 0.0013303  max_mem: 11463M
[12/10 06:55:22 d2.utils.events]:  eta: 0:35:37  iter: 5059  total_loss: 3.615  loss_sem_seg: 1.878  loss_center: 0.6339  loss_offset: 0.977  time: 0.4334  data_time: 0.0263  lr: 0.0013255  max_mem: 11463M
[12/10 06:55:31 d2.utils.events]:  eta: 0:35:28  iter: 5079  total_loss: 3.16  loss_sem_seg: 1.653  loss_center: 0.7454  loss_offset: 0.8318  time: 0.4334  data_time: 0.0276  lr: 0.0013207  max_mem: 11463M
[12/10 06:55:40 d2.utils.events]:  eta: 0:35:19  iter: 5099  total_loss: 3.349  loss_sem_seg: 1.699  loss_center: 0.56  loss_offset: 0.8493  time: 0.4334  data_time: 0.0280  lr: 0.0013158  max_mem: 11463M
[12/10 06:55:49 d2.utils.events]:  eta: 0:35:11  iter: 5119  total_loss: 3.221  loss_sem_seg: 1.698  loss_center: 0.6755  loss_offset: 0.8697  time: 0.4334  data_time: 0.0283  lr: 0.001311  max_mem: 11463M
[12/10 06:55:57 d2.utils.events]:  eta: 0:35:02  iter: 5139  total_loss: 3.581  loss_sem_seg: 1.953  loss_center: 0.5882  loss_offset: 0.9426  time: 0.4334  data_time: 0.0272  lr: 0.0013062  max_mem: 11463M
[12/10 06:56:06 d2.utils.events]:  eta: 0:34:53  iter: 5159  total_loss: 3.369  loss_sem_seg: 1.827  loss_center: 0.6094  loss_offset: 0.862  time: 0.4334  data_time: 0.0264  lr: 0.0013013  max_mem: 11463M
[12/10 06:56:15 d2.utils.events]:  eta: 0:34:45  iter: 5179  total_loss: 3.591  loss_sem_seg: 1.861  loss_center: 0.6277  loss_offset: 1.029  time: 0.4334  data_time: 0.0278  lr: 0.0012965  max_mem: 11463M
[12/10 06:56:23 d2.utils.events]:  eta: 0:34:35  iter: 5199  total_loss: 3.334  loss_sem_seg: 1.85  loss_center: 0.6028  loss_offset: 0.9144  time: 0.4334  data_time: 0.0264  lr: 0.0012916  max_mem: 11463M
[12/10 06:56:32 d2.utils.events]:  eta: 0:34:27  iter: 5219  total_loss: 3.573  loss_sem_seg: 2.024  loss_center: 0.5967  loss_offset: 0.914  time: 0.4334  data_time: 0.0272  lr: 0.0012868  max_mem: 11463M
[12/10 06:56:41 d2.utils.events]:  eta: 0:34:19  iter: 5239  total_loss: 3.484  loss_sem_seg: 1.925  loss_center: 0.6335  loss_offset: 0.9018  time: 0.4334  data_time: 0.0259  lr: 0.0012819  max_mem: 11463M
[12/10 06:56:49 d2.utils.events]:  eta: 0:34:10  iter: 5259  total_loss: 3.614  loss_sem_seg: 2.026  loss_center: 0.7476  loss_offset: 0.8581  time: 0.4334  data_time: 0.0279  lr: 0.0012771  max_mem: 11463M
[12/10 06:56:58 d2.utils.events]:  eta: 0:34:01  iter: 5279  total_loss: 3.322  loss_sem_seg: 1.832  loss_center: 0.5269  loss_offset: 0.9016  time: 0.4334  data_time: 0.0261  lr: 0.0012722  max_mem: 11463M
[12/10 06:57:07 d2.utils.events]:  eta: 0:33:53  iter: 5299  total_loss: 3.626  loss_sem_seg: 2.009  loss_center: 0.8133  loss_offset: 0.8805  time: 0.4333  data_time: 0.0271  lr: 0.0012674  max_mem: 11463M
[12/10 06:57:15 d2.utils.events]:  eta: 0:33:44  iter: 5319  total_loss: 3.499  loss_sem_seg: 2.079  loss_center: 0.6211  loss_offset: 0.8617  time: 0.4333  data_time: 0.0254  lr: 0.0012625  max_mem: 11463M
[12/10 06:57:24 d2.utils.events]:  eta: 0:33:36  iter: 5339  total_loss: 3.301  loss_sem_seg: 1.75  loss_center: 0.5631  loss_offset: 1.011  time: 0.4333  data_time: 0.0257  lr: 0.0012577  max_mem: 11463M
[12/10 06:57:33 d2.utils.events]:  eta: 0:33:27  iter: 5359  total_loss: 3.385  loss_sem_seg: 1.944  loss_center: 0.6563  loss_offset: 0.883  time: 0.4333  data_time: 0.0267  lr: 0.0012528  max_mem: 11463M
[12/10 06:57:41 d2.utils.events]:  eta: 0:33:18  iter: 5379  total_loss: 3.247  loss_sem_seg: 1.744  loss_center: 0.5529  loss_offset: 0.8848  time: 0.4333  data_time: 0.0294  lr: 0.001248  max_mem: 11463M
[12/10 06:57:50 d2.utils.events]:  eta: 0:33:09  iter: 5399  total_loss: 3.32  loss_sem_seg: 1.781  loss_center: 0.6344  loss_offset: 0.8678  time: 0.4333  data_time: 0.0261  lr: 0.0012431  max_mem: 11463M
[12/10 06:57:59 d2.utils.events]:  eta: 0:33:01  iter: 5419  total_loss: 3.485  loss_sem_seg: 1.646  loss_center: 0.6549  loss_offset: 0.8774  time: 0.4333  data_time: 0.0273  lr: 0.0012382  max_mem: 11463M
[12/10 06:58:07 d2.utils.events]:  eta: 0:32:52  iter: 5439  total_loss: 3.716  loss_sem_seg: 1.952  loss_center: 0.5974  loss_offset: 0.9724  time: 0.4333  data_time: 0.0272  lr: 0.0012334  max_mem: 11463M
[12/10 06:58:16 d2.utils.events]:  eta: 0:32:43  iter: 5459  total_loss: 3.328  loss_sem_seg: 1.752  loss_center: 0.6534  loss_offset: 0.8398  time: 0.4333  data_time: 0.0273  lr: 0.0012285  max_mem: 11463M
[12/10 06:58:25 d2.utils.events]:  eta: 0:32:34  iter: 5479  total_loss: 3.568  loss_sem_seg: 2.085  loss_center: 0.7866  loss_offset: 0.858  time: 0.4333  data_time: 0.0286  lr: 0.0012236  max_mem: 11463M
[12/10 06:58:33 d2.utils.events]:  eta: 0:32:26  iter: 5499  total_loss: 3.492  loss_sem_seg: 1.986  loss_center: 0.6346  loss_offset: 0.8423  time: 0.4333  data_time: 0.0278  lr: 0.0012188  max_mem: 11463M
[12/10 06:58:42 d2.utils.events]:  eta: 0:32:17  iter: 5519  total_loss: 3.386  loss_sem_seg: 1.737  loss_center: 0.6293  loss_offset: 0.7743  time: 0.4333  data_time: 0.0289  lr: 0.0012139  max_mem: 11463M
[12/10 06:58:51 d2.utils.events]:  eta: 0:32:08  iter: 5539  total_loss: 3.371  loss_sem_seg: 1.513  loss_center: 0.6806  loss_offset: 0.7204  time: 0.4333  data_time: 0.0263  lr: 0.001209  max_mem: 11463M
[12/10 06:58:59 d2.utils.events]:  eta: 0:31:59  iter: 5559  total_loss: 3.418  loss_sem_seg: 1.657  loss_center: 0.7198  loss_offset: 0.8653  time: 0.4333  data_time: 0.0247  lr: 0.0012041  max_mem: 11463M
[12/10 06:59:08 d2.utils.events]:  eta: 0:31:50  iter: 5579  total_loss: 3.793  loss_sem_seg: 1.926  loss_center: 0.7242  loss_offset: 0.9404  time: 0.4333  data_time: 0.0279  lr: 0.0011992  max_mem: 11463M
[12/10 06:59:17 d2.utils.events]:  eta: 0:31:41  iter: 5599  total_loss: 3.357  loss_sem_seg: 1.704  loss_center: 0.6091  loss_offset: 0.9677  time: 0.4333  data_time: 0.0262  lr: 0.0011944  max_mem: 11463M
[12/10 06:59:25 d2.utils.events]:  eta: 0:31:33  iter: 5619  total_loss: 3.334  loss_sem_seg: 1.798  loss_center: 0.6569  loss_offset: 0.825  time: 0.4333  data_time: 0.0275  lr: 0.0011895  max_mem: 11463M
[12/10 06:59:34 d2.utils.events]:  eta: 0:31:24  iter: 5639  total_loss: 3.638  loss_sem_seg: 2.008  loss_center: 0.6012  loss_offset: 0.7873  time: 0.4333  data_time: 0.0271  lr: 0.0011846  max_mem: 11463M
[12/10 06:59:43 d2.utils.events]:  eta: 0:31:16  iter: 5659  total_loss: 3.527  loss_sem_seg: 1.633  loss_center: 0.7152  loss_offset: 0.94  time: 0.4333  data_time: 0.0275  lr: 0.0011797  max_mem: 11463M
[12/10 06:59:51 d2.utils.events]:  eta: 0:31:07  iter: 5679  total_loss: 3.425  loss_sem_seg: 1.922  loss_center: 0.5931  loss_offset: 0.8654  time: 0.4333  data_time: 0.0261  lr: 0.0011748  max_mem: 11463M
[12/10 07:00:00 d2.utils.events]:  eta: 0:30:58  iter: 5699  total_loss: 3.305  loss_sem_seg: 1.877  loss_center: 0.6552  loss_offset: 0.8594  time: 0.4333  data_time: 0.0274  lr: 0.0011699  max_mem: 11463M
[12/10 07:00:09 d2.utils.events]:  eta: 0:30:50  iter: 5719  total_loss: 3.375  loss_sem_seg: 1.859  loss_center: 0.6501  loss_offset: 0.928  time: 0.4333  data_time: 0.0276  lr: 0.001165  max_mem: 11463M
[12/10 07:00:17 d2.utils.events]:  eta: 0:30:41  iter: 5739  total_loss: 3.465  loss_sem_seg: 1.88  loss_center: 0.5894  loss_offset: 0.799  time: 0.4333  data_time: 0.0269  lr: 0.0011601  max_mem: 11463M
[12/10 07:00:26 d2.utils.events]:  eta: 0:30:32  iter: 5759  total_loss: 3.567  loss_sem_seg: 1.755  loss_center: 0.6121  loss_offset: 0.8791  time: 0.4333  data_time: 0.0252  lr: 0.0011552  max_mem: 11463M
[12/10 07:00:35 d2.utils.events]:  eta: 0:30:24  iter: 5779  total_loss: 3.226  loss_sem_seg: 1.739  loss_center: 0.5888  loss_offset: 0.8049  time: 0.4333  data_time: 0.0261  lr: 0.0011503  max_mem: 11463M
[12/10 07:00:43 d2.utils.events]:  eta: 0:30:15  iter: 5799  total_loss: 3.445  loss_sem_seg: 1.781  loss_center: 0.6113  loss_offset: 0.8372  time: 0.4333  data_time: 0.0287  lr: 0.0011454  max_mem: 11463M
[12/10 07:00:52 d2.utils.events]:  eta: 0:30:06  iter: 5819  total_loss: 3.491  loss_sem_seg: 1.773  loss_center: 0.6963  loss_offset: 0.9206  time: 0.4333  data_time: 0.0271  lr: 0.0011405  max_mem: 11463M
[12/10 07:01:01 d2.utils.events]:  eta: 0:29:58  iter: 5839  total_loss: 3.516  loss_sem_seg: 1.863  loss_center: 0.6457  loss_offset: 0.9827  time: 0.4333  data_time: 0.0280  lr: 0.0011356  max_mem: 11463M
[12/10 07:01:09 d2.utils.events]:  eta: 0:29:49  iter: 5859  total_loss: 3.523  loss_sem_seg: 1.92  loss_center: 0.5841  loss_offset: 0.9467  time: 0.4333  data_time: 0.0272  lr: 0.0011307  max_mem: 11463M
[12/10 07:01:18 d2.utils.events]:  eta: 0:29:41  iter: 5879  total_loss: 3.148  loss_sem_seg: 1.726  loss_center: 0.7078  loss_offset: 0.8978  time: 0.4333  data_time: 0.0266  lr: 0.0011258  max_mem: 11463M
[12/10 07:01:27 d2.utils.events]:  eta: 0:29:32  iter: 5899  total_loss: 3.42  loss_sem_seg: 1.811  loss_center: 0.69  loss_offset: 0.7784  time: 0.4333  data_time: 0.0272  lr: 0.0011208  max_mem: 11463M
[12/10 07:01:35 d2.utils.events]:  eta: 0:29:24  iter: 5919  total_loss: 3.428  loss_sem_seg: 1.796  loss_center: 0.5868  loss_offset: 0.8528  time: 0.4333  data_time: 0.0272  lr: 0.0011159  max_mem: 11463M
[12/10 07:01:44 d2.utils.events]:  eta: 0:29:14  iter: 5939  total_loss: 3.406  loss_sem_seg: 1.822  loss_center: 0.6555  loss_offset: 0.8539  time: 0.4333  data_time: 0.0265  lr: 0.001111  max_mem: 11463M
[12/10 07:01:53 d2.utils.events]:  eta: 0:29:05  iter: 5959  total_loss: 3.332  loss_sem_seg: 1.695  loss_center: 0.6918  loss_offset: 0.8768  time: 0.4333  data_time: 0.0276  lr: 0.0011061  max_mem: 11463M
[12/10 07:02:01 d2.utils.events]:  eta: 0:28:55  iter: 5979  total_loss: 3.118  loss_sem_seg: 1.715  loss_center: 0.6411  loss_offset: 0.7966  time: 0.4333  data_time: 0.0256  lr: 0.0011011  max_mem: 11463M
[12/10 07:02:10 d2.utils.events]:  eta: 0:28:47  iter: 5999  total_loss: 3.513  loss_sem_seg: 1.921  loss_center: 0.6211  loss_offset: 0.9011  time: 0.4333  data_time: 0.0274  lr: 0.0010962  max_mem: 11463M
[12/10 07:02:19 d2.utils.events]:  eta: 0:28:39  iter: 6019  total_loss: 3.475  loss_sem_seg: 1.651  loss_center: 0.691  loss_offset: 0.9191  time: 0.4333  data_time: 0.0264  lr: 0.0010913  max_mem: 11463M
[12/10 07:02:27 d2.utils.events]:  eta: 0:28:30  iter: 6039  total_loss: 3.537  loss_sem_seg: 1.869  loss_center: 0.6345  loss_offset: 0.8743  time: 0.4333  data_time: 0.0271  lr: 0.0010863  max_mem: 11463M
[12/10 07:02:36 d2.utils.events]:  eta: 0:28:21  iter: 6059  total_loss: 3.286  loss_sem_seg: 1.832  loss_center: 0.6418  loss_offset: 0.7862  time: 0.4333  data_time: 0.0252  lr: 0.0010814  max_mem: 11463M
[12/10 07:02:45 d2.utils.events]:  eta: 0:28:13  iter: 6079  total_loss: 3.399  loss_sem_seg: 1.904  loss_center: 0.5851  loss_offset: 0.9606  time: 0.4333  data_time: 0.0253  lr: 0.0010765  max_mem: 11463M
[12/10 07:02:53 d2.utils.events]:  eta: 0:28:05  iter: 6099  total_loss: 3.536  loss_sem_seg: 1.994  loss_center: 0.534  loss_offset: 0.8954  time: 0.4333  data_time: 0.0295  lr: 0.0010715  max_mem: 11463M
[12/10 07:03:02 d2.utils.events]:  eta: 0:27:56  iter: 6119  total_loss: 3.537  loss_sem_seg: 1.9  loss_center: 0.591  loss_offset: 0.919  time: 0.4333  data_time: 0.0260  lr: 0.0010666  max_mem: 11463M
[12/10 07:03:11 d2.utils.events]:  eta: 0:27:48  iter: 6139  total_loss: 3.251  loss_sem_seg: 1.694  loss_center: 0.6675  loss_offset: 0.8187  time: 0.4333  data_time: 0.0283  lr: 0.0010616  max_mem: 11463M
[12/10 07:03:19 d2.utils.events]:  eta: 0:27:39  iter: 6159  total_loss: 3.618  loss_sem_seg: 2.086  loss_center: 0.6037  loss_offset: 0.91  time: 0.4333  data_time: 0.0260  lr: 0.0010567  max_mem: 11463M
[12/10 07:03:28 d2.utils.events]:  eta: 0:27:30  iter: 6179  total_loss: 3.586  loss_sem_seg: 1.892  loss_center: 0.6482  loss_offset: 0.8304  time: 0.4333  data_time: 0.0274  lr: 0.0010517  max_mem: 11463M
[12/10 07:03:37 d2.utils.events]:  eta: 0:27:22  iter: 6199  total_loss: 3.236  loss_sem_seg: 1.607  loss_center: 0.7189  loss_offset: 0.8049  time: 0.4333  data_time: 0.0257  lr: 0.0010468  max_mem: 11463M
[12/10 07:03:45 d2.utils.events]:  eta: 0:27:13  iter: 6219  total_loss: 3.325  loss_sem_seg: 1.864  loss_center: 0.5743  loss_offset: 0.8372  time: 0.4333  data_time: 0.0267  lr: 0.0010418  max_mem: 11463M
[12/10 07:03:54 d2.utils.events]:  eta: 0:27:04  iter: 6239  total_loss: 3.33  loss_sem_seg: 1.871  loss_center: 0.696  loss_offset: 0.8641  time: 0.4333  data_time: 0.0267  lr: 0.0010368  max_mem: 11463M
[12/10 07:04:03 d2.utils.events]:  eta: 0:26:56  iter: 6259  total_loss: 2.996  loss_sem_seg: 1.69  loss_center: 0.5972  loss_offset: 0.7556  time: 0.4333  data_time: 0.0264  lr: 0.0010319  max_mem: 11463M
[12/10 07:04:11 d2.utils.events]:  eta: 0:26:47  iter: 6279  total_loss: 3.546  loss_sem_seg: 1.834  loss_center: 0.7895  loss_offset: 0.9138  time: 0.4333  data_time: 0.0267  lr: 0.0010269  max_mem: 11463M
[12/10 07:04:20 d2.utils.events]:  eta: 0:26:38  iter: 6299  total_loss: 3.318  loss_sem_seg: 1.692  loss_center: 0.6047  loss_offset: 0.926  time: 0.4333  data_time: 0.0265  lr: 0.0010219  max_mem: 11463M
[12/10 07:04:29 d2.utils.events]:  eta: 0:26:30  iter: 6319  total_loss: 3.222  loss_sem_seg: 1.78  loss_center: 0.5109  loss_offset: 0.7978  time: 0.4333  data_time: 0.0275  lr: 0.001017  max_mem: 11463M
[12/10 07:04:37 d2.utils.events]:  eta: 0:26:21  iter: 6339  total_loss: 3.011  loss_sem_seg: 1.601  loss_center: 0.5316  loss_offset: 0.7128  time: 0.4333  data_time: 0.0268  lr: 0.001012  max_mem: 11463M
[12/10 07:04:46 d2.utils.events]:  eta: 0:26:12  iter: 6359  total_loss: 3.617  loss_sem_seg: 2.101  loss_center: 0.7571  loss_offset: 0.8992  time: 0.4333  data_time: 0.0264  lr: 0.001007  max_mem: 11463M
[12/10 07:04:55 d2.utils.events]:  eta: 0:26:04  iter: 6379  total_loss: 3.242  loss_sem_seg: 1.781  loss_center: 0.6815  loss_offset: 0.8953  time: 0.4333  data_time: 0.0276  lr: 0.001002  max_mem: 11463M
[12/10 07:05:03 d2.utils.events]:  eta: 0:25:55  iter: 6399  total_loss: 3.471  loss_sem_seg: 1.912  loss_center: 0.6751  loss_offset: 0.8851  time: 0.4333  data_time: 0.0271  lr: 0.00099706  max_mem: 11463M
[12/10 07:05:12 d2.utils.events]:  eta: 0:25:46  iter: 6419  total_loss: 3.742  loss_sem_seg: 1.926  loss_center: 0.6433  loss_offset: 0.8518  time: 0.4333  data_time: 0.0272  lr: 0.00099207  max_mem: 11463M
[12/10 07:05:21 d2.utils.events]:  eta: 0:25:38  iter: 6439  total_loss: 3.028  loss_sem_seg: 1.565  loss_center: 0.7097  loss_offset: 0.8673  time: 0.4333  data_time: 0.0276  lr: 0.00098709  max_mem: 11463M
[12/10 07:05:29 d2.utils.events]:  eta: 0:25:29  iter: 6459  total_loss: 3.119  loss_sem_seg: 1.706  loss_center: 0.649  loss_offset: 0.8112  time: 0.4333  data_time: 0.0268  lr: 0.00098209  max_mem: 11463M
[12/10 07:05:38 d2.utils.events]:  eta: 0:25:21  iter: 6479  total_loss: 3.401  loss_sem_seg: 1.979  loss_center: 0.6141  loss_offset: 0.9389  time: 0.4333  data_time: 0.0284  lr: 0.0009771  max_mem: 11463M
[12/10 07:05:47 d2.utils.events]:  eta: 0:25:12  iter: 6499  total_loss: 3.197  loss_sem_seg: 1.697  loss_center: 0.5996  loss_offset: 0.6932  time: 0.4333  data_time: 0.0277  lr: 0.0009721  max_mem: 11463M
[12/10 07:05:55 d2.utils.events]:  eta: 0:25:03  iter: 6519  total_loss: 3.574  loss_sem_seg: 1.891  loss_center: 0.7166  loss_offset: 0.8745  time: 0.4333  data_time: 0.0271  lr: 0.00096711  max_mem: 11463M
[12/10 07:06:04 d2.utils.events]:  eta: 0:24:55  iter: 6539  total_loss: 3.372  loss_sem_seg: 1.63  loss_center: 0.7447  loss_offset: 0.8083  time: 0.4333  data_time: 0.0269  lr: 0.0009621  max_mem: 11463M
[12/10 07:06:13 d2.utils.events]:  eta: 0:24:46  iter: 6559  total_loss: 3.309  loss_sem_seg: 1.99  loss_center: 0.6383  loss_offset: 0.8715  time: 0.4333  data_time: 0.0254  lr: 0.0009571  max_mem: 11463M
[12/10 07:06:21 d2.utils.events]:  eta: 0:24:38  iter: 6579  total_loss: 3.401  loss_sem_seg: 1.893  loss_center: 0.6681  loss_offset: 0.9127  time: 0.4333  data_time: 0.0272  lr: 0.00095209  max_mem: 11463M
[12/10 07:06:30 d2.utils.events]:  eta: 0:24:29  iter: 6599  total_loss: 3.352  loss_sem_seg: 1.983  loss_center: 0.579  loss_offset: 0.8411  time: 0.4333  data_time: 0.0257  lr: 0.00094708  max_mem: 11463M
[12/10 07:06:39 d2.utils.events]:  eta: 0:24:20  iter: 6619  total_loss: 3.147  loss_sem_seg: 1.621  loss_center: 0.7471  loss_offset: 0.8193  time: 0.4333  data_time: 0.0280  lr: 0.00094206  max_mem: 11463M
[12/10 07:06:47 d2.utils.events]:  eta: 0:24:11  iter: 6639  total_loss: 2.999  loss_sem_seg: 1.516  loss_center: 0.6444  loss_offset: 0.8401  time: 0.4333  data_time: 0.0266  lr: 0.00093705  max_mem: 11463M
[12/10 07:06:56 d2.utils.events]:  eta: 0:24:03  iter: 6659  total_loss: 3.24  loss_sem_seg: 1.855  loss_center: 0.6457  loss_offset: 0.7939  time: 0.4333  data_time: 0.0271  lr: 0.00093203  max_mem: 11463M
[12/10 07:07:05 d2.utils.events]:  eta: 0:23:55  iter: 6679  total_loss: 3.28  loss_sem_seg: 1.754  loss_center: 0.7105  loss_offset: 0.8756  time: 0.4333  data_time: 0.0265  lr: 0.000927  max_mem: 11463M
[12/10 07:07:13 d2.utils.events]:  eta: 0:23:46  iter: 6699  total_loss: 3.258  loss_sem_seg: 1.583  loss_center: 0.799  loss_offset: 0.7814  time: 0.4333  data_time: 0.0281  lr: 0.00092198  max_mem: 11463M
[12/10 07:07:22 d2.utils.events]:  eta: 0:23:37  iter: 6719  total_loss: 3.235  loss_sem_seg: 1.574  loss_center: 0.5848  loss_offset: 0.7845  time: 0.4333  data_time: 0.0284  lr: 0.00091695  max_mem: 11463M
[12/10 07:07:31 d2.utils.events]:  eta: 0:23:28  iter: 6739  total_loss: 3.236  loss_sem_seg: 1.671  loss_center: 0.5597  loss_offset: 0.7363  time: 0.4333  data_time: 0.0271  lr: 0.00091192  max_mem: 11463M
[12/10 07:07:39 d2.utils.events]:  eta: 0:23:20  iter: 6759  total_loss: 3.11  loss_sem_seg: 1.58  loss_center: 0.6847  loss_offset: 0.7047  time: 0.4333  data_time: 0.0264  lr: 0.00090688  max_mem: 11463M
[12/10 07:07:48 d2.utils.events]:  eta: 0:23:11  iter: 6779  total_loss: 3.232  loss_sem_seg: 1.812  loss_center: 0.6309  loss_offset: 0.8053  time: 0.4333  data_time: 0.0267  lr: 0.00090184  max_mem: 11463M
[12/10 07:07:57 d2.utils.events]:  eta: 0:23:02  iter: 6799  total_loss: 3.495  loss_sem_seg: 1.847  loss_center: 0.6832  loss_offset: 0.87  time: 0.4333  data_time: 0.0293  lr: 0.0008968  max_mem: 11463M
[12/10 07:08:05 d2.utils.events]:  eta: 0:22:54  iter: 6819  total_loss: 3.098  loss_sem_seg: 1.659  loss_center: 0.6165  loss_offset: 0.8532  time: 0.4333  data_time: 0.0266  lr: 0.00089176  max_mem: 11463M
[12/10 07:08:14 d2.utils.events]:  eta: 0:22:45  iter: 6839  total_loss: 3.434  loss_sem_seg: 1.854  loss_center: 0.7058  loss_offset: 0.908  time: 0.4333  data_time: 0.0255  lr: 0.00088671  max_mem: 11463M
[12/10 07:08:23 d2.utils.events]:  eta: 0:22:36  iter: 6859  total_loss: 3.088  loss_sem_seg: 1.77  loss_center: 0.5427  loss_offset: 0.9619  time: 0.4333  data_time: 0.0254  lr: 0.00088166  max_mem: 11463M
[12/10 07:08:31 d2.utils.events]:  eta: 0:22:27  iter: 6879  total_loss: 3.175  loss_sem_seg: 1.609  loss_center: 0.5517  loss_offset: 0.8779  time: 0.4333  data_time: 0.0263  lr: 0.00087661  max_mem: 11463M
[12/10 07:08:40 d2.utils.events]:  eta: 0:22:18  iter: 6899  total_loss: 3.151  loss_sem_seg: 1.675  loss_center: 0.6329  loss_offset: 0.7548  time: 0.4333  data_time: 0.0276  lr: 0.00087155  max_mem: 11463M
[12/10 07:08:49 d2.utils.events]:  eta: 0:22:09  iter: 6919  total_loss: 3.344  loss_sem_seg: 1.798  loss_center: 0.5502  loss_offset: 0.8747  time: 0.4332  data_time: 0.0250  lr: 0.00086649  max_mem: 11463M
[12/10 07:08:57 d2.utils.events]:  eta: 0:22:00  iter: 6939  total_loss: 3.098  loss_sem_seg: 1.61  loss_center: 0.6057  loss_offset: 0.7997  time: 0.4332  data_time: 0.0272  lr: 0.00086142  max_mem: 11463M
[12/10 07:09:06 d2.utils.events]:  eta: 0:21:52  iter: 6959  total_loss: 3.127  loss_sem_seg: 1.731  loss_center: 0.6158  loss_offset: 0.8769  time: 0.4332  data_time: 0.0273  lr: 0.00085636  max_mem: 11463M
[12/10 07:09:15 d2.utils.events]:  eta: 0:21:43  iter: 6979  total_loss: 3.252  loss_sem_seg: 1.824  loss_center: 0.4897  loss_offset: 0.8213  time: 0.4332  data_time: 0.0262  lr: 0.00085129  max_mem: 11463M
[12/10 07:09:23 d2.utils.events]:  eta: 0:21:35  iter: 6999  total_loss: 3.16  loss_sem_seg: 1.534  loss_center: 0.5491  loss_offset: 0.8991  time: 0.4332  data_time: 0.0259  lr: 0.00084621  max_mem: 11463M
[12/10 07:09:32 d2.utils.events]:  eta: 0:21:26  iter: 7019  total_loss: 3.3  loss_sem_seg: 1.531  loss_center: 0.6516  loss_offset: 0.8155  time: 0.4332  data_time: 0.0282  lr: 0.00084114  max_mem: 11463M
[12/10 07:09:41 d2.utils.events]:  eta: 0:21:17  iter: 7039  total_loss: 3.206  loss_sem_seg: 1.639  loss_center: 0.685  loss_offset: 0.815  time: 0.4332  data_time: 0.0258  lr: 0.00083605  max_mem: 11463M
[12/10 07:09:49 d2.utils.events]:  eta: 0:21:09  iter: 7059  total_loss: 3.336  loss_sem_seg: 1.742  loss_center: 0.875  loss_offset: 0.8094  time: 0.4332  data_time: 0.0278  lr: 0.00083097  max_mem: 11463M
[12/10 07:09:58 d2.utils.events]:  eta: 0:21:00  iter: 7079  total_loss: 3.137  loss_sem_seg: 1.669  loss_center: 0.7158  loss_offset: 0.8688  time: 0.4332  data_time: 0.0278  lr: 0.00082588  max_mem: 11463M
[12/10 07:10:07 d2.utils.events]:  eta: 0:20:52  iter: 7099  total_loss: 3.147  loss_sem_seg: 1.652  loss_center: 0.6345  loss_offset: 0.7146  time: 0.4332  data_time: 0.0271  lr: 0.00082079  max_mem: 11463M
[12/10 07:10:15 d2.utils.events]:  eta: 0:20:43  iter: 7119  total_loss: 3.43  loss_sem_seg: 1.692  loss_center: 0.6725  loss_offset: 0.7826  time: 0.4332  data_time: 0.0278  lr: 0.0008157  max_mem: 11463M
[12/10 07:10:24 d2.utils.events]:  eta: 0:20:34  iter: 7139  total_loss: 3.38  loss_sem_seg: 1.874  loss_center: 0.5833  loss_offset: 0.7527  time: 0.4333  data_time: 0.0263  lr: 0.0008106  max_mem: 11463M
[12/10 07:10:33 d2.utils.events]:  eta: 0:20:25  iter: 7159  total_loss: 3.515  loss_sem_seg: 1.864  loss_center: 0.7506  loss_offset: 0.8905  time: 0.4332  data_time: 0.0265  lr: 0.0008055  max_mem: 11463M
[12/10 07:10:41 d2.utils.events]:  eta: 0:20:17  iter: 7179  total_loss: 3.489  loss_sem_seg: 1.677  loss_center: 0.726  loss_offset: 0.7822  time: 0.4332  data_time: 0.0280  lr: 0.00080039  max_mem: 11463M
[12/10 07:10:50 d2.utils.events]:  eta: 0:20:08  iter: 7199  total_loss: 3.266  loss_sem_seg: 1.721  loss_center: 0.6575  loss_offset: 0.7897  time: 0.4332  data_time: 0.0271  lr: 0.00079528  max_mem: 11463M
[12/10 07:10:59 d2.utils.events]:  eta: 0:19:59  iter: 7219  total_loss: 3.162  loss_sem_seg: 1.402  loss_center: 0.615  loss_offset: 0.838  time: 0.4332  data_time: 0.0261  lr: 0.00079017  max_mem: 11463M
[12/10 07:11:07 d2.utils.events]:  eta: 0:19:51  iter: 7239  total_loss: 2.992  loss_sem_seg: 1.664  loss_center: 0.686  loss_offset: 0.7724  time: 0.4332  data_time: 0.0282  lr: 0.00078505  max_mem: 11463M
[12/10 07:11:16 d2.utils.events]:  eta: 0:19:42  iter: 7259  total_loss: 3.215  loss_sem_seg: 1.716  loss_center: 0.5097  loss_offset: 0.8531  time: 0.4332  data_time: 0.0251  lr: 0.00077993  max_mem: 11463M
[12/10 07:11:25 d2.utils.events]:  eta: 0:19:34  iter: 7279  total_loss: 3.495  loss_sem_seg: 1.892  loss_center: 0.6362  loss_offset: 0.9227  time: 0.4332  data_time: 0.0286  lr: 0.00077481  max_mem: 11463M
[12/10 07:11:33 d2.utils.events]:  eta: 0:19:25  iter: 7299  total_loss: 3.256  loss_sem_seg: 1.731  loss_center: 0.702  loss_offset: 0.712  time: 0.4332  data_time: 0.0265  lr: 0.00076968  max_mem: 11463M
[12/10 07:11:42 d2.utils.events]:  eta: 0:19:16  iter: 7319  total_loss: 3.269  loss_sem_seg: 1.585  loss_center: 0.7186  loss_offset: 0.8246  time: 0.4332  data_time: 0.0270  lr: 0.00076455  max_mem: 11463M
[12/10 07:11:51 d2.utils.events]:  eta: 0:19:07  iter: 7339  total_loss: 3.153  loss_sem_seg: 1.575  loss_center: 0.727  loss_offset: 0.7914  time: 0.4332  data_time: 0.0261  lr: 0.00075942  max_mem: 11463M
[12/10 07:11:59 d2.utils.events]:  eta: 0:18:59  iter: 7359  total_loss: 3.522  loss_sem_seg: 1.895  loss_center: 0.6314  loss_offset: 0.8751  time: 0.4332  data_time: 0.0280  lr: 0.00075428  max_mem: 11463M
[12/10 07:12:08 d2.utils.events]:  eta: 0:18:50  iter: 7379  total_loss: 3.246  loss_sem_seg: 1.635  loss_center: 0.8655  loss_offset: 0.774  time: 0.4332  data_time: 0.0263  lr: 0.00074914  max_mem: 11463M
[12/10 07:12:17 d2.utils.events]:  eta: 0:18:42  iter: 7399  total_loss: 2.897  loss_sem_seg: 1.502  loss_center: 0.6284  loss_offset: 0.7207  time: 0.4332  data_time: 0.0268  lr: 0.00074399  max_mem: 11463M
[12/10 07:12:25 d2.utils.events]:  eta: 0:18:33  iter: 7419  total_loss: 2.957  loss_sem_seg: 1.568  loss_center: 0.5133  loss_offset: 0.7181  time: 0.4332  data_time: 0.0267  lr: 0.00073884  max_mem: 11463M
[12/10 07:12:34 d2.utils.events]:  eta: 0:18:24  iter: 7439  total_loss: 3.303  loss_sem_seg: 1.641  loss_center: 0.5327  loss_offset: 0.953  time: 0.4332  data_time: 0.0274  lr: 0.00073368  max_mem: 11463M
[12/10 07:12:43 d2.utils.events]:  eta: 0:18:16  iter: 7459  total_loss: 3.449  loss_sem_seg: 1.84  loss_center: 0.6063  loss_offset: 0.9497  time: 0.4332  data_time: 0.0263  lr: 0.00072852  max_mem: 11463M
[12/10 07:12:51 d2.utils.events]:  eta: 0:18:07  iter: 7479  total_loss: 3.205  loss_sem_seg: 1.723  loss_center: 0.5656  loss_offset: 0.8453  time: 0.4332  data_time: 0.0276  lr: 0.00072336  max_mem: 11463M
[12/10 07:13:00 d2.utils.events]:  eta: 0:17:58  iter: 7499  total_loss: 2.921  loss_sem_seg: 1.376  loss_center: 0.7008  loss_offset: 0.7689  time: 0.4332  data_time: 0.0257  lr: 0.00071819  max_mem: 11463M
[12/10 07:13:09 d2.utils.events]:  eta: 0:17:50  iter: 7519  total_loss: 2.939  loss_sem_seg: 1.484  loss_center: 0.5396  loss_offset: 0.7463  time: 0.4332  data_time: 0.0272  lr: 0.00071302  max_mem: 11463M
[12/10 07:13:17 d2.utils.events]:  eta: 0:17:41  iter: 7539  total_loss: 2.912  loss_sem_seg: 1.645  loss_center: 0.5947  loss_offset: 0.6583  time: 0.4332  data_time: 0.0270  lr: 0.00070785  max_mem: 11463M
[12/10 07:13:26 d2.utils.events]:  eta: 0:17:32  iter: 7559  total_loss: 3.416  loss_sem_seg: 1.66  loss_center: 0.6463  loss_offset: 0.9521  time: 0.4332  data_time: 0.0284  lr: 0.00070267  max_mem: 11463M
[12/10 07:13:34 d2.utils.events]:  eta: 0:17:24  iter: 7579  total_loss: 3.27  loss_sem_seg: 1.812  loss_center: 0.6744  loss_offset: 0.8262  time: 0.4332  data_time: 0.0270  lr: 0.00069749  max_mem: 11463M
[12/10 07:13:43 d2.utils.events]:  eta: 0:17:15  iter: 7599  total_loss: 3.114  loss_sem_seg: 1.627  loss_center: 0.6595  loss_offset: 0.8666  time: 0.4332  data_time: 0.0264  lr: 0.0006923  max_mem: 11463M
[12/10 07:13:52 d2.utils.events]:  eta: 0:17:07  iter: 7619  total_loss: 3.17  loss_sem_seg: 1.732  loss_center: 0.7219  loss_offset: 0.7767  time: 0.4332  data_time: 0.0278  lr: 0.00068711  max_mem: 11463M
[12/10 07:14:01 d2.utils.events]:  eta: 0:16:58  iter: 7639  total_loss: 3.148  loss_sem_seg: 1.817  loss_center: 0.5753  loss_offset: 0.7029  time: 0.4332  data_time: 0.0272  lr: 0.00068191  max_mem: 11463M
[12/10 07:14:09 d2.utils.events]:  eta: 0:16:49  iter: 7659  total_loss: 3.08  loss_sem_seg: 1.664  loss_center: 0.6347  loss_offset: 0.7249  time: 0.4332  data_time: 0.0272  lr: 0.00067671  max_mem: 11463M
[12/10 07:14:18 d2.utils.events]:  eta: 0:16:41  iter: 7679  total_loss: 3.026  loss_sem_seg: 1.491  loss_center: 0.6172  loss_offset: 0.6987  time: 0.4332  data_time: 0.0269  lr: 0.0006715  max_mem: 11463M
[12/10 07:14:26 d2.utils.events]:  eta: 0:16:32  iter: 7699  total_loss: 3.375  loss_sem_seg: 1.65  loss_center: 0.7115  loss_offset: 0.8327  time: 0.4332  data_time: 0.0267  lr: 0.00066629  max_mem: 11463M
[12/10 07:14:35 d2.utils.events]:  eta: 0:16:23  iter: 7719  total_loss: 2.918  loss_sem_seg: 1.563  loss_center: 0.6206  loss_offset: 0.7424  time: 0.4332  data_time: 0.0254  lr: 0.00066108  max_mem: 11463M
[12/10 07:14:44 d2.utils.events]:  eta: 0:16:15  iter: 7739  total_loss: 3.233  loss_sem_seg: 1.558  loss_center: 0.7099  loss_offset: 0.8209  time: 0.4332  data_time: 0.0271  lr: 0.00065586  max_mem: 11463M
[12/10 07:14:52 d2.utils.events]:  eta: 0:16:07  iter: 7759  total_loss: 2.968  loss_sem_seg: 1.71  loss_center: 0.4455  loss_offset: 0.7382  time: 0.4332  data_time: 0.0273  lr: 0.00065064  max_mem: 11463M
[12/10 07:15:01 d2.utils.events]:  eta: 0:15:58  iter: 7779  total_loss: 3.025  loss_sem_seg: 1.507  loss_center: 0.6766  loss_offset: 0.836  time: 0.4332  data_time: 0.0254  lr: 0.00064541  max_mem: 11463M
[12/10 07:15:10 d2.utils.events]:  eta: 0:15:49  iter: 7799  total_loss: 3.244  loss_sem_seg: 1.837  loss_center: 0.6671  loss_offset: 0.9126  time: 0.4332  data_time: 0.0275  lr: 0.00064017  max_mem: 11463M
[12/10 07:15:18 d2.utils.events]:  eta: 0:15:41  iter: 7819  total_loss: 3.305  loss_sem_seg: 1.623  loss_center: 0.7349  loss_offset: 0.7978  time: 0.4332  data_time: 0.0261  lr: 0.00063494  max_mem: 11463M
[12/10 07:15:27 d2.utils.events]:  eta: 0:15:32  iter: 7839  total_loss: 3.059  loss_sem_seg: 1.431  loss_center: 0.6204  loss_offset: 0.7768  time: 0.4332  data_time: 0.0262  lr: 0.00062969  max_mem: 11463M
[12/10 07:15:36 d2.utils.events]:  eta: 0:15:24  iter: 7859  total_loss: 3.151  loss_sem_seg: 1.628  loss_center: 0.6086  loss_offset: 0.7737  time: 0.4332  data_time: 0.0259  lr: 0.00062445  max_mem: 11463M
[12/10 07:15:44 d2.utils.events]:  eta: 0:15:15  iter: 7879  total_loss: 2.922  loss_sem_seg: 1.69  loss_center: 0.5338  loss_offset: 0.7834  time: 0.4332  data_time: 0.0274  lr: 0.00061919  max_mem: 11463M
[12/10 07:15:53 d2.utils.events]:  eta: 0:15:06  iter: 7899  total_loss: 3.248  loss_sem_seg: 1.856  loss_center: 0.4197  loss_offset: 0.8622  time: 0.4332  data_time: 0.0282  lr: 0.00061394  max_mem: 11463M
[12/10 07:16:02 d2.utils.events]:  eta: 0:14:58  iter: 7919  total_loss: 3.169  loss_sem_seg: 1.722  loss_center: 0.5559  loss_offset: 0.7664  time: 0.4332  data_time: 0.0270  lr: 0.00060867  max_mem: 11463M
[12/10 07:16:10 d2.utils.events]:  eta: 0:14:49  iter: 7939  total_loss: 3.057  loss_sem_seg: 1.43  loss_center: 0.7883  loss_offset: 0.7476  time: 0.4332  data_time: 0.0247  lr: 0.00060341  max_mem: 11463M
[12/10 07:16:19 d2.utils.events]:  eta: 0:14:40  iter: 7959  total_loss: 3.04  loss_sem_seg: 1.614  loss_center: 0.5654  loss_offset: 0.7144  time: 0.4332  data_time: 0.0282  lr: 0.00059813  max_mem: 11463M
[12/10 07:16:28 d2.utils.events]:  eta: 0:14:32  iter: 7979  total_loss: 3.208  loss_sem_seg: 1.695  loss_center: 0.6635  loss_offset: 0.8398  time: 0.4332  data_time: 0.0268  lr: 0.00059286  max_mem: 11463M
[12/10 07:16:36 d2.utils.events]:  eta: 0:14:23  iter: 7999  total_loss: 3.025  loss_sem_seg: 1.577  loss_center: 0.6639  loss_offset: 0.7462  time: 0.4332  data_time: 0.0260  lr: 0.00058757  max_mem: 11463M
[12/10 07:16:45 d2.utils.events]:  eta: 0:14:15  iter: 8019  total_loss: 3.213  loss_sem_seg: 1.819  loss_center: 0.4867  loss_offset: 0.8503  time: 0.4332  data_time: 0.0267  lr: 0.00058229  max_mem: 11463M
[12/10 07:16:54 d2.utils.events]:  eta: 0:14:06  iter: 8039  total_loss: 2.908  loss_sem_seg: 1.473  loss_center: 0.5503  loss_offset: 0.7168  time: 0.4332  data_time: 0.0265  lr: 0.00057699  max_mem: 11463M
[12/10 07:17:02 d2.utils.events]:  eta: 0:13:58  iter: 8059  total_loss: 3.07  loss_sem_seg: 1.712  loss_center: 0.6486  loss_offset: 0.7235  time: 0.4332  data_time: 0.0287  lr: 0.00057169  max_mem: 11463M
[12/10 07:17:11 d2.utils.events]:  eta: 0:13:49  iter: 8079  total_loss: 3.017  loss_sem_seg: 1.484  loss_center: 0.6466  loss_offset: 0.7338  time: 0.4332  data_time: 0.0283  lr: 0.00056639  max_mem: 11463M
[12/10 07:17:20 d2.utils.events]:  eta: 0:13:40  iter: 8099  total_loss: 2.931  loss_sem_seg: 1.706  loss_center: 0.64  loss_offset: 0.7045  time: 0.4332  data_time: 0.0273  lr: 0.00056108  max_mem: 11463M
[12/10 07:17:28 d2.utils.events]:  eta: 0:13:31  iter: 8119  total_loss: 3.228  loss_sem_seg: 1.596  loss_center: 0.4779  loss_offset: 0.8506  time: 0.4332  data_time: 0.0253  lr: 0.00055576  max_mem: 11463M
[12/10 07:17:37 d2.utils.events]:  eta: 0:13:23  iter: 8139  total_loss: 2.855  loss_sem_seg: 1.518  loss_center: 0.5998  loss_offset: 0.6537  time: 0.4332  data_time: 0.0268  lr: 0.00055044  max_mem: 11463M
[12/10 07:17:46 d2.utils.events]:  eta: 0:13:14  iter: 8159  total_loss: 2.898  loss_sem_seg: 1.559  loss_center: 0.6465  loss_offset: 0.7702  time: 0.4332  data_time: 0.0269  lr: 0.00054512  max_mem: 11463M
[12/10 07:17:54 d2.utils.events]:  eta: 0:13:05  iter: 8179  total_loss: 3.522  loss_sem_seg: 1.876  loss_center: 0.6822  loss_offset: 0.8817  time: 0.4332  data_time: 0.0257  lr: 0.00053978  max_mem: 11463M
[12/10 07:18:03 d2.utils.events]:  eta: 0:12:57  iter: 8199  total_loss: 2.802  loss_sem_seg: 1.607  loss_center: 0.5961  loss_offset: 0.7671  time: 0.4332  data_time: 0.0279  lr: 0.00053444  max_mem: 11463M
[12/10 07:18:12 d2.utils.events]:  eta: 0:12:48  iter: 8219  total_loss: 3.164  loss_sem_seg: 1.602  loss_center: 0.4759  loss_offset: 0.8538  time: 0.4332  data_time: 0.0266  lr: 0.0005291  max_mem: 11463M
[12/10 07:18:20 d2.utils.events]:  eta: 0:12:39  iter: 8239  total_loss: 3.11  loss_sem_seg: 1.551  loss_center: 0.7279  loss_offset: 0.79  time: 0.4331  data_time: 0.0257  lr: 0.00052375  max_mem: 11463M
[12/10 07:18:29 d2.utils.events]:  eta: 0:12:31  iter: 8259  total_loss: 3.083  loss_sem_seg: 1.767  loss_center: 0.5867  loss_offset: 0.6509  time: 0.4332  data_time: 0.0281  lr: 0.00051839  max_mem: 11463M
[12/10 07:18:38 d2.utils.events]:  eta: 0:12:22  iter: 8279  total_loss: 3.25  loss_sem_seg: 1.796  loss_center: 0.5184  loss_offset: 0.8223  time: 0.4332  data_time: 0.0262  lr: 0.00051303  max_mem: 11463M
[12/10 07:18:46 d2.utils.events]:  eta: 0:12:14  iter: 8299  total_loss: 2.939  loss_sem_seg: 1.597  loss_center: 0.5829  loss_offset: 0.7479  time: 0.4332  data_time: 0.0269  lr: 0.00050766  max_mem: 11463M
[12/10 07:18:55 d2.utils.events]:  eta: 0:12:05  iter: 8319  total_loss: 3.191  loss_sem_seg: 1.624  loss_center: 0.5605  loss_offset: 0.7536  time: 0.4331  data_time: 0.0256  lr: 0.00050229  max_mem: 11463M
[12/10 07:19:04 d2.utils.events]:  eta: 0:11:56  iter: 8339  total_loss: 3.301  loss_sem_seg: 1.68  loss_center: 0.8273  loss_offset: 0.7827  time: 0.4331  data_time: 0.0266  lr: 0.0004969  max_mem: 11463M
[12/10 07:19:12 d2.utils.events]:  eta: 0:11:48  iter: 8359  total_loss: 3.039  loss_sem_seg: 1.785  loss_center: 0.5901  loss_offset: 0.7975  time: 0.4331  data_time: 0.0259  lr: 0.00049152  max_mem: 11463M
[12/10 07:19:21 d2.utils.events]:  eta: 0:11:39  iter: 8379  total_loss: 3.06  loss_sem_seg: 1.729  loss_center: 0.6197  loss_offset: 0.8188  time: 0.4331  data_time: 0.0274  lr: 0.00048612  max_mem: 11463M
[12/10 07:19:29 d2.utils.events]:  eta: 0:11:31  iter: 8399  total_loss: 2.802  loss_sem_seg: 1.574  loss_center: 0.4302  loss_offset: 0.8321  time: 0.4331  data_time: 0.0263  lr: 0.00048072  max_mem: 11463M
[12/10 07:19:38 d2.utils.events]:  eta: 0:11:22  iter: 8419  total_loss: 3.016  loss_sem_seg: 1.532  loss_center: 0.6891  loss_offset: 0.8371  time: 0.4331  data_time: 0.0269  lr: 0.00047531  max_mem: 11463M
[12/10 07:19:47 d2.utils.events]:  eta: 0:11:13  iter: 8439  total_loss: 3.074  loss_sem_seg: 1.619  loss_center: 0.6414  loss_offset: 0.7721  time: 0.4331  data_time: 0.0268  lr: 0.0004699  max_mem: 11463M
[12/10 07:19:56 d2.utils.events]:  eta: 0:11:05  iter: 8459  total_loss: 2.964  loss_sem_seg: 1.647  loss_center: 0.6271  loss_offset: 0.7308  time: 0.4331  data_time: 0.0271  lr: 0.00046448  max_mem: 11463M
[12/10 07:20:04 d2.utils.events]:  eta: 0:10:56  iter: 8479  total_loss: 2.887  loss_sem_seg: 1.495  loss_center: 0.5335  loss_offset: 0.7316  time: 0.4331  data_time: 0.0278  lr: 0.00045905  max_mem: 11463M
[12/10 07:20:13 d2.utils.events]:  eta: 0:10:48  iter: 8499  total_loss: 2.867  loss_sem_seg: 1.464  loss_center: 0.624  loss_offset: 0.7847  time: 0.4331  data_time: 0.0268  lr: 0.00045361  max_mem: 11463M
[12/10 07:20:22 d2.utils.events]:  eta: 0:10:39  iter: 8519  total_loss: 3.029  loss_sem_seg: 1.566  loss_center: 0.5464  loss_offset: 0.7096  time: 0.4331  data_time: 0.0271  lr: 0.00044817  max_mem: 11463M
[12/10 07:20:30 d2.utils.events]:  eta: 0:10:30  iter: 8539  total_loss: 3.416  loss_sem_seg: 1.653  loss_center: 0.637  loss_offset: 0.841  time: 0.4331  data_time: 0.0269  lr: 0.00044272  max_mem: 11463M
[12/10 07:20:39 d2.utils.events]:  eta: 0:10:22  iter: 8559  total_loss: 3.09  loss_sem_seg: 1.569  loss_center: 0.6223  loss_offset: 0.8089  time: 0.4331  data_time: 0.0271  lr: 0.00043726  max_mem: 11463M
[12/10 07:20:47 d2.utils.events]:  eta: 0:10:13  iter: 8579  total_loss: 3.096  loss_sem_seg: 1.651  loss_center: 0.5029  loss_offset: 0.7581  time: 0.4331  data_time: 0.0262  lr: 0.00043179  max_mem: 11463M
[12/10 07:20:56 d2.utils.events]:  eta: 0:10:04  iter: 8599  total_loss: 2.95  loss_sem_seg: 1.449  loss_center: 0.6093  loss_offset: 0.8282  time: 0.4331  data_time: 0.0271  lr: 0.00042632  max_mem: 11463M
[12/10 07:21:05 d2.utils.events]:  eta: 0:09:55  iter: 8619  total_loss: 2.834  loss_sem_seg: 1.484  loss_center: 0.641  loss_offset: 0.7613  time: 0.4331  data_time: 0.0246  lr: 0.00042084  max_mem: 11463M
[12/10 07:21:13 d2.utils.events]:  eta: 0:09:46  iter: 8639  total_loss: 2.874  loss_sem_seg: 1.46  loss_center: 0.7395  loss_offset: 0.7422  time: 0.4331  data_time: 0.0266  lr: 0.00041535  max_mem: 11463M
[12/10 07:21:22 d2.utils.events]:  eta: 0:09:38  iter: 8659  total_loss: 3.017  loss_sem_seg: 1.494  loss_center: 0.6166  loss_offset: 0.8436  time: 0.4331  data_time: 0.0267  lr: 0.00040985  max_mem: 11463M
[12/10 07:21:31 d2.utils.events]:  eta: 0:09:29  iter: 8679  total_loss: 2.902  loss_sem_seg: 1.668  loss_center: 0.5496  loss_offset: 0.801  time: 0.4331  data_time: 0.0260  lr: 0.00040435  max_mem: 11463M
[12/10 07:21:39 d2.utils.events]:  eta: 0:09:21  iter: 8699  total_loss: 2.888  loss_sem_seg: 1.474  loss_center: 0.5898  loss_offset: 0.7836  time: 0.4331  data_time: 0.0270  lr: 0.00039883  max_mem: 11463M
[12/10 07:21:48 d2.utils.events]:  eta: 0:09:12  iter: 8719  total_loss: 3.293  loss_sem_seg: 1.922  loss_center: 0.6629  loss_offset: 0.8617  time: 0.4331  data_time: 0.0259  lr: 0.00039331  max_mem: 11463M
[12/10 07:21:57 d2.utils.events]:  eta: 0:09:04  iter: 8739  total_loss: 3.241  loss_sem_seg: 1.588  loss_center: 0.5925  loss_offset: 0.8041  time: 0.4331  data_time: 0.0264  lr: 0.00038778  max_mem: 11463M
[12/10 07:22:05 d2.utils.events]:  eta: 0:08:55  iter: 8759  total_loss: 3.034  loss_sem_seg: 1.64  loss_center: 0.6791  loss_offset: 0.8068  time: 0.4331  data_time: 0.0259  lr: 0.00038224  max_mem: 11463M
[12/10 07:22:14 d2.utils.events]:  eta: 0:08:46  iter: 8779  total_loss: 2.877  loss_sem_seg: 1.549  loss_center: 0.5906  loss_offset: 0.7738  time: 0.4331  data_time: 0.0280  lr: 0.00037669  max_mem: 11463M
[12/10 07:22:23 d2.utils.events]:  eta: 0:08:38  iter: 8799  total_loss: 3.071  loss_sem_seg: 1.578  loss_center: 0.528  loss_offset: 0.805  time: 0.4331  data_time: 0.0265  lr: 0.00037113  max_mem: 11463M
[12/10 07:22:31 d2.utils.events]:  eta: 0:08:29  iter: 8819  total_loss: 2.802  loss_sem_seg: 1.54  loss_center: 0.6243  loss_offset: 0.6691  time: 0.4331  data_time: 0.0280  lr: 0.00036557  max_mem: 11463M
[12/10 07:22:40 d2.utils.events]:  eta: 0:08:21  iter: 8839  total_loss: 2.929  loss_sem_seg: 1.499  loss_center: 0.6333  loss_offset: 0.7229  time: 0.4331  data_time: 0.0252  lr: 0.00035999  max_mem: 11463M
[12/10 07:22:49 d2.utils.events]:  eta: 0:08:12  iter: 8859  total_loss: 2.934  loss_sem_seg: 1.461  loss_center: 0.6991  loss_offset: 0.7513  time: 0.4331  data_time: 0.0270  lr: 0.0003544  max_mem: 11463M
[12/10 07:22:57 d2.utils.events]:  eta: 0:08:03  iter: 8879  total_loss: 2.924  loss_sem_seg: 1.491  loss_center: 0.7091  loss_offset: 0.7412  time: 0.4331  data_time: 0.0251  lr: 0.00034881  max_mem: 11463M
[12/10 07:23:06 d2.utils.events]:  eta: 0:07:54  iter: 8899  total_loss: 3.08  loss_sem_seg: 1.63  loss_center: 0.6369  loss_offset: 0.7788  time: 0.4331  data_time: 0.0275  lr: 0.0003432  max_mem: 11463M
[12/10 07:23:15 d2.utils.events]:  eta: 0:07:46  iter: 8919  total_loss: 3.178  loss_sem_seg: 1.615  loss_center: 0.5141  loss_offset: 0.7831  time: 0.4331  data_time: 0.0262  lr: 0.00033758  max_mem: 11463M
[12/10 07:23:23 d2.utils.events]:  eta: 0:07:37  iter: 8939  total_loss: 3.256  loss_sem_seg: 1.711  loss_center: 0.5881  loss_offset: 0.7787  time: 0.4331  data_time: 0.0270  lr: 0.00033196  max_mem: 11463M
[12/10 07:23:32 d2.utils.events]:  eta: 0:07:29  iter: 8959  total_loss: 3.105  loss_sem_seg: 1.602  loss_center: 0.6149  loss_offset: 0.8889  time: 0.4331  data_time: 0.0260  lr: 0.00032632  max_mem: 11463M
[12/10 07:23:41 d2.utils.events]:  eta: 0:07:20  iter: 8979  total_loss: 3.402  loss_sem_seg: 1.676  loss_center: 0.6339  loss_offset: 0.7054  time: 0.4331  data_time: 0.0262  lr: 0.00032067  max_mem: 11463M
[12/10 07:23:49 d2.utils.events]:  eta: 0:07:11  iter: 8999  total_loss: 3.025  loss_sem_seg: 1.509  loss_center: 0.7286  loss_offset: 0.7246  time: 0.4331  data_time: 0.0264  lr: 0.00031501  max_mem: 11463M
[12/10 07:23:58 d2.utils.events]:  eta: 0:07:03  iter: 9019  total_loss: 2.672  loss_sem_seg: 1.37  loss_center: 0.6435  loss_offset: 0.7172  time: 0.4331  data_time: 0.0264  lr: 0.00030934  max_mem: 11463M
[12/10 07:24:07 d2.utils.events]:  eta: 0:06:54  iter: 9039  total_loss: 3.136  loss_sem_seg: 1.518  loss_center: 0.528  loss_offset: 0.806  time: 0.4331  data_time: 0.0291  lr: 0.00030366  max_mem: 11463M
[12/10 07:24:15 d2.utils.events]:  eta: 0:06:45  iter: 9059  total_loss: 2.837  loss_sem_seg: 1.4  loss_center: 0.5582  loss_offset: 0.6969  time: 0.4331  data_time: 0.0272  lr: 0.00029797  max_mem: 11463M
[12/10 07:24:24 d2.utils.events]:  eta: 0:06:37  iter: 9079  total_loss: 3.378  loss_sem_seg: 1.717  loss_center: 0.6538  loss_offset: 0.8008  time: 0.4331  data_time: 0.0264  lr: 0.00029226  max_mem: 11463M
[12/10 07:24:32 d2.utils.events]:  eta: 0:06:28  iter: 9099  total_loss: 2.806  loss_sem_seg: 1.425  loss_center: 0.6618  loss_offset: 0.682  time: 0.4331  data_time: 0.0274  lr: 0.00028654  max_mem: 11463M
[12/10 07:24:41 d2.utils.events]:  eta: 0:06:19  iter: 9119  total_loss: 2.768  loss_sem_seg: 1.274  loss_center: 0.6375  loss_offset: 0.6928  time: 0.4331  data_time: 0.0260  lr: 0.00028081  max_mem: 11463M
[12/10 07:24:50 d2.utils.events]:  eta: 0:06:11  iter: 9139  total_loss: 2.79  loss_sem_seg: 1.49  loss_center: 0.5136  loss_offset: 0.7867  time: 0.4331  data_time: 0.0284  lr: 0.00027507  max_mem: 11463M
[12/10 07:24:58 d2.utils.events]:  eta: 0:06:02  iter: 9159  total_loss: 3.029  loss_sem_seg: 1.49  loss_center: 0.6541  loss_offset: 0.8121  time: 0.4331  data_time: 0.0239  lr: 0.00026931  max_mem: 11463M
[12/10 07:25:07 d2.utils.events]:  eta: 0:05:53  iter: 9179  total_loss: 2.968  loss_sem_seg: 1.54  loss_center: 0.5204  loss_offset: 0.8032  time: 0.4331  data_time: 0.0275  lr: 0.00026354  max_mem: 11463M
[12/10 07:25:16 d2.utils.events]:  eta: 0:05:45  iter: 9199  total_loss: 2.916  loss_sem_seg: 1.63  loss_center: 0.6616  loss_offset: 0.8129  time: 0.4331  data_time: 0.0266  lr: 0.00025776  max_mem: 11463M
[12/10 07:25:24 d2.utils.events]:  eta: 0:05:36  iter: 9219  total_loss: 3.012  loss_sem_seg: 1.451  loss_center: 0.7159  loss_offset: 0.7515  time: 0.4331  data_time: 0.0265  lr: 0.00025196  max_mem: 11463M
[12/10 07:25:33 d2.utils.events]:  eta: 0:05:27  iter: 9239  total_loss: 3.002  loss_sem_seg: 1.442  loss_center: 0.7105  loss_offset: 0.78  time: 0.4331  data_time: 0.0277  lr: 0.00024614  max_mem: 11463M
[12/10 07:25:42 d2.utils.events]:  eta: 0:05:19  iter: 9259  total_loss: 3.06  loss_sem_seg: 1.389  loss_center: 0.6577  loss_offset: 0.8492  time: 0.4331  data_time: 0.0273  lr: 0.00024031  max_mem: 11463M
[12/10 07:25:50 d2.utils.events]:  eta: 0:05:10  iter: 9279  total_loss: 2.596  loss_sem_seg: 1.424  loss_center: 0.5782  loss_offset: 0.6911  time: 0.4331  data_time: 0.0271  lr: 0.00023447  max_mem: 11463M
[12/10 07:25:59 d2.utils.events]:  eta: 0:05:02  iter: 9299  total_loss: 3.208  loss_sem_seg: 1.741  loss_center: 0.6663  loss_offset: 0.8048  time: 0.4331  data_time: 0.0266  lr: 0.00022861  max_mem: 11463M
[12/10 07:26:08 d2.utils.events]:  eta: 0:04:53  iter: 9319  total_loss: 2.873  loss_sem_seg: 1.516  loss_center: 0.634  loss_offset: 0.7558  time: 0.4331  data_time: 0.0288  lr: 0.00022273  max_mem: 11463M
[12/10 07:26:16 d2.utils.events]:  eta: 0:04:44  iter: 9339  total_loss: 3.123  loss_sem_seg: 1.548  loss_center: 0.6558  loss_offset: 0.8312  time: 0.4331  data_time: 0.0274  lr: 0.00021683  max_mem: 11463M
[12/10 07:26:25 d2.utils.events]:  eta: 0:04:36  iter: 9359  total_loss: 3.053  loss_sem_seg: 1.536  loss_center: 0.6214  loss_offset: 0.77  time: 0.4331  data_time: 0.0255  lr: 0.00021092  max_mem: 11463M
[12/10 07:26:34 d2.utils.events]:  eta: 0:04:27  iter: 9379  total_loss: 2.779  loss_sem_seg: 1.249  loss_center: 0.6437  loss_offset: 0.7084  time: 0.4331  data_time: 0.0254  lr: 0.00020499  max_mem: 11463M
[12/10 07:26:42 d2.utils.events]:  eta: 0:04:18  iter: 9399  total_loss: 3.156  loss_sem_seg: 1.572  loss_center: 0.7833  loss_offset: 0.7889  time: 0.4331  data_time: 0.0267  lr: 0.00019903  max_mem: 11463M
[12/10 07:26:51 d2.utils.events]:  eta: 0:04:10  iter: 9419  total_loss: 3.093  loss_sem_seg: 1.623  loss_center: 0.6801  loss_offset: 0.7643  time: 0.4331  data_time: 0.0277  lr: 0.00019306  max_mem: 11463M
[12/10 07:27:00 d2.utils.events]:  eta: 0:04:01  iter: 9439  total_loss: 2.984  loss_sem_seg: 1.59  loss_center: 0.6652  loss_offset: 0.8055  time: 0.4331  data_time: 0.0264  lr: 0.00018707  max_mem: 11463M
[12/10 07:27:08 d2.utils.events]:  eta: 0:03:52  iter: 9459  total_loss: 3.081  loss_sem_seg: 1.595  loss_center: 0.6409  loss_offset: 0.7404  time: 0.4331  data_time: 0.0280  lr: 0.00018106  max_mem: 11463M
[12/10 07:27:17 d2.utils.events]:  eta: 0:03:44  iter: 9479  total_loss: 3.221  loss_sem_seg: 1.691  loss_center: 0.6628  loss_offset: 0.8177  time: 0.4331  data_time: 0.0261  lr: 0.00017502  max_mem: 11463M
[12/10 07:27:26 d2.utils.events]:  eta: 0:03:35  iter: 9499  total_loss: 2.978  loss_sem_seg: 1.536  loss_center: 0.6046  loss_offset: 0.7331  time: 0.4331  data_time: 0.0262  lr: 0.00016896  max_mem: 11463M
[12/10 07:27:34 d2.utils.events]:  eta: 0:03:27  iter: 9519  total_loss: 3.303  loss_sem_seg: 1.685  loss_center: 0.6496  loss_offset: 0.7641  time: 0.4331  data_time: 0.0262  lr: 0.00016288  max_mem: 11463M
[12/10 07:27:43 d2.utils.events]:  eta: 0:03:18  iter: 9539  total_loss: 3.106  loss_sem_seg: 1.758  loss_center: 0.6277  loss_offset: 0.7095  time: 0.4331  data_time: 0.0273  lr: 0.00015677  max_mem: 11463M
[12/10 07:27:52 d2.utils.events]:  eta: 0:03:09  iter: 9559  total_loss: 2.903  loss_sem_seg: 1.572  loss_center: 0.6498  loss_offset: 0.7276  time: 0.4331  data_time: 0.0269  lr: 0.00015064  max_mem: 11463M
[12/10 07:28:00 d2.utils.events]:  eta: 0:03:01  iter: 9579  total_loss: 3.084  loss_sem_seg: 1.587  loss_center: 0.6487  loss_offset: 0.7839  time: 0.4331  data_time: 0.0268  lr: 0.00014448  max_mem: 11463M
[12/10 07:28:09 d2.utils.events]:  eta: 0:02:52  iter: 9599  total_loss: 2.817  loss_sem_seg: 1.396  loss_center: 0.6808  loss_offset: 0.7668  time: 0.4330  data_time: 0.0267  lr: 0.00013828  max_mem: 11463M
[12/10 07:28:18 d2.utils.events]:  eta: 0:02:43  iter: 9619  total_loss: 2.839  loss_sem_seg: 1.486  loss_center: 0.5167  loss_offset: 0.7541  time: 0.4330  data_time: 0.0270  lr: 0.00013206  max_mem: 11463M
[12/10 07:28:26 d2.utils.events]:  eta: 0:02:35  iter: 9639  total_loss: 3.038  loss_sem_seg: 1.66  loss_center: 0.5927  loss_offset: 0.8383  time: 0.4330  data_time: 0.0249  lr: 0.0001258  max_mem: 11463M
[12/10 07:28:35 d2.utils.events]:  eta: 0:02:26  iter: 9659  total_loss: 2.951  loss_sem_seg: 1.401  loss_center: 0.6918  loss_offset: 0.7555  time: 0.4330  data_time: 0.0269  lr: 0.00011951  max_mem: 11463M
[12/10 07:28:43 d2.utils.events]:  eta: 0:02:17  iter: 9679  total_loss: 3.151  loss_sem_seg: 1.555  loss_center: 0.6525  loss_offset: 0.8297  time: 0.4330  data_time: 0.0261  lr: 0.00011319  max_mem: 11463M
[12/10 07:28:52 d2.utils.events]:  eta: 0:02:09  iter: 9699  total_loss: 3.055  loss_sem_seg: 1.578  loss_center: 0.6473  loss_offset: 0.7403  time: 0.4330  data_time: 0.0268  lr: 0.00010682  max_mem: 11463M
[12/10 07:29:01 d2.utils.events]:  eta: 0:02:00  iter: 9719  total_loss: 3.248  loss_sem_seg: 1.629  loss_center: 0.6007  loss_offset: 0.8422  time: 0.4330  data_time: 0.0272  lr: 0.00010041  max_mem: 11463M
[12/10 07:29:09 d2.utils.events]:  eta: 0:01:52  iter: 9739  total_loss: 2.791  loss_sem_seg: 1.556  loss_center: 0.4987  loss_offset: 0.7833  time: 0.4330  data_time: 0.0266  lr: 9.3954e-05  max_mem: 11463M
[12/10 07:29:18 d2.utils.events]:  eta: 0:01:43  iter: 9759  total_loss: 2.709  loss_sem_seg: 1.523  loss_center: 0.4758  loss_offset: 0.6934  time: 0.4330  data_time: 0.0283  lr: 8.7449e-05  max_mem: 11463M
[12/10 07:29:27 d2.utils.events]:  eta: 0:01:34  iter: 9779  total_loss: 2.831  loss_sem_seg: 1.433  loss_center: 0.6255  loss_offset: 0.7346  time: 0.4330  data_time: 0.0261  lr: 8.089e-05  max_mem: 11463M
[12/10 07:29:35 d2.utils.events]:  eta: 0:01:26  iter: 9799  total_loss: 2.868  loss_sem_seg: 1.503  loss_center: 0.5736  loss_offset: 0.7751  time: 0.4330  data_time: 0.0265  lr: 7.4271e-05  max_mem: 11463M
[12/10 07:29:44 d2.utils.events]:  eta: 0:01:17  iter: 9819  total_loss: 3.032  loss_sem_seg: 1.41  loss_center: 0.5535  loss_offset: 0.8557  time: 0.4330  data_time: 0.0277  lr: 6.7585e-05  max_mem: 11463M
[12/10 07:29:53 d2.utils.events]:  eta: 0:01:08  iter: 9839  total_loss: 2.943  loss_sem_seg: 1.573  loss_center: 0.5126  loss_offset: 0.8076  time: 0.4330  data_time: 0.0276  lr: 6.0825e-05  max_mem: 11463M
[12/10 07:30:01 d2.utils.events]:  eta: 0:01:00  iter: 9859  total_loss: 3.035  loss_sem_seg: 1.54  loss_center: 0.6158  loss_offset: 0.7491  time: 0.4330  data_time: 0.0279  lr: 5.3981e-05  max_mem: 11463M
[12/10 07:30:10 d2.utils.events]:  eta: 0:00:51  iter: 9879  total_loss: 3.173  loss_sem_seg: 1.735  loss_center: 0.5458  loss_offset: 0.7847  time: 0.4330  data_time: 0.0262  lr: 4.7038e-05  max_mem: 11463M
[12/10 07:30:19 d2.utils.events]:  eta: 0:00:43  iter: 9899  total_loss: 2.947  loss_sem_seg: 1.518  loss_center: 0.6247  loss_offset: 0.7825  time: 0.4330  data_time: 0.0260  lr: 3.9979e-05  max_mem: 11463M
[12/10 07:30:27 d2.utils.events]:  eta: 0:00:34  iter: 9919  total_loss: 2.914  loss_sem_seg: 1.476  loss_center: 0.7183  loss_offset: 0.5934  time: 0.4330  data_time: 0.0256  lr: 3.2778e-05  max_mem: 11463M
[12/10 07:30:36 d2.utils.events]:  eta: 0:00:25  iter: 9939  total_loss: 3.309  loss_sem_seg: 1.561  loss_center: 0.6121  loss_offset: 0.8162  time: 0.4330  data_time: 0.0271  lr: 2.5394e-05  max_mem: 11463M
[12/10 07:30:45 d2.utils.events]:  eta: 0:00:17  iter: 9959  total_loss: 2.574  loss_sem_seg: 1.393  loss_center: 0.5169  loss_offset: 0.831  time: 0.4330  data_time: 0.0261  lr: 1.776e-05  max_mem: 11463M
[12/10 07:30:53 d2.utils.events]:  eta: 0:00:08  iter: 9979  total_loss: 2.971  loss_sem_seg: 1.605  loss_center: 0.6148  loss_offset: 0.7621  time: 0.4330  data_time: 0.0272  lr: 9.7261e-06  max_mem: 11463M
[12/10 07:31:02 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0009999.pth
[12/10 07:31:03 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_final.pth
[12/10 07:31:04 d2.utils.events]:  eta: 0:00:00  iter: 9999  total_loss: 2.666  loss_sem_seg: 1.272  loss_center: 0.7373  loss_offset: 0.6026  time: 0.4330  data_time: 0.0281  lr: 6.2797e-07  max_mem: 11463M
[12/10 07:31:04 d2.engine.hooks]: Overall training speed: 9998 iterations in 1:12:09 (0.4331 s / it)
[12/10 07:31:04 d2.engine.hooks]: Total training time: 1:12:17 (0:00:07 on hooks)
[12/10 07:31:05 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[12/10 07:31:05 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/10 07:31:05 d2.data.common]: Serializing 5000 elements to byte tensors and concatenating them all ...
[12/10 07:31:05 d2.data.common]: Serialized dataset takes 3.40 MiB
/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 10 worker processes in total. Our suggested max number of worker in current system is 8, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  cpuset_checked))
[12/10 07:31:06 d2.evaluation.evaluator]: Start inference on 5000 batches
/usr/local/lib/python3.7/dist-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
[12/10 07:31:08 d2.evaluation.evaluator]: Inference done 11/5000. Dataloading: 0.0008 s/iter. Inference: 0.0533 s/iter. Eval: 0.0359 s/iter. Total: 0.0900 s/iter. ETA=0:07:28
[12/10 07:31:13 d2.evaluation.evaluator]: Inference done 72/5000. Dataloading: 0.0011 s/iter. Inference: 0.0503 s/iter. Eval: 0.0315 s/iter. Total: 0.0830 s/iter. ETA=0:06:48
[12/10 07:31:18 d2.evaluation.evaluator]: Inference done 127/5000. Dataloading: 0.0012 s/iter. Inference: 0.0521 s/iter. Eval: 0.0338 s/iter. Total: 0.0871 s/iter. ETA=0:07:04
[12/10 07:31:23 d2.evaluation.evaluator]: Inference done 183/5000. Dataloading: 0.0012 s/iter. Inference: 0.0524 s/iter. Eval: 0.0343 s/iter. Total: 0.0879 s/iter. ETA=0:07:03
[12/10 07:31:28 d2.evaluation.evaluator]: Inference done 245/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0335 s/iter. Total: 0.0861 s/iter. ETA=0:06:49
[12/10 07:31:33 d2.evaluation.evaluator]: Inference done 303/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0336 s/iter. Total: 0.0863 s/iter. ETA=0:06:45
[12/10 07:31:38 d2.evaluation.evaluator]: Inference done 360/5000. Dataloading: 0.0012 s/iter. Inference: 0.0517 s/iter. Eval: 0.0338 s/iter. Total: 0.0867 s/iter. ETA=0:06:42
[12/10 07:31:43 d2.evaluation.evaluator]: Inference done 419/5000. Dataloading: 0.0012 s/iter. Inference: 0.0515 s/iter. Eval: 0.0337 s/iter. Total: 0.0864 s/iter. ETA=0:06:35
[12/10 07:31:48 d2.evaluation.evaluator]: Inference done 481/5000. Dataloading: 0.0012 s/iter. Inference: 0.0511 s/iter. Eval: 0.0333 s/iter. Total: 0.0857 s/iter. ETA=0:06:27
[12/10 07:31:53 d2.evaluation.evaluator]: Inference done 538/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0335 s/iter. Total: 0.0860 s/iter. ETA=0:06:23
[12/10 07:31:58 d2.evaluation.evaluator]: Inference done 597/5000. Dataloading: 0.0012 s/iter. Inference: 0.0512 s/iter. Eval: 0.0335 s/iter. Total: 0.0860 s/iter. ETA=0:06:18
[12/10 07:32:03 d2.evaluation.evaluator]: Inference done 653/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0337 s/iter. Total: 0.0864 s/iter. ETA=0:06:15
[12/10 07:32:08 d2.evaluation.evaluator]: Inference done 711/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0338 s/iter. Total: 0.0865 s/iter. ETA=0:06:11
[12/10 07:32:13 d2.evaluation.evaluator]: Inference done 768/5000. Dataloading: 0.0012 s/iter. Inference: 0.0515 s/iter. Eval: 0.0339 s/iter. Total: 0.0867 s/iter. ETA=0:06:06
[12/10 07:32:18 d2.evaluation.evaluator]: Inference done 829/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0338 s/iter. Total: 0.0864 s/iter. ETA=0:06:00
[12/10 07:32:23 d2.evaluation.evaluator]: Inference done 887/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0338 s/iter. Total: 0.0864 s/iter. ETA=0:05:55
[12/10 07:32:28 d2.evaluation.evaluator]: Inference done 948/5000. Dataloading: 0.0012 s/iter. Inference: 0.0512 s/iter. Eval: 0.0337 s/iter. Total: 0.0861 s/iter. ETA=0:05:48
[12/10 07:32:33 d2.evaluation.evaluator]: Inference done 1007/5000. Dataloading: 0.0012 s/iter. Inference: 0.0511 s/iter. Eval: 0.0337 s/iter. Total: 0.0861 s/iter. ETA=0:05:43
[12/10 07:32:38 d2.evaluation.evaluator]: Inference done 1064/5000. Dataloading: 0.0012 s/iter. Inference: 0.0512 s/iter. Eval: 0.0337 s/iter. Total: 0.0862 s/iter. ETA=0:05:39
[12/10 07:32:43 d2.evaluation.evaluator]: Inference done 1123/5000. Dataloading: 0.0012 s/iter. Inference: 0.0512 s/iter. Eval: 0.0337 s/iter. Total: 0.0861 s/iter. ETA=0:05:33
[12/10 07:32:48 d2.evaluation.evaluator]: Inference done 1181/5000. Dataloading: 0.0012 s/iter. Inference: 0.0512 s/iter. Eval: 0.0337 s/iter. Total: 0.0862 s/iter. ETA=0:05:29
[12/10 07:32:53 d2.evaluation.evaluator]: Inference done 1236/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0338 s/iter. Total: 0.0864 s/iter. ETA=0:05:25
[12/10 07:32:58 d2.evaluation.evaluator]: Inference done 1294/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0338 s/iter. Total: 0.0865 s/iter. ETA=0:05:20
[12/10 07:33:03 d2.evaluation.evaluator]: Inference done 1351/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0338 s/iter. Total: 0.0865 s/iter. ETA=0:05:15
[12/10 07:33:09 d2.evaluation.evaluator]: Inference done 1410/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0338 s/iter. Total: 0.0865 s/iter. ETA=0:05:10
[12/10 07:33:14 d2.evaluation.evaluator]: Inference done 1468/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0339 s/iter. Total: 0.0865 s/iter. ETA=0:05:05
[12/10 07:33:19 d2.evaluation.evaluator]: Inference done 1524/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0339 s/iter. Total: 0.0866 s/iter. ETA=0:05:01
[12/10 07:33:24 d2.evaluation.evaluator]: Inference done 1579/5000. Dataloading: 0.0012 s/iter. Inference: 0.0515 s/iter. Eval: 0.0340 s/iter. Total: 0.0868 s/iter. ETA=0:04:56
[12/10 07:33:29 d2.evaluation.evaluator]: Inference done 1637/5000. Dataloading: 0.0012 s/iter. Inference: 0.0515 s/iter. Eval: 0.0340 s/iter. Total: 0.0868 s/iter. ETA=0:04:52
[12/10 07:33:34 d2.evaluation.evaluator]: Inference done 1694/5000. Dataloading: 0.0012 s/iter. Inference: 0.0515 s/iter. Eval: 0.0340 s/iter. Total: 0.0869 s/iter. ETA=0:04:47
[12/10 07:33:39 d2.evaluation.evaluator]: Inference done 1752/5000. Dataloading: 0.0012 s/iter. Inference: 0.0515 s/iter. Eval: 0.0340 s/iter. Total: 0.0869 s/iter. ETA=0:04:42
[12/10 07:33:44 d2.evaluation.evaluator]: Inference done 1811/5000. Dataloading: 0.0012 s/iter. Inference: 0.0515 s/iter. Eval: 0.0340 s/iter. Total: 0.0868 s/iter. ETA=0:04:36
[12/10 07:33:49 d2.evaluation.evaluator]: Inference done 1868/5000. Dataloading: 0.0012 s/iter. Inference: 0.0515 s/iter. Eval: 0.0341 s/iter. Total: 0.0869 s/iter. ETA=0:04:32
[12/10 07:33:54 d2.evaluation.evaluator]: Inference done 1927/5000. Dataloading: 0.0012 s/iter. Inference: 0.0515 s/iter. Eval: 0.0340 s/iter. Total: 0.0868 s/iter. ETA=0:04:26
[12/10 07:33:59 d2.evaluation.evaluator]: Inference done 1985/5000. Dataloading: 0.0012 s/iter. Inference: 0.0515 s/iter. Eval: 0.0340 s/iter. Total: 0.0868 s/iter. ETA=0:04:21
[12/10 07:34:04 d2.evaluation.evaluator]: Inference done 2042/5000. Dataloading: 0.0012 s/iter. Inference: 0.0515 s/iter. Eval: 0.0341 s/iter. Total: 0.0868 s/iter. ETA=0:04:16
[12/10 07:34:09 d2.evaluation.evaluator]: Inference done 2102/5000. Dataloading: 0.0012 s/iter. Inference: 0.0515 s/iter. Eval: 0.0340 s/iter. Total: 0.0868 s/iter. ETA=0:04:11
[12/10 07:34:14 d2.evaluation.evaluator]: Inference done 2159/5000. Dataloading: 0.0012 s/iter. Inference: 0.0515 s/iter. Eval: 0.0340 s/iter. Total: 0.0868 s/iter. ETA=0:04:06
[12/10 07:34:19 d2.evaluation.evaluator]: Inference done 2217/5000. Dataloading: 0.0012 s/iter. Inference: 0.0515 s/iter. Eval: 0.0340 s/iter. Total: 0.0868 s/iter. ETA=0:04:01
[12/10 07:34:24 d2.evaluation.evaluator]: Inference done 2276/5000. Dataloading: 0.0012 s/iter. Inference: 0.0515 s/iter. Eval: 0.0340 s/iter. Total: 0.0868 s/iter. ETA=0:03:56
[12/10 07:34:29 d2.evaluation.evaluator]: Inference done 2336/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:03:50
[12/10 07:34:34 d2.evaluation.evaluator]: Inference done 2395/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:03:45
[12/10 07:34:39 d2.evaluation.evaluator]: Inference done 2452/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:03:41
[12/10 07:34:44 d2.evaluation.evaluator]: Inference done 2510/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0868 s/iter. ETA=0:03:36
[12/10 07:34:49 d2.evaluation.evaluator]: Inference done 2568/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0868 s/iter. ETA=0:03:31
[12/10 07:34:54 d2.evaluation.evaluator]: Inference done 2626/5000. Dataloading: 0.0012 s/iter. Inference: 0.0515 s/iter. Eval: 0.0340 s/iter. Total: 0.0868 s/iter. ETA=0:03:25
[12/10 07:34:59 d2.evaluation.evaluator]: Inference done 2683/5000. Dataloading: 0.0012 s/iter. Inference: 0.0515 s/iter. Eval: 0.0340 s/iter. Total: 0.0868 s/iter. ETA=0:03:21
[12/10 07:35:04 d2.evaluation.evaluator]: Inference done 2743/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:03:15
[12/10 07:35:09 d2.evaluation.evaluator]: Inference done 2801/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:03:10
[12/10 07:35:15 d2.evaluation.evaluator]: Inference done 2860/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:03:05
[12/10 07:35:20 d2.evaluation.evaluator]: Inference done 2917/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:03:00
[12/10 07:35:25 d2.evaluation.evaluator]: Inference done 2977/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0339 s/iter. Total: 0.0867 s/iter. ETA=0:02:55
[12/10 07:35:30 d2.evaluation.evaluator]: Inference done 3037/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0339 s/iter. Total: 0.0866 s/iter. ETA=0:02:50
[12/10 07:35:35 d2.evaluation.evaluator]: Inference done 3098/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0339 s/iter. Total: 0.0865 s/iter. ETA=0:02:44
[12/10 07:35:40 d2.evaluation.evaluator]: Inference done 3155/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0339 s/iter. Total: 0.0866 s/iter. ETA=0:02:39
[12/10 07:35:45 d2.evaluation.evaluator]: Inference done 3213/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0339 s/iter. Total: 0.0866 s/iter. ETA=0:02:34
[12/10 07:35:50 d2.evaluation.evaluator]: Inference done 3270/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0339 s/iter. Total: 0.0866 s/iter. ETA=0:02:29
[12/10 07:35:55 d2.evaluation.evaluator]: Inference done 3327/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:02:24
[12/10 07:36:00 d2.evaluation.evaluator]: Inference done 3384/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:02:20
[12/10 07:36:05 d2.evaluation.evaluator]: Inference done 3440/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:02:15
[12/10 07:36:10 d2.evaluation.evaluator]: Inference done 3501/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:02:09
[12/10 07:36:15 d2.evaluation.evaluator]: Inference done 3558/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:02:05
[12/10 07:36:20 d2.evaluation.evaluator]: Inference done 3616/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:01:59
[12/10 07:36:25 d2.evaluation.evaluator]: Inference done 3677/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0866 s/iter. ETA=0:01:54
[12/10 07:36:30 d2.evaluation.evaluator]: Inference done 3735/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0866 s/iter. ETA=0:01:49
[12/10 07:36:35 d2.evaluation.evaluator]: Inference done 3791/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:01:44
[12/10 07:36:40 d2.evaluation.evaluator]: Inference done 3850/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:01:39
[12/10 07:36:45 d2.evaluation.evaluator]: Inference done 3910/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0339 s/iter. Total: 0.0866 s/iter. ETA=0:01:34
[12/10 07:36:50 d2.evaluation.evaluator]: Inference done 3969/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0339 s/iter. Total: 0.0866 s/iter. ETA=0:01:29
[12/10 07:36:55 d2.evaluation.evaluator]: Inference done 4027/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0339 s/iter. Total: 0.0866 s/iter. ETA=0:01:24
[12/10 07:37:00 d2.evaluation.evaluator]: Inference done 4084/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0339 s/iter. Total: 0.0866 s/iter. ETA=0:01:19
[12/10 07:37:05 d2.evaluation.evaluator]: Inference done 4143/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0339 s/iter. Total: 0.0866 s/iter. ETA=0:01:14
[12/10 07:37:10 d2.evaluation.evaluator]: Inference done 4197/5000. Dataloading: 0.0013 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:01:09
[12/10 07:37:15 d2.evaluation.evaluator]: Inference done 4257/5000. Dataloading: 0.0013 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:01:04
[12/10 07:37:21 d2.evaluation.evaluator]: Inference done 4313/5000. Dataloading: 0.0013 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:00:59
[12/10 07:37:26 d2.evaluation.evaluator]: Inference done 4374/5000. Dataloading: 0.0013 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:00:54
[12/10 07:37:31 d2.evaluation.evaluator]: Inference done 4431/5000. Dataloading: 0.0013 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:00:49
[12/10 07:37:36 d2.evaluation.evaluator]: Inference done 4489/5000. Dataloading: 0.0013 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:00:44
[12/10 07:37:41 d2.evaluation.evaluator]: Inference done 4548/5000. Dataloading: 0.0013 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:00:39
[12/10 07:37:46 d2.evaluation.evaluator]: Inference done 4605/5000. Dataloading: 0.0013 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:00:34
[12/10 07:37:51 d2.evaluation.evaluator]: Inference done 4662/5000. Dataloading: 0.0013 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:00:29
[12/10 07:37:56 d2.evaluation.evaluator]: Inference done 4720/5000. Dataloading: 0.0013 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:00:24
[12/10 07:38:01 d2.evaluation.evaluator]: Inference done 4779/5000. Dataloading: 0.0013 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:00:19
[12/10 07:38:06 d2.evaluation.evaluator]: Inference done 4836/5000. Dataloading: 0.0013 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:00:14
[12/10 07:38:11 d2.evaluation.evaluator]: Inference done 4896/5000. Dataloading: 0.0013 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0867 s/iter. ETA=0:00:09
[12/10 07:38:16 d2.evaluation.evaluator]: Inference done 4948/5000. Dataloading: 0.0013 s/iter. Inference: 0.0514 s/iter. Eval: 0.0340 s/iter. Total: 0.0868 s/iter. ETA=0:00:04
[12/10 07:38:21 d2.evaluation.evaluator]: Total inference time: 0:07:13.546288 (0.086796 s / iter per device, on 1 devices)
[12/10 07:38:21 d2.evaluation.evaluator]: Total inference pure compute time: 0:04:16 (0.051419 s / iter per device, on 1 devices)
[12/10 07:38:21 d2.evaluation.panoptic_evaluation]: Writing all panoptic predictions to /tmp/panoptic_evalru1aso1_ ...
[12/10 07:38:44 d2.evaluation.panoptic_evaluation]: Panoptic Evaluation Results:
|        |  PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:-----:|:------:|:------:|:-------------:|
|  All   | 6.351 | 44.339 | 8.523  |      133      |
| Things | 4.259 | 43.053 | 5.773  |      80       |
| Stuff  | 9.510 | 46.279 | 12.673 |      53       |
[12/10 07:38:45 d2.evaluation.coco_evaluation]: Preparing results for COCO format ...
[12/10 07:38:45 d2.evaluation.coco_evaluation]: Saving results to ./output/inference/coco_instances_results.json
[12/10 07:38:45 d2.evaluation.coco_evaluation]: Evaluating predictions with unofficial COCO API...
Loading and preparing results...
DONE (t=0.03s)
creating index...
index created!
[12/10 07:38:45 d2.evaluation.fast_eval_api]: Evaluate annotation type *bbox*
[12/10 07:38:53 d2.evaluation.fast_eval_api]: COCOeval_opt.evaluate() finished in 8.00 seconds.
[12/10 07:38:53 d2.evaluation.fast_eval_api]: Accumulating evaluation results...
[12/10 07:38:54 d2.evaluation.fast_eval_api]: COCOeval_opt.accumulate() finished in 0.62 seconds.
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.012
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.027
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.010
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.001
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.009
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.023
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.023
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.032
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.032
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.001
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.017
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.059
[12/10 07:38:54 d2.evaluation.coco_evaluation]: Evaluation results for bbox: 
|  AP   |  AP50  |  AP75  |  APs  |  APm  |  APl  |
|:-----:|:------:|:------:|:-----:|:-----:|:-----:|
| 1.236 | 2.656  | 0.990  | 0.125 | 0.909 | 2.265 |
[12/10 07:38:54 d2.evaluation.coco_evaluation]: Per-category bbox AP: 
| category      | AP    | category     | AP     | category       | AP     |
|:--------------|:------|:-------------|:-------|:---------------|:-------|
| person        | 6.703 | bicycle      | 0.033  | car            | 2.241  |
| motorcycle    | 1.065 | airplane     | 0.635  | bus            | 10.326 |
| train         | 2.512 | truck        | 0.698  | boat           | 0.119  |
| traffic light | 0.454 | fire hydrant | 0.000  | stop sign      | 13.467 |
| parking meter | 0.000 | bench        | 0.110  | bird           | 0.371  |
| cat           | 2.700 | dog          | 0.297  | horse          | 0.380  |
| sheep         | 2.217 | cow          | 2.079  | elephant       | 6.938  |
| bear          | 3.106 | zebra        | 13.095 | giraffe        | 3.077  |
| backpack      | 0.000 | umbrella     | 0.473  | handbag        | 0.000  |
| tie           | 0.000 | suitcase     | 0.000  | frisbee        | 0.000  |
| skis          | 0.006 | snowboard    | 0.000  | sports ball    | 0.347  |
| kite          | 3.498 | baseball bat | 0.000  | baseball glove | 0.000  |
| skateboard    | 0.000 | surfboard    | 1.371  | tennis racket  | 0.000  |
| bottle        | 0.030 | wine glass   | 0.000  | cup            | 0.079  |
| fork          | 0.000 | knife        | 0.000  | spoon          | 0.000  |
| bowl          | 0.352 | banana       | 0.127  | apple          | 0.149  |
| sandwich      | 0.000 | orange       | 0.474  | broccoli       | 0.631  |
| carrot        | 0.000 | hot dog      | 0.000  | pizza          | 1.895  |
| donut         | 0.000 | cake         | 0.000  | chair          | 0.126  |
| couch         | 0.384 | potted plant | 0.171  | bed            | 1.131  |
| dining table  | 1.416 | toilet       | 6.384  | tv             | 4.096  |
| laptop        | 0.597 | mouse        | 0.000  | remote         | 0.000  |
| keyboard      | 0.000 | cell phone   | 0.000  | microwave      | 0.000  |
| oven          | 0.192 | toaster      | 0.000  | sink           | 0.904  |
| refrigerator  | 0.111 | book         | 0.008  | clock          | 1.262  |
| vase          | 0.050 | scissors     | 0.000  | teddy bear     | 0.000  |
| hair drier    | 0.000 | toothbrush   | 0.000  |                |        |
Loading and preparing results...
DONE (t=0.44s)
creating index...
index created!
[12/10 07:38:55 d2.evaluation.fast_eval_api]: Evaluate annotation type *segm*
[12/10 07:39:04 d2.evaluation.fast_eval_api]: COCOeval_opt.evaluate() finished in 9.14 seconds.
[12/10 07:39:04 d2.evaluation.fast_eval_api]: Accumulating evaluation results...
[12/10 07:39:05 d2.evaluation.fast_eval_api]: COCOeval_opt.accumulate() finished in 0.69 seconds.
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.014
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.027
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.013
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.001
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.008
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.031
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.022
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.028
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.028
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.001
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.015
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.051
[12/10 07:39:07 d2.evaluation.coco_evaluation]: Evaluation results for segm: 
|  AP   |  AP50  |  AP75  |  APs  |  APm  |  APl  |
|:-----:|:------:|:------:|:-----:|:-----:|:-----:|
| 1.369 | 2.740  | 1.282  | 0.062 | 0.805 | 3.061 |
[12/10 07:39:07 d2.evaluation.coco_evaluation]: Per-category segm AP: 
| category      | AP    | category     | AP     | category       | AP     |
|:--------------|:------|:-------------|:-------|:---------------|:-------|
| person        | 4.699 | bicycle      | 0.066  | car            | 2.161  |
| motorcycle    | 0.523 | airplane     | 0.593  | bus            | 11.975 |
| train         | 3.768 | truck        | 0.654  | boat           | 0.099  |
| traffic light | 0.277 | fire hydrant | 0.000  | stop sign      | 23.552 |
| parking meter | 0.000 | bench        | 0.025  | bird           | 0.149  |
| cat           | 2.697 | dog          | 0.297  | horse          | 0.314  |
| sheep         | 2.213 | cow          | 2.027  | elephant       | 6.697  |
| bear          | 6.708 | zebra        | 12.267 | giraffe        | 2.398  |
| backpack      | 0.000 | umbrella     | 0.132  | handbag        | 0.000  |
| tie           | 0.000 | suitcase     | 0.000  | frisbee        | 0.000  |
| skis          | 0.000 | snowboard    | 0.000  | sports ball    | 0.396  |
| kite          | 2.418 | baseball bat | 0.000  | baseball glove | 0.000  |
| skateboard    | 0.000 | surfboard    | 1.035  | tennis racket  | 0.117  |
| bottle        | 0.061 | wine glass   | 0.000  | cup            | 0.089  |
| fork          | 0.000 | knife        | 0.000  | spoon          | 0.000  |
| bowl          | 0.589 | banana       | 0.090  | apple          | 0.198  |
| sandwich      | 0.000 | orange       | 0.891  | broccoli       | 0.396  |
| carrot        | 0.008 | hot dog      | 0.000  | pizza          | 1.480  |
| donut         | 0.000 | cake         | 0.000  | chair          | 0.113  |
| couch         | 0.186 | potted plant | 0.116  | bed            | 0.888  |
| dining table  | 0.262 | toilet       | 7.483  | tv             | 4.735  |
| laptop        | 0.452 | mouse        | 0.000  | remote         | 0.000  |
| keyboard      | 0.000 | cell phone   | 0.000  | microwave      | 0.000  |
| oven          | 0.061 | toaster      | 0.000  | sink           | 0.801  |
| refrigerator  | 0.000 | book         | 0.001  | clock          | 2.257  |
| vase          | 0.099 | scissors     | 0.000  | teddy bear     | 0.000  |
| hair drier    | 0.000 | toothbrush   | 0.000  |                |        |
[12/10 07:39:10 d2.engine.defaults]: Evaluation results for coco_2017_val_panoptic in csv format:
[12/10 07:39:10 d2.evaluation.testing]: copypaste: Task: panoptic_seg
[12/10 07:39:10 d2.evaluation.testing]: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[12/10 07:39:10 d2.evaluation.testing]: copypaste: 6.3512,44.3388,8.5226,4.2588,43.0531,5.7730,9.5095,46.2794,12.6729
[12/10 07:39:10 d2.evaluation.testing]: copypaste: Task: bbox
[12/10 07:39:10 d2.evaluation.testing]: copypaste: AP,AP50,AP75,APs,APm,APl
[12/10 07:39:10 d2.evaluation.testing]: copypaste: 1.2361,2.6559,0.9902,0.1254,0.9093,2.2654
[12/10 07:39:10 d2.evaluation.testing]: copypaste: Task: segm
[12/10 07:39:10 d2.evaluation.testing]: copypaste: AP,AP50,AP75,APs,APm,APl
[12/10 07:39:10 d2.evaluation.testing]: copypaste: 1.3689,2.7400,1.2820,0.0619,0.8052,3.0613