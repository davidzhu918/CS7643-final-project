env: DETECTRON2_DATASETS=/content/datasets
Command Line Args: Namespace(config_file='./detectron2/projects/Panoptic-DeepLab/configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.RESNETS.NORM', 'BN', 'MODEL.INS_EMBED_HEAD.NORM', 'BN', 'MODEL.SEM_SEG_HEAD.NORM', 'BN', 'SOLVER.MAX_ITER', '10000', 'SOLVER.IMS_PER_BATCH', '5', 'SOLVER.BASE_LR', '0.0025', 'MODEL.BACKBONE.FREEZE_AT', '2', 'MODEL.SEM_SEG_HEAD.NAME', 'DeepLabV3PlusHead'], resume=False)
Loading config ./detectron2/projects/Panoptic-DeepLab/configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv.yaml with yaml.unsafe_load. Your machine may be at risk if the file contains malicious content.
[12/10 01:55:45 detectron2]: Rank of current process: 0. World size: 1
[12/10 01:55:46 detectron2]: Environment info:
----------------------  ----------------------------------------------------------------
sys.platform            linux
Python                  3.7.12 (default, Jan 15 2022, 18:48:18) [GCC 7.5.0]
numpy                   1.21.5
detectron2              0.6 @/content/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.1
detectron2 arch flags   7.0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.10.0+cu111 @/usr/local/lib/python3.7/dist-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0                   Tesla V100-SXM2-16GB (arch=7.0)
Driver version          460.32.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.1.2
torchvision             0.11.1+cu111 @/usr/local/lib/python3.7/dist-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20221122
iopath                  0.1.9
cv2                     4.1.2
----------------------  ----------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[12/10 01:55:46 detectron2]: Command line arguments: Namespace(config_file='./detectron2/projects/Panoptic-DeepLab/configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.RESNETS.NORM', 'BN', 'MODEL.INS_EMBED_HEAD.NORM', 'BN', 'MODEL.SEM_SEG_HEAD.NORM', 'BN', 'SOLVER.MAX_ITER', '10000', 'SOLVER.IMS_PER_BATCH', '5', 'SOLVER.BASE_LR', '0.0025', 'MODEL.BACKBONE.FREEZE_AT', '2', 'MODEL.SEM_SEG_HEAD.NAME', 'DeepLabV3PlusHead'], resume=False)
[12/10 01:55:46 detectron2]: Contents of args.config_file=./detectron2/projects/Panoptic-DeepLab/configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv.yaml:
_BASE_: ../Cityscapes-PanopticSegmentation/Base-PanopticDeepLab-OS16.yaml
MODEL:
  WEIGHTS: "detectron2://DeepLab/R-52.pkl"
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  BACKBONE:
    NAME: "build_resnet_deeplab_backbone"
  RESNETS:
    DEPTH: 50
    NORM: "SyncBN"
    RES5_MULTI_GRID: [1, 2, 4]
    STEM_TYPE: "deeplab"
    STEM_OUT_CHANNELS: 128
    STRIDE_IN_1X1: False
  SEM_SEG_HEAD:
    NUM_CLASSES: 133
    LOSS_TOP_K: 1.0
    USE_DEPTHWISE_SEPARABLE_CONV: True
  PANOPTIC_DEEPLAB:
    STUFF_AREA: 4096
    NMS_KERNEL: 41
    SIZE_DIVISIBILITY: 640
    USE_DEPTHWISE_SEPARABLE_CONV: True
DATASETS:
  TRAIN: ("coco_2017_train_panoptic",)
  TEST: ("coco_2017_val_panoptic",)
SOLVER:
  BASE_LR: 0.0005
  MAX_ITER: 200000
  IMS_PER_BATCH: 64
INPUT:
  FORMAT: "RGB"
  GAUSSIAN_SIGMA: 8
  MIN_SIZE_TRAIN: !!python/object/apply:eval ["[int(x * 0.1 * 640) for x in range(5, 16)]"]
  MIN_SIZE_TRAIN_SAMPLING: "choice"
  MIN_SIZE_TEST: 640
  MAX_SIZE_TRAIN: 960
  MAX_SIZE_TEST: 640
  CROP:
    ENABLED: True
    TYPE: "absolute"
    SIZE: (640, 640)

[12/10 01:55:46 detectron2]: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 10
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - coco_2017_val_panoptic
  TRAIN:
  - coco_2017_train_panoptic
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: true
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 640
    - 640
    TYPE: absolute
  FORMAT: RGB
  GAUSSIAN_SIGMA: 8
  IGNORE_CROWD_IN_SEMANTIC: false
  IGNORE_STUFF_IN_OFFSET: true
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 640
  MAX_SIZE_TRAIN: 960
  MIN_SIZE_TEST: 640
  MIN_SIZE_TRAIN:
  - 320
  - 384
  - 448
  - 512
  - 576
  - 640
  - 704
  - 768
  - 832
  - 896
  - 960
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SMALL_INSTANCE_AREA: 4096
  SMALL_INSTANCE_WEIGHT: 3
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_deeplab_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  INS_EMBED_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    CENTER_LOSS_WEIGHT: 200.0
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    HEAD_CHANNELS: 32
    IN_FEATURES:
    - res2
    - res3
    - res5
    NAME: PanopticDeepLabInsEmbedHead
    NORM: BN
    OFFSET_LOSS_WEIGHT: 0.01
    PROJECT_CHANNELS:
    - 32
    - 64
    PROJECT_FEATURES:
    - res2
    - res3
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: PanopticDeepLab
  PANOPTIC_DEEPLAB:
    BENCHMARK_NETWORK_SPEED: false
    CENTER_THRESHOLD: 0.1
    NMS_KERNEL: 41
    PREDICT_INSTANCES: true
    SIZE_DIVISIBILITY: 640
    STUFF_AREA: 4096
    TOP_K_INSTANCE: 200
    USE_DEPTHWISE_SEPARABLE_CONV: true
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: BN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 2
    RES5_MULTI_GRID:
    - 1
    - 2
    - 4
    STEM_OUT_CHANNELS: 128
    STEM_TYPE: deeplab
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id001
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS:
    - 10.0
    - 10.0
    - 5.0
    - 5.0
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    HEAD_CHANNELS: 256
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res5
    LOSS_TOP_K: 1.0
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    NAME: DeepLabV3PlusHead
    NORM: BN
    NUM_CLASSES: 133
    PROJECT_CHANNELS:
    - 32
    - 64
    PROJECT_FEATURES:
    - res2
    - res3
    USE_DEPTHWISE_SEPARABLE_CONV: true
  WEIGHTS: detectron2://DeepLab/R-52.pkl
OUTPUT_DIR: ./output
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.0025
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 5
  LR_SCHEDULER_NAME: WarmupPolyLR
  MAX_ITER: 10000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAM
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 30000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0
  WEIGHT_DECAY_BIAS: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/10 01:55:46 detectron2]: Full config saved to ./output/config.yaml
[12/10 01:55:47 d2.utils.env]: Using a generated random seed 47088248
[12/10 01:55:51 d2.engine.defaults]: Model:
PanopticDeepLab(
  (backbone): ResNet(
    (stem): DeepLabStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
      )
      (conv2): Conv2d(
        64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
      )
      (conv3): Conv2d(
        64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv1): Conv2d(
          128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(8, 8), dilation=(8, 8), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (sem_seg_head): DeepLabV3PlusHead(
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            288, 288, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=288, bias=False
            (norm): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            288, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AvgPool2d(kernel_size=(40, 40), stride=1, padding=0)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (predictor): Conv2d(256, 133, kernel_size=(1, 1), stride=(1, 1))
    (loss): DeepLabCE(
      (criterion): CrossEntropyLoss()
    )
  )
  (ins_embed_head): PanopticDeepLabInsEmbedHead(
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            160, 160, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=160, bias=False
            (norm): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AvgPool2d(kernel_size=(40, 40), stride=1, padding=0)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (center_head): Sequential(
      (0): Conv2d(
        128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): Conv2d(
        128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (center_predictor): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
    (offset_head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=128, bias=False
        (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (offset_predictor): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
    (center_loss): MSELoss()
    (offset_loss): L1Loss()
  )
)
[12/10 01:55:51 d2.projects.panoptic_deeplab.dataset_mapper]: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960), max_size=960, sample_style='choice'), RandomCrop(crop_type='absolute', crop_size=[640, 640]), RandomFlip()]
[12/10 01:55:59 d2.data.build]: Using training sampler TrainingSampler
[12/10 01:55:59 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/10 01:55:59 d2.data.common]: Serializing 118287 elements to byte tensors and concatenating them all ...
[12/10 01:56:00 d2.data.common]: Serialized dataset takes 80.32 MiB
/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 10 worker processes in total. Our suggested max number of worker in current system is 8, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  cpuset_checked))
[12/10 01:56:02 fvcore.common.checkpoint]: [Checkpointer] Loading from detectron2://DeepLab/R-52.pkl ...
[12/10 01:56:02 fvcore.common.checkpoint]: Reading a file from 'torchvision'
[12/10 01:56:02 d2.checkpoint.c2_model_loading]: Following weights matched with submodule backbone:
| Names in Model    | Names in Checkpoint                                                                                        | Shapes                                             |
|:------------------|:-----------------------------------------------------------------------------------------------------------|:---------------------------------------------------|
| res2.0.conv1.*    | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,128,1,1)               |
| res2.0.conv2.*    | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,64,3,3)                |
| res2.0.conv3.*    | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,64,1,1)           |
| res2.0.shortcut.* | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                          | (256,) (256,) (256,) (256,) (256,128,1,1)          |
| res2.1.conv1.*    | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,256,1,1)               |
| res2.1.conv2.*    | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,64,3,3)                |
| res2.1.conv3.*    | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,64,1,1)           |
| res2.2.conv1.*    | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,256,1,1)               |
| res2.2.conv2.*    | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,64,3,3)                |
| res2.2.conv3.*    | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,64,1,1)           |
| res3.0.conv1.*    | res3.0.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3.0.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3.0.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3.0.shortcut.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) () (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3.1.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3.1.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3.1.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3.2.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3.2.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3.2.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3.3.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3.3.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3.3.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4.0.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4.0.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4.0.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4.0.shortcut.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) () (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4.1.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4.1.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4.1.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4.2.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4.2.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4.2.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4.3.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4.3.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4.3.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4.4.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4.4.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4.4.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4.5.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4.5.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4.5.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) () (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) () (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) () (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) () (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.*      | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                               | (64,) (64,) (64,) (64,) (64,3,3,3)                 |
| stem.conv2.*      | stem.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                               | (64,) (64,) (64,) (64,) (64,64,3,3)                |
| stem.conv3.*      | stem.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                               | (128,) (128,) (128,) (128,) (128,64,3,3)           |
WARNING [12/10 01:56:03 fvcore.common.checkpoint]: Some model parameters or buffers are not found in the checkpoint:
ins_embed_head.center_head.0.norm.{bias, running_mean, running_var, weight}
ins_embed_head.center_head.0.weight
ins_embed_head.center_head.1.norm.{bias, running_mean, running_var, weight}
ins_embed_head.center_head.1.weight
ins_embed_head.center_predictor.{bias, weight}
ins_embed_head.decoder.res2.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res2.fuse_conv.depthwise.weight
ins_embed_head.decoder.res2.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res2.fuse_conv.pointwise.weight
ins_embed_head.decoder.res2.project_conv.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res2.project_conv.weight
ins_embed_head.decoder.res3.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res3.fuse_conv.depthwise.weight
ins_embed_head.decoder.res3.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res3.fuse_conv.pointwise.weight
ins_embed_head.decoder.res3.project_conv.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res3.project_conv.weight
ins_embed_head.decoder.res5.project_conv.convs.0.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.0.weight
ins_embed_head.decoder.res5.project_conv.convs.1.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.1.depthwise.weight
ins_embed_head.decoder.res5.project_conv.convs.1.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.1.pointwise.weight
ins_embed_head.decoder.res5.project_conv.convs.2.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.2.depthwise.weight
ins_embed_head.decoder.res5.project_conv.convs.2.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.2.pointwise.weight
ins_embed_head.decoder.res5.project_conv.convs.3.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.3.depthwise.weight
ins_embed_head.decoder.res5.project_conv.convs.3.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.3.pointwise.weight
ins_embed_head.decoder.res5.project_conv.convs.4.1.{bias, weight}
ins_embed_head.decoder.res5.project_conv.project.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.project.weight
ins_embed_head.offset_head.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.offset_head.depthwise.weight
ins_embed_head.offset_head.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.offset_head.pointwise.weight
ins_embed_head.offset_predictor.{bias, weight}
sem_seg_head.decoder.res2.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res2.fuse_conv.depthwise.weight
sem_seg_head.decoder.res2.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res2.fuse_conv.pointwise.weight
sem_seg_head.decoder.res2.project_conv.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res2.project_conv.weight
sem_seg_head.decoder.res3.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res3.fuse_conv.depthwise.weight
sem_seg_head.decoder.res3.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res3.fuse_conv.pointwise.weight
sem_seg_head.decoder.res3.project_conv.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res3.project_conv.weight
sem_seg_head.decoder.res5.project_conv.convs.0.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.0.weight
sem_seg_head.decoder.res5.project_conv.convs.1.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.1.depthwise.weight
sem_seg_head.decoder.res5.project_conv.convs.1.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.1.pointwise.weight
sem_seg_head.decoder.res5.project_conv.convs.2.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.2.depthwise.weight
sem_seg_head.decoder.res5.project_conv.convs.2.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.2.pointwise.weight
sem_seg_head.decoder.res5.project_conv.convs.3.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.3.depthwise.weight
sem_seg_head.decoder.res5.project_conv.convs.3.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.3.pointwise.weight
sem_seg_head.decoder.res5.project_conv.convs.4.1.{bias, weight}
sem_seg_head.decoder.res5.project_conv.project.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.project.weight
sem_seg_head.predictor.{bias, weight}
WARNING [12/10 01:56:03 fvcore.common.checkpoint]: The checkpoint state_dict contains keys that are not used by the model:
  res2.0.conv1.norm.num_batches_tracked
  res2.0.conv2.norm.num_batches_tracked
  res2.0.conv3.norm.num_batches_tracked
  res2.0.shortcut.norm.num_batches_tracked
  res2.1.conv1.norm.num_batches_tracked
  res2.1.conv2.norm.num_batches_tracked
  res2.1.conv3.norm.num_batches_tracked
  res2.2.conv1.norm.num_batches_tracked
  res2.2.conv2.norm.num_batches_tracked
  res2.2.conv3.norm.num_batches_tracked
  stem.conv1.norm.num_batches_tracked
  stem.conv2.norm.num_batches_tracked
  stem.conv3.norm.num_batches_tracked
  stem.fc.{bias, weight}
[12/10 01:56:03 d2.engine.train_loop]: Starting training from iteration 0
/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 10 worker processes in total. Our suggested max number of worker in current system is 8, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  cpuset_checked))
[12/10 01:56:12 d2.utils.events]:  eta: 1:04:26  iter: 19  total_loss: 7.847  loss_sem_seg: 5.333  loss_center: 0.7373  loss_offset: 1.718  time: 0.3838  data_time: 0.0698  lr: 4.9867e-05  max_mem: 8471M
[12/10 01:56:19 d2.utils.events]:  eta: 1:03:49  iter: 39  total_loss: 7.73  loss_sem_seg: 5.383  loss_center: 0.8332  loss_offset: 1.518  time: 0.3830  data_time: 0.0262  lr: 9.9552e-05  max_mem: 8471M
[12/10 01:56:27 d2.utils.events]:  eta: 1:03:42  iter: 59  total_loss: 7.546  loss_sem_seg: 5.168  loss_center: 0.8132  loss_offset: 1.411  time: 0.3840  data_time: 0.0279  lr: 0.00014906  max_mem: 8471M
[12/10 01:56:35 d2.utils.events]:  eta: 1:03:47  iter: 79  total_loss: 7.533  loss_sem_seg: 5.246  loss_center: 0.6533  loss_offset: 1.511  time: 0.3845  data_time: 0.0273  lr: 0.00019838  max_mem: 8471M
[12/10 01:56:42 d2.utils.events]:  eta: 1:03:21  iter: 99  total_loss: 7.725  loss_sem_seg: 5.202  loss_center: 0.6228  loss_offset: 1.585  time: 0.3848  data_time: 0.0274  lr: 0.00024753  max_mem: 8471M
[12/10 01:56:50 d2.utils.events]:  eta: 1:03:14  iter: 119  total_loss: 7.372  loss_sem_seg: 5.104  loss_center: 0.5748  loss_offset: 1.713  time: 0.3846  data_time: 0.0256  lr: 0.00029649  max_mem: 8471M
[12/10 01:56:58 d2.utils.events]:  eta: 1:03:14  iter: 139  total_loss: 7.657  loss_sem_seg: 5.254  loss_center: 0.8082  loss_offset: 1.654  time: 0.3846  data_time: 0.0278  lr: 0.00034528  max_mem: 8471M
[12/10 01:57:06 d2.utils.events]:  eta: 1:03:06  iter: 159  total_loss: 7.72  loss_sem_seg: 5.202  loss_center: 0.7942  loss_offset: 1.732  time: 0.3851  data_time: 0.0263  lr: 0.00039388  max_mem: 8471M
[12/10 01:57:13 d2.utils.events]:  eta: 1:03:03  iter: 179  total_loss: 7.676  loss_sem_seg: 5.283  loss_center: 0.6439  loss_offset: 1.554  time: 0.3853  data_time: 0.0273  lr: 0.0004423  max_mem: 8471M
[12/10 01:57:21 d2.utils.events]:  eta: 1:02:55  iter: 199  total_loss: 7.33  loss_sem_seg: 5.147  loss_center: 0.6025  loss_offset: 1.511  time: 0.3853  data_time: 0.0277  lr: 0.00049055  max_mem: 8471M
[12/10 01:57:29 d2.utils.events]:  eta: 1:02:43  iter: 219  total_loss: 7.565  loss_sem_seg: 5.284  loss_center: 0.7989  loss_offset: 1.473  time: 0.3854  data_time: 0.0285  lr: 0.00053861  max_mem: 8471M
[12/10 01:57:37 d2.utils.events]:  eta: 1:02:36  iter: 239  total_loss: 7.529  loss_sem_seg: 5.133  loss_center: 0.6249  loss_offset: 1.69  time: 0.3854  data_time: 0.0259  lr: 0.00058649  max_mem: 8471M
[12/10 01:57:44 d2.utils.events]:  eta: 1:02:32  iter: 259  total_loss: 7.342  loss_sem_seg: 5.062  loss_center: 0.698  loss_offset: 1.504  time: 0.3855  data_time: 0.0269  lr: 0.0006342  max_mem: 8471M
[12/10 01:57:52 d2.utils.events]:  eta: 1:02:23  iter: 279  total_loss: 7.266  loss_sem_seg: 5.077  loss_center: 0.6998  loss_offset: 1.516  time: 0.3854  data_time: 0.0257  lr: 0.00068172  max_mem: 8471M
[12/10 01:58:00 d2.utils.events]:  eta: 1:02:16  iter: 299  total_loss: 7.343  loss_sem_seg: 5.116  loss_center: 0.785  loss_offset: 1.485  time: 0.3855  data_time: 0.0273  lr: 0.00072906  max_mem: 8471M
[12/10 01:58:07 d2.utils.events]:  eta: 1:02:09  iter: 319  total_loss: 7.293  loss_sem_seg: 5.087  loss_center: 0.6444  loss_offset: 1.43  time: 0.3855  data_time: 0.0267  lr: 0.00077622  max_mem: 8471M
[12/10 01:58:15 d2.utils.events]:  eta: 1:02:03  iter: 339  total_loss: 7.339  loss_sem_seg: 5.133  loss_center: 0.8114  loss_offset: 1.34  time: 0.3857  data_time: 0.0289  lr: 0.0008232  max_mem: 8471M
[12/10 01:58:23 d2.utils.events]:  eta: 1:01:57  iter: 359  total_loss: 7.362  loss_sem_seg: 5.307  loss_center: 0.869  loss_offset: 1.312  time: 0.3857  data_time: 0.0276  lr: 0.00087  max_mem: 8471M
[12/10 01:58:31 d2.utils.events]:  eta: 1:01:48  iter: 379  total_loss: 7.271  loss_sem_seg: 5.146  loss_center: 0.6923  loss_offset: 1.492  time: 0.3857  data_time: 0.0261  lr: 0.00091662  max_mem: 8471M
[12/10 01:58:38 d2.utils.events]:  eta: 1:01:44  iter: 399  total_loss: 7.679  loss_sem_seg: 5.308  loss_center: 0.6531  loss_offset: 1.618  time: 0.3859  data_time: 0.0291  lr: 0.00096306  max_mem: 8471M
[12/10 01:58:46 d2.utils.events]:  eta: 1:01:32  iter: 419  total_loss: 7.296  loss_sem_seg: 5.039  loss_center: 0.7251  loss_offset: 1.319  time: 0.3859  data_time: 0.0263  lr: 0.0010093  max_mem: 8471M
[12/10 01:58:54 d2.utils.events]:  eta: 1:01:22  iter: 439  total_loss: 7.425  loss_sem_seg: 5.111  loss_center: 0.6167  loss_offset: 1.402  time: 0.3858  data_time: 0.0266  lr: 0.0010554  max_mem: 8471M
[12/10 01:59:02 d2.utils.events]:  eta: 1:01:14  iter: 459  total_loss: 7.094  loss_sem_seg: 5.142  loss_center: 0.583  loss_offset: 1.441  time: 0.3858  data_time: 0.0279  lr: 0.0011013  max_mem: 8471M
[12/10 01:59:09 d2.utils.events]:  eta: 1:01:06  iter: 479  total_loss: 7.163  loss_sem_seg: 5.058  loss_center: 0.7316  loss_offset: 1.313  time: 0.3857  data_time: 0.0280  lr: 0.001147  max_mem: 8471M
[12/10 01:59:17 d2.utils.events]:  eta: 1:01:00  iter: 499  total_loss: 7.462  loss_sem_seg: 5.239  loss_center: 0.9045  loss_offset: 1.218  time: 0.3858  data_time: 0.0280  lr: 0.0011925  max_mem: 8471M
[12/10 01:59:25 d2.utils.events]:  eta: 1:00:53  iter: 519  total_loss: 7.184  loss_sem_seg: 5.055  loss_center: 0.7036  loss_offset: 1.553  time: 0.3857  data_time: 0.0260  lr: 0.0012379  max_mem: 8471M
[12/10 01:59:32 d2.utils.events]:  eta: 1:00:46  iter: 539  total_loss: 7.102  loss_sem_seg: 5.049  loss_center: 0.6487  loss_offset: 1.307  time: 0.3857  data_time: 0.0261  lr: 0.001283  max_mem: 8471M
[12/10 01:59:40 d2.utils.events]:  eta: 1:00:38  iter: 559  total_loss: 6.934  loss_sem_seg: 5.045  loss_center: 0.6514  loss_offset: 1.237  time: 0.3857  data_time: 0.0279  lr: 0.001328  max_mem: 8471M
[12/10 01:59:48 d2.utils.events]:  eta: 1:00:28  iter: 579  total_loss: 6.877  loss_sem_seg: 5.048  loss_center: 0.6125  loss_offset: 1.402  time: 0.3857  data_time: 0.0264  lr: 0.0013728  max_mem: 8471M
[12/10 01:59:56 d2.utils.events]:  eta: 1:00:21  iter: 599  total_loss: 7.363  loss_sem_seg: 5.205  loss_center: 0.8845  loss_offset: 1.302  time: 0.3857  data_time: 0.0273  lr: 0.0014175  max_mem: 8471M
[12/10 02:00:03 d2.utils.events]:  eta: 1:00:11  iter: 619  total_loss: 6.948  loss_sem_seg: 4.937  loss_center: 0.6  loss_offset: 1.306  time: 0.3857  data_time: 0.0266  lr: 0.0014619  max_mem: 8471M
[12/10 02:00:11 d2.utils.events]:  eta: 1:00:02  iter: 639  total_loss: 7.117  loss_sem_seg: 5.123  loss_center: 0.7437  loss_offset: 1.278  time: 0.3857  data_time: 0.0289  lr: 0.0015062  max_mem: 8471M
[12/10 02:00:19 d2.utils.events]:  eta: 0:59:56  iter: 659  total_loss: 6.94  loss_sem_seg: 4.961  loss_center: 0.6109  loss_offset: 1.266  time: 0.3857  data_time: 0.0274  lr: 0.0015503  max_mem: 8471M
[12/10 02:00:26 d2.utils.events]:  eta: 0:59:49  iter: 679  total_loss: 6.94  loss_sem_seg: 5.018  loss_center: 0.5913  loss_offset: 1.28  time: 0.3857  data_time: 0.0260  lr: 0.0015942  max_mem: 8471M
[12/10 02:00:34 d2.utils.events]:  eta: 0:59:41  iter: 699  total_loss: 7.245  loss_sem_seg: 5.15  loss_center: 0.6505  loss_offset: 1.333  time: 0.3857  data_time: 0.0267  lr: 0.0016379  max_mem: 8471M
[12/10 02:00:42 d2.utils.events]:  eta: 0:59:33  iter: 719  total_loss: 6.928  loss_sem_seg: 4.997  loss_center: 0.7214  loss_offset: 1.14  time: 0.3856  data_time: 0.0249  lr: 0.0016814  max_mem: 8471M
[12/10 02:00:50 d2.utils.events]:  eta: 0:59:28  iter: 739  total_loss: 7.329  loss_sem_seg: 5.131  loss_center: 0.7314  loss_offset: 1.201  time: 0.3857  data_time: 0.0278  lr: 0.0017248  max_mem: 8471M
[12/10 02:00:57 d2.utils.events]:  eta: 0:59:20  iter: 759  total_loss: 6.882  loss_sem_seg: 5.082  loss_center: 0.7371  loss_offset: 1.151  time: 0.3857  data_time: 0.0280  lr: 0.0017679  max_mem: 8471M
[12/10 02:01:05 d2.utils.events]:  eta: 0:59:12  iter: 779  total_loss: 6.952  loss_sem_seg: 5.021  loss_center: 0.6912  loss_offset: 1.215  time: 0.3857  data_time: 0.0251  lr: 0.0018109  max_mem: 8471M
[12/10 02:01:13 d2.utils.events]:  eta: 0:59:05  iter: 799  total_loss: 6.908  loss_sem_seg: 5.026  loss_center: 0.7883  loss_offset: 1.074  time: 0.3857  data_time: 0.0280  lr: 0.0018537  max_mem: 8471M
[12/10 02:01:21 d2.utils.events]:  eta: 0:58:58  iter: 819  total_loss: 7.117  loss_sem_seg: 5.035  loss_center: 0.7138  loss_offset: 1.239  time: 0.3858  data_time: 0.0285  lr: 0.0018964  max_mem: 8471M
[12/10 02:01:28 d2.utils.events]:  eta: 0:58:52  iter: 839  total_loss: 6.932  loss_sem_seg: 5.097  loss_center: 0.6527  loss_offset: 1.102  time: 0.3858  data_time: 0.0268  lr: 0.0019388  max_mem: 8471M
[12/10 02:01:36 d2.utils.events]:  eta: 0:58:42  iter: 859  total_loss: 6.812  loss_sem_seg: 5.02  loss_center: 0.5829  loss_offset: 1.258  time: 0.3858  data_time: 0.0266  lr: 0.0019811  max_mem: 8471M
[12/10 02:01:44 d2.utils.events]:  eta: 0:58:33  iter: 879  total_loss: 6.81  loss_sem_seg: 4.993  loss_center: 0.6717  loss_offset: 1.008  time: 0.3858  data_time: 0.0270  lr: 0.0020231  max_mem: 8471M
[12/10 02:01:52 d2.utils.events]:  eta: 0:58:26  iter: 899  total_loss: 6.753  loss_sem_seg: 4.826  loss_center: 0.832  loss_offset: 1.117  time: 0.3858  data_time: 0.0262  lr: 0.002065  max_mem: 8471M
[12/10 02:01:59 d2.utils.events]:  eta: 0:58:18  iter: 919  total_loss: 6.968  loss_sem_seg: 5.067  loss_center: 0.6478  loss_offset: 1.253  time: 0.3858  data_time: 0.0271  lr: 0.0021068  max_mem: 8471M
[12/10 02:02:07 d2.utils.events]:  eta: 0:58:11  iter: 939  total_loss: 7.007  loss_sem_seg: 5.119  loss_center: 0.7391  loss_offset: 1.121  time: 0.3858  data_time: 0.0275  lr: 0.0021483  max_mem: 8471M
[12/10 02:02:15 d2.utils.events]:  eta: 0:58:07  iter: 959  total_loss: 7.097  loss_sem_seg: 5.021  loss_center: 0.7129  loss_offset: 1.177  time: 0.3858  data_time: 0.0266  lr: 0.0021896  max_mem: 8471M
[12/10 02:02:22 d2.utils.events]:  eta: 0:57:58  iter: 979  total_loss: 6.892  loss_sem_seg: 5.061  loss_center: 0.6638  loss_offset: 1.138  time: 0.3858  data_time: 0.0255  lr: 0.0022308  max_mem: 8471M
[12/10 02:02:30 d2.utils.events]:  eta: 0:57:49  iter: 999  total_loss: 6.816  loss_sem_seg: 4.828  loss_center: 0.6721  loss_offset: 1.097  time: 0.3857  data_time: 0.0263  lr: 0.0022718  max_mem: 8471M
[12/10 02:02:38 d2.utils.events]:  eta: 0:57:40  iter: 1019  total_loss: 6.756  loss_sem_seg: 4.895  loss_center: 0.7626  loss_offset: 1.135  time: 0.3857  data_time: 0.0269  lr: 0.0022695  max_mem: 8471M
[12/10 02:02:45 d2.utils.events]:  eta: 0:57:35  iter: 1039  total_loss: 6.694  loss_sem_seg: 4.785  loss_center: 0.7718  loss_offset: 1.158  time: 0.3857  data_time: 0.0264  lr: 0.002265  max_mem: 8471M
[12/10 02:02:53 d2.utils.events]:  eta: 0:57:28  iter: 1059  total_loss: 6.782  loss_sem_seg: 4.937  loss_center: 0.6937  loss_offset: 1.185  time: 0.3857  data_time: 0.0260  lr: 0.0022604  max_mem: 8471M
[12/10 02:03:01 d2.utils.events]:  eta: 0:57:20  iter: 1079  total_loss: 7.261  loss_sem_seg: 5.124  loss_center: 1.022  loss_offset: 1.135  time: 0.3857  data_time: 0.0270  lr: 0.0022559  max_mem: 8471M
[12/10 02:03:09 d2.utils.events]:  eta: 0:57:13  iter: 1099  total_loss: 6.93  loss_sem_seg: 5.002  loss_center: 0.8187  loss_offset: 1.173  time: 0.3857  data_time: 0.0274  lr: 0.0022513  max_mem: 8471M
[12/10 02:03:16 d2.utils.events]:  eta: 0:57:05  iter: 1119  total_loss: 6.703  loss_sem_seg: 4.858  loss_center: 0.5967  loss_offset: 1.136  time: 0.3858  data_time: 0.0271  lr: 0.0022468  max_mem: 8471M
[12/10 02:03:24 d2.utils.events]:  eta: 0:56:56  iter: 1139  total_loss: 6.572  loss_sem_seg: 4.942  loss_center: 0.6592  loss_offset: 1.142  time: 0.3858  data_time: 0.0266  lr: 0.0022422  max_mem: 8471M
[12/10 02:03:32 d2.utils.events]:  eta: 0:56:50  iter: 1159  total_loss: 6.684  loss_sem_seg: 4.791  loss_center: 0.7217  loss_offset: 1.102  time: 0.3858  data_time: 0.0281  lr: 0.0022376  max_mem: 8471M
[12/10 02:03:40 d2.utils.events]:  eta: 0:56:41  iter: 1179  total_loss: 6.888  loss_sem_seg: 4.883  loss_center: 0.8123  loss_offset: 1.159  time: 0.3859  data_time: 0.0274  lr: 0.0022331  max_mem: 8471M
[12/10 02:03:48 d2.utils.events]:  eta: 0:56:34  iter: 1199  total_loss: 6.962  loss_sem_seg: 5.003  loss_center: 0.7156  loss_offset: 1.186  time: 0.3859  data_time: 0.0286  lr: 0.0022285  max_mem: 8471M
[12/10 02:03:55 d2.utils.events]:  eta: 0:56:26  iter: 1219  total_loss: 6.857  loss_sem_seg: 4.965  loss_center: 0.6977  loss_offset: 1.071  time: 0.3859  data_time: 0.0267  lr: 0.002224  max_mem: 8471M
[12/10 02:04:03 d2.utils.events]:  eta: 0:56:17  iter: 1239  total_loss: 6.626  loss_sem_seg: 4.846  loss_center: 0.543  loss_offset: 1.103  time: 0.3859  data_time: 0.0265  lr: 0.0022194  max_mem: 8471M
[12/10 02:04:11 d2.utils.events]:  eta: 0:56:06  iter: 1259  total_loss: 6.752  loss_sem_seg: 4.795  loss_center: 0.8612  loss_offset: 1.12  time: 0.3859  data_time: 0.0257  lr: 0.0022149  max_mem: 8471M
[12/10 02:04:18 d2.utils.events]:  eta: 0:56:00  iter: 1279  total_loss: 6.645  loss_sem_seg: 4.821  loss_center: 0.6243  loss_offset: 1.152  time: 0.3859  data_time: 0.0267  lr: 0.0022103  max_mem: 8471M
[12/10 02:04:26 d2.utils.events]:  eta: 0:55:51  iter: 1299  total_loss: 6.926  loss_sem_seg: 5.068  loss_center: 0.7242  loss_offset: 1.17  time: 0.3859  data_time: 0.0274  lr: 0.0022057  max_mem: 8471M
[12/10 02:04:34 d2.utils.events]:  eta: 0:55:43  iter: 1319  total_loss: 6.657  loss_sem_seg: 4.735  loss_center: 0.7913  loss_offset: 0.949  time: 0.3859  data_time: 0.0287  lr: 0.0022012  max_mem: 8471M
[12/10 02:04:42 d2.utils.events]:  eta: 0:55:35  iter: 1339  total_loss: 6.757  loss_sem_seg: 4.856  loss_center: 0.7966  loss_offset: 1.171  time: 0.3859  data_time: 0.0259  lr: 0.0021966  max_mem: 8471M
[12/10 02:04:49 d2.utils.events]:  eta: 0:55:28  iter: 1359  total_loss: 6.432  loss_sem_seg: 4.785  loss_center: 0.6634  loss_offset: 1.186  time: 0.3859  data_time: 0.0285  lr: 0.002192  max_mem: 8471M
[12/10 02:04:57 d2.utils.events]:  eta: 0:55:22  iter: 1379  total_loss: 6.775  loss_sem_seg: 4.812  loss_center: 0.8403  loss_offset: 1.096  time: 0.3859  data_time: 0.0269  lr: 0.0021875  max_mem: 8471M
[12/10 02:05:05 d2.utils.events]:  eta: 0:55:12  iter: 1399  total_loss: 6.254  loss_sem_seg: 4.627  loss_center: 0.4061  loss_offset: 1.047  time: 0.3859  data_time: 0.0263  lr: 0.0021829  max_mem: 8471M
[12/10 02:05:12 d2.utils.events]:  eta: 0:55:05  iter: 1419  total_loss: 6.612  loss_sem_seg: 4.773  loss_center: 0.7072  loss_offset: 1.08  time: 0.3859  data_time: 0.0270  lr: 0.0021783  max_mem: 8471M
[12/10 02:05:20 d2.utils.events]:  eta: 0:55:00  iter: 1439  total_loss: 6.408  loss_sem_seg: 4.752  loss_center: 0.5648  loss_offset: 1.052  time: 0.3859  data_time: 0.0271  lr: 0.0021738  max_mem: 8471M
[12/10 02:05:28 d2.utils.events]:  eta: 0:54:54  iter: 1459  total_loss: 6.618  loss_sem_seg: 4.773  loss_center: 0.7712  loss_offset: 1.015  time: 0.3859  data_time: 0.0289  lr: 0.0021692  max_mem: 8471M
[12/10 02:05:36 d2.utils.events]:  eta: 0:54:46  iter: 1479  total_loss: 6.675  loss_sem_seg: 4.818  loss_center: 0.8792  loss_offset: 1.122  time: 0.3859  data_time: 0.0276  lr: 0.0021646  max_mem: 8471M
[12/10 02:05:43 d2.utils.events]:  eta: 0:54:37  iter: 1499  total_loss: 6.546  loss_sem_seg: 4.764  loss_center: 0.6411  loss_offset: 1.2  time: 0.3859  data_time: 0.0256  lr: 0.00216  max_mem: 8471M
[12/10 02:05:51 d2.utils.events]:  eta: 0:54:26  iter: 1519  total_loss: 6.588  loss_sem_seg: 4.699  loss_center: 0.8478  loss_offset: 0.9177  time: 0.3859  data_time: 0.0252  lr: 0.0021555  max_mem: 8471M
[12/10 02:05:59 d2.utils.events]:  eta: 0:54:19  iter: 1539  total_loss: 6.863  loss_sem_seg: 4.964  loss_center: 0.6519  loss_offset: 1.13  time: 0.3859  data_time: 0.0277  lr: 0.0021509  max_mem: 8471M
[12/10 02:06:07 d2.utils.events]:  eta: 0:54:11  iter: 1559  total_loss: 6.419  loss_sem_seg: 4.693  loss_center: 0.6132  loss_offset: 1.101  time: 0.3859  data_time: 0.0271  lr: 0.0021463  max_mem: 8471M
[12/10 02:06:14 d2.utils.events]:  eta: 0:54:04  iter: 1579  total_loss: 6.215  loss_sem_seg: 4.626  loss_center: 0.6137  loss_offset: 1.002  time: 0.3858  data_time: 0.0260  lr: 0.0021417  max_mem: 8471M
[12/10 02:06:22 d2.utils.events]:  eta: 0:53:56  iter: 1599  total_loss: 6.51  loss_sem_seg: 4.689  loss_center: 0.6007  loss_offset: 1.051  time: 0.3858  data_time: 0.0268  lr: 0.0021372  max_mem: 8471M
[12/10 02:06:30 d2.utils.events]:  eta: 0:53:51  iter: 1619  total_loss: 6.677  loss_sem_seg: 4.644  loss_center: 0.7331  loss_offset: 1.092  time: 0.3858  data_time: 0.0273  lr: 0.0021326  max_mem: 8471M
[12/10 02:06:37 d2.utils.events]:  eta: 0:53:43  iter: 1639  total_loss: 6.37  loss_sem_seg: 4.781  loss_center: 0.5603  loss_offset: 1.115  time: 0.3858  data_time: 0.0270  lr: 0.002128  max_mem: 8471M
[12/10 02:06:45 d2.utils.events]:  eta: 0:53:33  iter: 1659  total_loss: 6.741  loss_sem_seg: 4.959  loss_center: 0.6131  loss_offset: 1.161  time: 0.3858  data_time: 0.0283  lr: 0.0021234  max_mem: 8471M
[12/10 02:06:53 d2.utils.events]:  eta: 0:53:26  iter: 1679  total_loss: 6.432  loss_sem_seg: 4.718  loss_center: 0.7017  loss_offset: 1.04  time: 0.3858  data_time: 0.0284  lr: 0.0021188  max_mem: 8471M
[12/10 02:07:01 d2.utils.events]:  eta: 0:53:18  iter: 1699  total_loss: 6.753  loss_sem_seg: 5.073  loss_center: 0.7288  loss_offset: 0.9925  time: 0.3858  data_time: 0.0264  lr: 0.0021143  max_mem: 8471M
[12/10 02:07:08 d2.utils.events]:  eta: 0:53:10  iter: 1719  total_loss: 6.392  loss_sem_seg: 4.595  loss_center: 0.6445  loss_offset: 0.9495  time: 0.3858  data_time: 0.0271  lr: 0.0021097  max_mem: 8471M
[12/10 02:07:16 d2.utils.events]:  eta: 0:53:01  iter: 1739  total_loss: 6.37  loss_sem_seg: 4.768  loss_center: 0.7164  loss_offset: 0.9799  time: 0.3858  data_time: 0.0260  lr: 0.0021051  max_mem: 8471M
[12/10 02:07:24 d2.utils.events]:  eta: 0:52:54  iter: 1759  total_loss: 6.614  loss_sem_seg: 4.844  loss_center: 0.6288  loss_offset: 1.15  time: 0.3858  data_time: 0.0276  lr: 0.0021005  max_mem: 8471M
[12/10 02:07:31 d2.utils.events]:  eta: 0:52:48  iter: 1779  total_loss: 6.427  loss_sem_seg: 4.711  loss_center: 0.6933  loss_offset: 1.091  time: 0.3858  data_time: 0.0283  lr: 0.0020959  max_mem: 8471M
[12/10 02:07:39 d2.utils.events]:  eta: 0:52:40  iter: 1799  total_loss: 6.734  loss_sem_seg: 4.935  loss_center: 0.8107  loss_offset: 0.9968  time: 0.3858  data_time: 0.0265  lr: 0.0020913  max_mem: 8471M
[12/10 02:07:47 d2.utils.events]:  eta: 0:52:32  iter: 1819  total_loss: 6.434  loss_sem_seg: 4.906  loss_center: 0.6543  loss_offset: 0.9091  time: 0.3858  data_time: 0.0260  lr: 0.0020867  max_mem: 8471M
[12/10 02:07:55 d2.utils.events]:  eta: 0:52:23  iter: 1839  total_loss: 6.267  loss_sem_seg: 4.593  loss_center: 0.7062  loss_offset: 1.056  time: 0.3858  data_time: 0.0274  lr: 0.0020821  max_mem: 8471M
[12/10 02:08:02 d2.utils.events]:  eta: 0:52:17  iter: 1859  total_loss: 6.105  loss_sem_seg: 4.661  loss_center: 0.5171  loss_offset: 1.012  time: 0.3858  data_time: 0.0279  lr: 0.0020775  max_mem: 8471M
[12/10 02:08:10 d2.utils.events]:  eta: 0:52:09  iter: 1879  total_loss: 6.388  loss_sem_seg: 4.631  loss_center: 0.8032  loss_offset: 1.109  time: 0.3858  data_time: 0.0275  lr: 0.0020729  max_mem: 8471M
[12/10 02:08:18 d2.utils.events]:  eta: 0:52:00  iter: 1899  total_loss: 6.428  loss_sem_seg: 4.693  loss_center: 0.6373  loss_offset: 1.034  time: 0.3858  data_time: 0.0254  lr: 0.0020684  max_mem: 8471M
[12/10 02:08:26 d2.utils.events]:  eta: 0:51:54  iter: 1919  total_loss: 6.558  loss_sem_seg: 4.758  loss_center: 0.6311  loss_offset: 1.04  time: 0.3859  data_time: 0.0284  lr: 0.0020638  max_mem: 8471M
[12/10 02:08:33 d2.utils.events]:  eta: 0:51:45  iter: 1939  total_loss: 6.556  loss_sem_seg: 4.784  loss_center: 0.5655  loss_offset: 1.086  time: 0.3858  data_time: 0.0261  lr: 0.0020592  max_mem: 8471M
[12/10 02:08:41 d2.utils.events]:  eta: 0:51:36  iter: 1959  total_loss: 6.647  loss_sem_seg: 4.707  loss_center: 0.6597  loss_offset: 1.045  time: 0.3859  data_time: 0.0282  lr: 0.0020546  max_mem: 8471M
[12/10 02:08:49 d2.utils.events]:  eta: 0:51:29  iter: 1979  total_loss: 6.464  loss_sem_seg: 4.691  loss_center: 0.6232  loss_offset: 1.028  time: 0.3859  data_time: 0.0284  lr: 0.00205  max_mem: 8471M
[12/10 02:08:57 d2.utils.events]:  eta: 0:51:22  iter: 1999  total_loss: 6.447  loss_sem_seg: 4.649  loss_center: 0.6892  loss_offset: 1.008  time: 0.3859  data_time: 0.0257  lr: 0.0020454  max_mem: 8471M
[12/10 02:09:04 d2.utils.events]:  eta: 0:51:14  iter: 2019  total_loss: 6.289  loss_sem_seg: 4.554  loss_center: 0.645  loss_offset: 1.072  time: 0.3859  data_time: 0.0269  lr: 0.0020408  max_mem: 8471M
[12/10 02:09:12 d2.utils.events]:  eta: 0:51:05  iter: 2039  total_loss: 6.295  loss_sem_seg: 4.677  loss_center: 0.6676  loss_offset: 0.9679  time: 0.3859  data_time: 0.0267  lr: 0.0020362  max_mem: 8471M
[12/10 02:09:20 d2.utils.events]:  eta: 0:50:56  iter: 2059  total_loss: 6.816  loss_sem_seg: 4.829  loss_center: 0.7591  loss_offset: 1.012  time: 0.3858  data_time: 0.0261  lr: 0.0020316  max_mem: 8471M
[12/10 02:09:27 d2.utils.events]:  eta: 0:50:48  iter: 2079  total_loss: 6.658  loss_sem_seg: 4.758  loss_center: 0.7271  loss_offset: 1.054  time: 0.3858  data_time: 0.0267  lr: 0.0020269  max_mem: 8471M
[12/10 02:09:35 d2.utils.events]:  eta: 0:50:41  iter: 2099  total_loss: 6.422  loss_sem_seg: 4.472  loss_center: 0.8029  loss_offset: 1.047  time: 0.3859  data_time: 0.0263  lr: 0.0020223  max_mem: 8471M
[12/10 02:09:43 d2.utils.events]:  eta: 0:50:34  iter: 2119  total_loss: 6.577  loss_sem_seg: 4.866  loss_center: 0.5931  loss_offset: 1.087  time: 0.3859  data_time: 0.0290  lr: 0.0020177  max_mem: 8471M
[12/10 02:09:51 d2.utils.events]:  eta: 0:50:28  iter: 2139  total_loss: 6.373  loss_sem_seg: 4.776  loss_center: 0.5961  loss_offset: 1.032  time: 0.3859  data_time: 0.0261  lr: 0.0020131  max_mem: 8471M
[12/10 02:09:58 d2.utils.events]:  eta: 0:50:20  iter: 2159  total_loss: 6.368  loss_sem_seg: 4.467  loss_center: 0.762  loss_offset: 1.105  time: 0.3859  data_time: 0.0269  lr: 0.0020085  max_mem: 8471M
[12/10 02:10:06 d2.utils.events]:  eta: 0:50:13  iter: 2179  total_loss: 6.278  loss_sem_seg: 4.608  loss_center: 0.5989  loss_offset: 1.024  time: 0.3859  data_time: 0.0292  lr: 0.0020039  max_mem: 8471M
[12/10 02:10:14 d2.utils.events]:  eta: 0:50:04  iter: 2199  total_loss: 6.423  loss_sem_seg: 4.798  loss_center: 0.641  loss_offset: 0.947  time: 0.3859  data_time: 0.0273  lr: 0.0019993  max_mem: 8471M
[12/10 02:10:22 d2.utils.events]:  eta: 0:49:57  iter: 2219  total_loss: 6.34  loss_sem_seg: 4.642  loss_center: 0.6811  loss_offset: 1.061  time: 0.3859  data_time: 0.0269  lr: 0.0019947  max_mem: 8471M
[12/10 02:10:29 d2.utils.events]:  eta: 0:49:49  iter: 2239  total_loss: 6.469  loss_sem_seg: 4.704  loss_center: 0.852  loss_offset: 1.073  time: 0.3859  data_time: 0.0270  lr: 0.0019901  max_mem: 8471M
[12/10 02:10:37 d2.utils.events]:  eta: 0:49:42  iter: 2259  total_loss: 6.577  loss_sem_seg: 4.761  loss_center: 0.6964  loss_offset: 1.038  time: 0.3859  data_time: 0.0291  lr: 0.0019854  max_mem: 8471M
[12/10 02:10:45 d2.utils.events]:  eta: 0:49:33  iter: 2279  total_loss: 6.495  loss_sem_seg: 4.721  loss_center: 0.6101  loss_offset: 1.137  time: 0.3859  data_time: 0.0240  lr: 0.0019808  max_mem: 8471M
[12/10 02:10:52 d2.utils.events]:  eta: 0:49:25  iter: 2299  total_loss: 6.432  loss_sem_seg: 4.663  loss_center: 0.7619  loss_offset: 1.101  time: 0.3859  data_time: 0.0268  lr: 0.0019762  max_mem: 8471M
[12/10 02:11:00 d2.utils.events]:  eta: 0:49:17  iter: 2319  total_loss: 6.481  loss_sem_seg: 4.723  loss_center: 0.5944  loss_offset: 1.083  time: 0.3859  data_time: 0.0274  lr: 0.0019716  max_mem: 8471M
[12/10 02:11:08 d2.utils.events]:  eta: 0:49:08  iter: 2339  total_loss: 6.173  loss_sem_seg: 4.799  loss_center: 0.6887  loss_offset: 0.9832  time: 0.3859  data_time: 0.0259  lr: 0.001967  max_mem: 8471M
[12/10 02:11:16 d2.utils.events]:  eta: 0:49:00  iter: 2359  total_loss: 6.695  loss_sem_seg: 4.696  loss_center: 0.7937  loss_offset: 1.02  time: 0.3859  data_time: 0.0262  lr: 0.0019623  max_mem: 8471M
[12/10 02:11:23 d2.utils.events]:  eta: 0:48:53  iter: 2379  total_loss: 6.521  loss_sem_seg: 4.81  loss_center: 0.7329  loss_offset: 0.9857  time: 0.3859  data_time: 0.0272  lr: 0.0019577  max_mem: 8471M
[12/10 02:11:31 d2.utils.events]:  eta: 0:48:45  iter: 2399  total_loss: 6.504  loss_sem_seg: 4.73  loss_center: 0.7753  loss_offset: 0.9293  time: 0.3858  data_time: 0.0259  lr: 0.0019531  max_mem: 8471M
[12/10 02:11:39 d2.utils.events]:  eta: 0:48:38  iter: 2419  total_loss: 6.325  loss_sem_seg: 4.667  loss_center: 0.5881  loss_offset: 1.105  time: 0.3858  data_time: 0.0262  lr: 0.0019485  max_mem: 8471M
[12/10 02:11:46 d2.utils.events]:  eta: 0:48:30  iter: 2439  total_loss: 6.321  loss_sem_seg: 4.648  loss_center: 0.6522  loss_offset: 1.002  time: 0.3858  data_time: 0.0280  lr: 0.0019438  max_mem: 8471M
[12/10 02:11:54 d2.utils.events]:  eta: 0:48:22  iter: 2459  total_loss: 6.278  loss_sem_seg: 4.497  loss_center: 0.7621  loss_offset: 1.083  time: 0.3858  data_time: 0.0268  lr: 0.0019392  max_mem: 8471M
[12/10 02:12:02 d2.utils.events]:  eta: 0:48:15  iter: 2479  total_loss: 6.353  loss_sem_seg: 4.512  loss_center: 0.777  loss_offset: 1.068  time: 0.3858  data_time: 0.0271  lr: 0.0019346  max_mem: 8471M
[12/10 02:12:10 d2.utils.events]:  eta: 0:48:07  iter: 2499  total_loss: 6.367  loss_sem_seg: 4.461  loss_center: 0.684  loss_offset: 1.037  time: 0.3858  data_time: 0.0264  lr: 0.00193  max_mem: 8471M
[12/10 02:12:17 d2.utils.events]:  eta: 0:47:59  iter: 2519  total_loss: 6.441  loss_sem_seg: 4.707  loss_center: 0.7752  loss_offset: 1.043  time: 0.3858  data_time: 0.0280  lr: 0.0019253  max_mem: 8471M
[12/10 02:12:25 d2.utils.events]:  eta: 0:47:50  iter: 2539  total_loss: 6.368  loss_sem_seg: 4.544  loss_center: 0.6303  loss_offset: 1.073  time: 0.3858  data_time: 0.0268  lr: 0.0019207  max_mem: 8471M
[12/10 02:12:33 d2.utils.events]:  eta: 0:47:43  iter: 2559  total_loss: 6.601  loss_sem_seg: 4.747  loss_center: 0.7033  loss_offset: 1.005  time: 0.3858  data_time: 0.0273  lr: 0.0019161  max_mem: 8471M
[12/10 02:12:40 d2.utils.events]:  eta: 0:47:35  iter: 2579  total_loss: 6.429  loss_sem_seg: 4.631  loss_center: 0.6321  loss_offset: 1.119  time: 0.3858  data_time: 0.0278  lr: 0.0019114  max_mem: 8471M
[12/10 02:12:48 d2.utils.events]:  eta: 0:47:28  iter: 2599  total_loss: 6.834  loss_sem_seg: 4.915  loss_center: 0.8588  loss_offset: 0.9375  time: 0.3858  data_time: 0.0269  lr: 0.0019068  max_mem: 8471M
[12/10 02:12:56 d2.utils.events]:  eta: 0:47:20  iter: 2619  total_loss: 5.94  loss_sem_seg: 4.351  loss_center: 0.5078  loss_offset: 0.9617  time: 0.3858  data_time: 0.0282  lr: 0.0019021  max_mem: 8471M
[12/10 02:13:04 d2.utils.events]:  eta: 0:47:12  iter: 2639  total_loss: 6.08  loss_sem_seg: 4.479  loss_center: 0.7464  loss_offset: 0.9039  time: 0.3858  data_time: 0.0256  lr: 0.0018975  max_mem: 8471M
[12/10 02:13:11 d2.utils.events]:  eta: 0:47:05  iter: 2659  total_loss: 6.156  loss_sem_seg: 4.397  loss_center: 0.6883  loss_offset: 1.001  time: 0.3858  data_time: 0.0261  lr: 0.0018929  max_mem: 8471M
[12/10 02:13:19 d2.utils.events]:  eta: 0:46:58  iter: 2679  total_loss: 6.19  loss_sem_seg: 4.543  loss_center: 0.6208  loss_offset: 1.03  time: 0.3858  data_time: 0.0274  lr: 0.0018882  max_mem: 8471M
[12/10 02:13:27 d2.utils.events]:  eta: 0:46:51  iter: 2699  total_loss: 6.418  loss_sem_seg: 4.87  loss_center: 0.6248  loss_offset: 0.9676  time: 0.3858  data_time: 0.0269  lr: 0.0018836  max_mem: 8471M
[12/10 02:13:35 d2.utils.events]:  eta: 0:46:44  iter: 2719  total_loss: 6.268  loss_sem_seg: 4.654  loss_center: 0.5658  loss_offset: 1.034  time: 0.3858  data_time: 0.0259  lr: 0.0018789  max_mem: 8471M
[12/10 02:13:42 d2.utils.events]:  eta: 0:46:35  iter: 2739  total_loss: 6.742  loss_sem_seg: 4.625  loss_center: 0.7659  loss_offset: 1.039  time: 0.3858  data_time: 0.0273  lr: 0.0018743  max_mem: 8471M
[12/10 02:13:50 d2.utils.events]:  eta: 0:46:27  iter: 2759  total_loss: 6.671  loss_sem_seg: 4.593  loss_center: 0.7947  loss_offset: 1.005  time: 0.3858  data_time: 0.0264  lr: 0.0018696  max_mem: 8471M
[12/10 02:13:58 d2.utils.events]:  eta: 0:46:18  iter: 2779  total_loss: 6.186  loss_sem_seg: 4.492  loss_center: 0.6031  loss_offset: 1.101  time: 0.3858  data_time: 0.0283  lr: 0.001865  max_mem: 8471M
[12/10 02:14:05 d2.utils.events]:  eta: 0:46:11  iter: 2799  total_loss: 6.109  loss_sem_seg: 4.582  loss_center: 0.6595  loss_offset: 0.9293  time: 0.3858  data_time: 0.0253  lr: 0.0018603  max_mem: 8471M
[12/10 02:14:13 d2.utils.events]:  eta: 0:46:04  iter: 2819  total_loss: 6.357  loss_sem_seg: 4.56  loss_center: 0.6498  loss_offset: 1.032  time: 0.3858  data_time: 0.0280  lr: 0.0018557  max_mem: 8471M
[12/10 02:14:21 d2.utils.events]:  eta: 0:45:56  iter: 2839  total_loss: 6.485  loss_sem_seg: 4.71  loss_center: 0.6961  loss_offset: 0.8619  time: 0.3858  data_time: 0.0267  lr: 0.001851  max_mem: 8471M
[12/10 02:14:29 d2.utils.events]:  eta: 0:45:48  iter: 2859  total_loss: 6.348  loss_sem_seg: 4.517  loss_center: 0.7879  loss_offset: 0.8352  time: 0.3858  data_time: 0.0268  lr: 0.0018464  max_mem: 8471M
[12/10 02:14:36 d2.utils.events]:  eta: 0:45:40  iter: 2879  total_loss: 6.411  loss_sem_seg: 4.646  loss_center: 0.5963  loss_offset: 1.002  time: 0.3858  data_time: 0.0275  lr: 0.0018417  max_mem: 8471M
[12/10 02:14:44 d2.utils.events]:  eta: 0:45:33  iter: 2899  total_loss: 6.116  loss_sem_seg: 4.434  loss_center: 0.707  loss_offset: 0.9534  time: 0.3858  data_time: 0.0265  lr: 0.0018371  max_mem: 8471M
[12/10 02:14:52 d2.utils.events]:  eta: 0:45:25  iter: 2919  total_loss: 6.156  loss_sem_seg: 4.52  loss_center: 0.6009  loss_offset: 0.8982  time: 0.3858  data_time: 0.0264  lr: 0.0018324  max_mem: 8471M
[12/10 02:15:00 d2.utils.events]:  eta: 0:45:17  iter: 2939  total_loss: 6.192  loss_sem_seg: 4.441  loss_center: 0.7665  loss_offset: 0.9332  time: 0.3858  data_time: 0.0282  lr: 0.0018278  max_mem: 8471M
[12/10 02:15:07 d2.utils.events]:  eta: 0:45:10  iter: 2959  total_loss: 6.323  loss_sem_seg: 4.573  loss_center: 0.7463  loss_offset: 0.9297  time: 0.3858  data_time: 0.0271  lr: 0.0018231  max_mem: 8471M
[12/10 02:15:15 d2.utils.events]:  eta: 0:45:01  iter: 2979  total_loss: 6.258  loss_sem_seg: 4.671  loss_center: 0.6462  loss_offset: 1.018  time: 0.3858  data_time: 0.0254  lr: 0.0018184  max_mem: 8471M
[12/10 02:15:23 d2.utils.events]:  eta: 0:44:54  iter: 2999  total_loss: 5.933  loss_sem_seg: 4.431  loss_center: 0.5569  loss_offset: 1.003  time: 0.3858  data_time: 0.0271  lr: 0.0018138  max_mem: 8471M
[12/10 02:15:30 d2.utils.events]:  eta: 0:44:45  iter: 3019  total_loss: 6.398  loss_sem_seg: 4.559  loss_center: 0.7167  loss_offset: 0.9615  time: 0.3858  data_time: 0.0262  lr: 0.0018091  max_mem: 8471M
[12/10 02:15:38 d2.utils.events]:  eta: 0:44:38  iter: 3039  total_loss: 6.213  loss_sem_seg: 4.612  loss_center: 0.6709  loss_offset: 0.8907  time: 0.3858  data_time: 0.0272  lr: 0.0018044  max_mem: 8471M
[12/10 02:15:46 d2.utils.events]:  eta: 0:44:32  iter: 3059  total_loss: 6.252  loss_sem_seg: 4.578  loss_center: 0.629  loss_offset: 0.9193  time: 0.3858  data_time: 0.0278  lr: 0.0017998  max_mem: 8471M
[12/10 02:15:54 d2.utils.events]:  eta: 0:44:24  iter: 3079  total_loss: 5.742  loss_sem_seg: 4.315  loss_center: 0.4871  loss_offset: 0.9444  time: 0.3858  data_time: 0.0274  lr: 0.0017951  max_mem: 8471M
[12/10 02:16:01 d2.utils.events]:  eta: 0:44:16  iter: 3099  total_loss: 6.212  loss_sem_seg: 4.49  loss_center: 0.644  loss_offset: 1.026  time: 0.3858  data_time: 0.0273  lr: 0.0017904  max_mem: 8471M
[12/10 02:16:09 d2.utils.events]:  eta: 0:44:08  iter: 3119  total_loss: 6.178  loss_sem_seg: 4.671  loss_center: 0.5891  loss_offset: 0.904  time: 0.3858  data_time: 0.0276  lr: 0.0017858  max_mem: 8471M
[12/10 02:16:17 d2.utils.events]:  eta: 0:44:00  iter: 3139  total_loss: 6.241  loss_sem_seg: 4.536  loss_center: 0.688  loss_offset: 1.011  time: 0.3858  data_time: 0.0273  lr: 0.0017811  max_mem: 8471M
[12/10 02:16:24 d2.utils.events]:  eta: 0:43:52  iter: 3159  total_loss: 5.962  loss_sem_seg: 4.488  loss_center: 0.7944  loss_offset: 0.8452  time: 0.3858  data_time: 0.0256  lr: 0.0017764  max_mem: 8471M
[12/10 02:16:32 d2.utils.events]:  eta: 0:43:44  iter: 3179  total_loss: 6.525  loss_sem_seg: 4.666  loss_center: 0.7794  loss_offset: 0.9656  time: 0.3858  data_time: 0.0274  lr: 0.0017718  max_mem: 8471M
[12/10 02:16:40 d2.utils.events]:  eta: 0:43:37  iter: 3199  total_loss: 6.487  loss_sem_seg: 4.699  loss_center: 0.6644  loss_offset: 0.9008  time: 0.3858  data_time: 0.0276  lr: 0.0017671  max_mem: 8471M
[12/10 02:16:48 d2.utils.events]:  eta: 0:43:30  iter: 3219  total_loss: 6.217  loss_sem_seg: 4.495  loss_center: 0.7546  loss_offset: 0.9773  time: 0.3858  data_time: 0.0276  lr: 0.0017624  max_mem: 8471M
[12/10 02:16:55 d2.utils.events]:  eta: 0:43:22  iter: 3239  total_loss: 6.104  loss_sem_seg: 4.537  loss_center: 0.6573  loss_offset: 0.9079  time: 0.3858  data_time: 0.0269  lr: 0.0017577  max_mem: 8471M
[12/10 02:17:03 d2.utils.events]:  eta: 0:43:14  iter: 3259  total_loss: 6.144  loss_sem_seg: 4.553  loss_center: 0.6563  loss_offset: 0.927  time: 0.3858  data_time: 0.0257  lr: 0.001753  max_mem: 8471M
[12/10 02:17:11 d2.utils.events]:  eta: 0:43:06  iter: 3279  total_loss: 5.874  loss_sem_seg: 4.352  loss_center: 0.6242  loss_offset: 0.9395  time: 0.3858  data_time: 0.0282  lr: 0.0017484  max_mem: 8471M
[12/10 02:17:19 d2.utils.events]:  eta: 0:42:59  iter: 3299  total_loss: 6.11  loss_sem_seg: 4.66  loss_center: 0.6672  loss_offset: 0.9477  time: 0.3858  data_time: 0.0280  lr: 0.0017437  max_mem: 8471M
[12/10 02:17:26 d2.utils.events]:  eta: 0:42:51  iter: 3319  total_loss: 5.963  loss_sem_seg: 4.405  loss_center: 0.6075  loss_offset: 0.9141  time: 0.3858  data_time: 0.0264  lr: 0.001739  max_mem: 8471M
[12/10 02:17:34 d2.utils.events]:  eta: 0:42:43  iter: 3339  total_loss: 6.14  loss_sem_seg: 4.537  loss_center: 0.766  loss_offset: 0.8205  time: 0.3858  data_time: 0.0274  lr: 0.0017343  max_mem: 8471M
[12/10 02:17:42 d2.utils.events]:  eta: 0:42:35  iter: 3359  total_loss: 6.277  loss_sem_seg: 4.472  loss_center: 0.6442  loss_offset: 1.042  time: 0.3858  data_time: 0.0282  lr: 0.0017296  max_mem: 8471M
[12/10 02:17:49 d2.utils.events]:  eta: 0:42:28  iter: 3379  total_loss: 6.323  loss_sem_seg: 4.664  loss_center: 0.5261  loss_offset: 1.092  time: 0.3858  data_time: 0.0280  lr: 0.0017249  max_mem: 8471M
[12/10 02:17:57 d2.utils.events]:  eta: 0:42:20  iter: 3399  total_loss: 6.362  loss_sem_seg: 4.639  loss_center: 0.6835  loss_offset: 0.9706  time: 0.3858  data_time: 0.0275  lr: 0.0017202  max_mem: 8471M
[12/10 02:18:05 d2.utils.events]:  eta: 0:42:11  iter: 3419  total_loss: 6.112  loss_sem_seg: 4.498  loss_center: 0.7244  loss_offset: 0.8876  time: 0.3858  data_time: 0.0270  lr: 0.0017155  max_mem: 8471M
[12/10 02:18:13 d2.utils.events]:  eta: 0:42:03  iter: 3439  total_loss: 6.379  loss_sem_seg: 4.54  loss_center: 0.6674  loss_offset: 1.022  time: 0.3858  data_time: 0.0276  lr: 0.0017109  max_mem: 8471M
[12/10 02:18:20 d2.utils.events]:  eta: 0:41:55  iter: 3459  total_loss: 6.341  loss_sem_seg: 4.67  loss_center: 0.6127  loss_offset: 0.9549  time: 0.3858  data_time: 0.0273  lr: 0.0017062  max_mem: 8471M
[12/10 02:18:28 d2.utils.events]:  eta: 0:41:48  iter: 3479  total_loss: 6.078  loss_sem_seg: 4.499  loss_center: 0.6555  loss_offset: 0.932  time: 0.3858  data_time: 0.0262  lr: 0.0017015  max_mem: 8471M
[12/10 02:18:36 d2.utils.events]:  eta: 0:41:40  iter: 3499  total_loss: 6.112  loss_sem_seg: 4.443  loss_center: 0.8294  loss_offset: 1.008  time: 0.3858  data_time: 0.0258  lr: 0.0016968  max_mem: 8471M
[12/10 02:18:43 d2.utils.events]:  eta: 0:41:32  iter: 3519  total_loss: 6.328  loss_sem_seg: 4.478  loss_center: 0.5742  loss_offset: 0.9531  time: 0.3858  data_time: 0.0264  lr: 0.0016921  max_mem: 8471M
[12/10 02:18:51 d2.utils.events]:  eta: 0:41:24  iter: 3539  total_loss: 6.095  loss_sem_seg: 4.601  loss_center: 0.538  loss_offset: 1.044  time: 0.3858  data_time: 0.0270  lr: 0.0016874  max_mem: 8471M
[12/10 02:18:59 d2.utils.events]:  eta: 0:41:17  iter: 3559  total_loss: 6.355  loss_sem_seg: 4.442  loss_center: 0.6852  loss_offset: 0.9364  time: 0.3858  data_time: 0.0275  lr: 0.0016827  max_mem: 8471M
[12/10 02:19:07 d2.utils.events]:  eta: 0:41:09  iter: 3579  total_loss: 6.179  loss_sem_seg: 4.518  loss_center: 0.6307  loss_offset: 1.04  time: 0.3858  data_time: 0.0262  lr: 0.001678  max_mem: 8471M
[12/10 02:19:14 d2.utils.events]:  eta: 0:41:01  iter: 3599  total_loss: 6.21  loss_sem_seg: 4.507  loss_center: 0.6162  loss_offset: 0.9799  time: 0.3858  data_time: 0.0290  lr: 0.0016733  max_mem: 8471M
[12/10 02:19:22 d2.utils.events]:  eta: 0:40:54  iter: 3619  total_loss: 6.168  loss_sem_seg: 4.48  loss_center: 0.6793  loss_offset: 0.9712  time: 0.3858  data_time: 0.0271  lr: 0.0016686  max_mem: 8471M
[12/10 02:19:30 d2.utils.events]:  eta: 0:40:46  iter: 3639  total_loss: 5.943  loss_sem_seg: 4.456  loss_center: 0.6395  loss_offset: 0.9518  time: 0.3858  data_time: 0.0257  lr: 0.0016638  max_mem: 8471M
[12/10 02:19:37 d2.utils.events]:  eta: 0:40:38  iter: 3659  total_loss: 5.764  loss_sem_seg: 4.264  loss_center: 0.4825  loss_offset: 0.9694  time: 0.3858  data_time: 0.0264  lr: 0.0016591  max_mem: 8471M
[12/10 02:19:45 d2.utils.events]:  eta: 0:40:30  iter: 3679  total_loss: 6.436  loss_sem_seg: 4.54  loss_center: 0.6484  loss_offset: 1.005  time: 0.3858  data_time: 0.0266  lr: 0.0016544  max_mem: 8471M
[12/10 02:19:53 d2.utils.events]:  eta: 0:40:20  iter: 3699  total_loss: 6.004  loss_sem_seg: 4.502  loss_center: 0.685  loss_offset: 0.9974  time: 0.3858  data_time: 0.0257  lr: 0.0016497  max_mem: 8471M
[12/10 02:20:01 d2.utils.events]:  eta: 0:40:13  iter: 3719  total_loss: 6.254  loss_sem_seg: 4.513  loss_center: 0.6741  loss_offset: 0.8839  time: 0.3858  data_time: 0.0284  lr: 0.001645  max_mem: 8471M
[12/10 02:20:08 d2.utils.events]:  eta: 0:40:05  iter: 3739  total_loss: 6.001  loss_sem_seg: 4.527  loss_center: 0.4821  loss_offset: 0.9958  time: 0.3858  data_time: 0.0275  lr: 0.0016403  max_mem: 8471M
[12/10 02:20:16 d2.utils.events]:  eta: 0:39:57  iter: 3759  total_loss: 5.908  loss_sem_seg: 4.397  loss_center: 0.6768  loss_offset: 0.9624  time: 0.3858  data_time: 0.0269  lr: 0.0016356  max_mem: 8471M
[12/10 02:20:24 d2.utils.events]:  eta: 0:39:48  iter: 3779  total_loss: 6.036  loss_sem_seg: 4.341  loss_center: 0.5506  loss_offset: 0.9977  time: 0.3858  data_time: 0.0281  lr: 0.0016309  max_mem: 8471M
[12/10 02:20:31 d2.utils.events]:  eta: 0:39:41  iter: 3799  total_loss: 5.666  loss_sem_seg: 4.323  loss_center: 0.5809  loss_offset: 0.897  time: 0.3858  data_time: 0.0260  lr: 0.0016261  max_mem: 8471M
[12/10 02:20:39 d2.utils.events]:  eta: 0:39:33  iter: 3819  total_loss: 6.304  loss_sem_seg: 4.557  loss_center: 0.6694  loss_offset: 0.9652  time: 0.3858  data_time: 0.0272  lr: 0.0016214  max_mem: 8471M
[12/10 02:20:47 d2.utils.events]:  eta: 0:39:26  iter: 3839  total_loss: 6.132  loss_sem_seg: 4.427  loss_center: 0.6327  loss_offset: 0.8851  time: 0.3858  data_time: 0.0268  lr: 0.0016167  max_mem: 8471M
[12/10 02:20:55 d2.utils.events]:  eta: 0:39:20  iter: 3859  total_loss: 6.08  loss_sem_seg: 4.512  loss_center: 0.5763  loss_offset: 1.002  time: 0.3858  data_time: 0.0275  lr: 0.001612  max_mem: 8471M
[12/10 02:21:02 d2.utils.events]:  eta: 0:39:13  iter: 3879  total_loss: 6.34  loss_sem_seg: 4.511  loss_center: 0.5991  loss_offset: 1.056  time: 0.3858  data_time: 0.0269  lr: 0.0016072  max_mem: 8471M
[12/10 02:21:10 d2.utils.events]:  eta: 0:39:05  iter: 3899  total_loss: 5.957  loss_sem_seg: 4.437  loss_center: 0.6532  loss_offset: 0.8333  time: 0.3858  data_time: 0.0265  lr: 0.0016025  max_mem: 8471M
[12/10 02:21:18 d2.utils.events]:  eta: 0:38:58  iter: 3919  total_loss: 6.172  loss_sem_seg: 4.519  loss_center: 0.6177  loss_offset: 0.8405  time: 0.3858  data_time: 0.0276  lr: 0.0015978  max_mem: 8471M
[12/10 02:21:25 d2.utils.events]:  eta: 0:38:50  iter: 3939  total_loss: 5.954  loss_sem_seg: 4.325  loss_center: 0.5724  loss_offset: 0.9246  time: 0.3858  data_time: 0.0274  lr: 0.0015931  max_mem: 8471M
[12/10 02:21:33 d2.utils.events]:  eta: 0:38:41  iter: 3959  total_loss: 6.061  loss_sem_seg: 4.395  loss_center: 0.6063  loss_offset: 1.008  time: 0.3857  data_time: 0.0268  lr: 0.0015883  max_mem: 8471M
[12/10 02:21:41 d2.utils.events]:  eta: 0:38:34  iter: 3979  total_loss: 6.046  loss_sem_seg: 4.336  loss_center: 0.6384  loss_offset: 0.9986  time: 0.3857  data_time: 0.0254  lr: 0.0015836  max_mem: 8471M
[12/10 02:21:49 d2.utils.events]:  eta: 0:38:25  iter: 3999  total_loss: 5.939  loss_sem_seg: 4.399  loss_center: 0.7006  loss_offset: 0.9389  time: 0.3857  data_time: 0.0260  lr: 0.0015789  max_mem: 8471M
[12/10 02:21:56 d2.utils.events]:  eta: 0:38:16  iter: 4019  total_loss: 5.961  loss_sem_seg: 4.233  loss_center: 0.6759  loss_offset: 0.8739  time: 0.3857  data_time: 0.0249  lr: 0.0015741  max_mem: 8471M
[12/10 02:22:04 d2.utils.events]:  eta: 0:38:08  iter: 4039  total_loss: 5.955  loss_sem_seg: 4.181  loss_center: 0.6355  loss_offset: 0.8604  time: 0.3857  data_time: 0.0258  lr: 0.0015694  max_mem: 8471M
[12/10 02:22:12 d2.utils.events]:  eta: 0:38:00  iter: 4059  total_loss: 6.199  loss_sem_seg: 4.439  loss_center: 0.8381  loss_offset: 0.879  time: 0.3857  data_time: 0.0263  lr: 0.0015646  max_mem: 8471M
[12/10 02:22:19 d2.utils.events]:  eta: 0:37:51  iter: 4079  total_loss: 5.882  loss_sem_seg: 4.369  loss_center: 0.5595  loss_offset: 0.8709  time: 0.3857  data_time: 0.0261  lr: 0.0015599  max_mem: 8471M
[12/10 02:22:27 d2.utils.events]:  eta: 0:37:42  iter: 4099  total_loss: 5.745  loss_sem_seg: 4.135  loss_center: 0.6018  loss_offset: 0.9151  time: 0.3857  data_time: 0.0271  lr: 0.0015552  max_mem: 8471M
[12/10 02:22:35 d2.utils.events]:  eta: 0:37:35  iter: 4119  total_loss: 6.083  loss_sem_seg: 4.413  loss_center: 0.6879  loss_offset: 0.9623  time: 0.3857  data_time: 0.0265  lr: 0.0015504  max_mem: 8471M
[12/10 02:22:42 d2.utils.events]:  eta: 0:37:27  iter: 4139  total_loss: 5.904  loss_sem_seg: 4.368  loss_center: 0.611  loss_offset: 0.9498  time: 0.3857  data_time: 0.0277  lr: 0.0015457  max_mem: 8471M
[12/10 02:22:50 d2.utils.events]:  eta: 0:37:20  iter: 4159  total_loss: 5.96  loss_sem_seg: 4.328  loss_center: 0.6974  loss_offset: 0.9451  time: 0.3857  data_time: 0.0265  lr: 0.0015409  max_mem: 8471M
[12/10 02:22:58 d2.utils.events]:  eta: 0:37:12  iter: 4179  total_loss: 5.72  loss_sem_seg: 4.302  loss_center: 0.5509  loss_offset: 0.8583  time: 0.3857  data_time: 0.0273  lr: 0.0015362  max_mem: 8471M
[12/10 02:23:06 d2.utils.events]:  eta: 0:37:04  iter: 4199  total_loss: 5.986  loss_sem_seg: 4.561  loss_center: 0.5945  loss_offset: 0.8813  time: 0.3857  data_time: 0.0278  lr: 0.0015314  max_mem: 8471M
[12/10 02:23:13 d2.utils.events]:  eta: 0:36:56  iter: 4219  total_loss: 6.13  loss_sem_seg: 4.449  loss_center: 0.5862  loss_offset: 0.8456  time: 0.3857  data_time: 0.0259  lr: 0.0015267  max_mem: 8471M
[12/10 02:23:21 d2.utils.events]:  eta: 0:36:48  iter: 4239  total_loss: 5.847  loss_sem_seg: 4.356  loss_center: 0.661  loss_offset: 0.8155  time: 0.3856  data_time: 0.0253  lr: 0.0015219  max_mem: 8471M
[12/10 02:23:29 d2.utils.events]:  eta: 0:36:41  iter: 4259  total_loss: 5.977  loss_sem_seg: 4.393  loss_center: 0.5801  loss_offset: 0.932  time: 0.3856  data_time: 0.0263  lr: 0.0015172  max_mem: 8471M
[12/10 02:23:36 d2.utils.events]:  eta: 0:36:34  iter: 4279  total_loss: 6.241  loss_sem_seg: 4.502  loss_center: 0.6618  loss_offset: 0.9416  time: 0.3856  data_time: 0.0270  lr: 0.0015124  max_mem: 8471M
[12/10 02:23:44 d2.utils.events]:  eta: 0:36:26  iter: 4299  total_loss: 5.81  loss_sem_seg: 4.321  loss_center: 0.5497  loss_offset: 0.9354  time: 0.3856  data_time: 0.0260  lr: 0.0015076  max_mem: 8471M
[12/10 02:23:52 d2.utils.events]:  eta: 0:36:19  iter: 4319  total_loss: 6.07  loss_sem_seg: 4.613  loss_center: 0.5715  loss_offset: 1.001  time: 0.3856  data_time: 0.0280  lr: 0.0015029  max_mem: 8471M
[12/10 02:23:59 d2.utils.events]:  eta: 0:36:12  iter: 4339  total_loss: 6.051  loss_sem_seg: 4.379  loss_center: 0.6755  loss_offset: 0.8724  time: 0.3856  data_time: 0.0263  lr: 0.0014981  max_mem: 8471M
[12/10 02:24:07 d2.utils.events]:  eta: 0:36:04  iter: 4359  total_loss: 6.238  loss_sem_seg: 4.461  loss_center: 0.6004  loss_offset: 0.9223  time: 0.3856  data_time: 0.0265  lr: 0.0014933  max_mem: 8471M
[12/10 02:24:15 d2.utils.events]:  eta: 0:35:56  iter: 4379  total_loss: 6.182  loss_sem_seg: 4.397  loss_center: 0.606  loss_offset: 0.9333  time: 0.3856  data_time: 0.0254  lr: 0.0014886  max_mem: 8471M
[12/10 02:24:22 d2.utils.events]:  eta: 0:35:49  iter: 4399  total_loss: 6.005  loss_sem_seg: 4.44  loss_center: 0.5295  loss_offset: 0.971  time: 0.3856  data_time: 0.0278  lr: 0.0014838  max_mem: 8471M
[12/10 02:24:30 d2.utils.events]:  eta: 0:35:41  iter: 4419  total_loss: 6.033  loss_sem_seg: 4.33  loss_center: 0.6021  loss_offset: 0.9558  time: 0.3856  data_time: 0.0264  lr: 0.001479  max_mem: 8471M
[12/10 02:24:38 d2.utils.events]:  eta: 0:35:33  iter: 4439  total_loss: 6.333  loss_sem_seg: 4.389  loss_center: 0.6879  loss_offset: 0.9247  time: 0.3856  data_time: 0.0253  lr: 0.0014743  max_mem: 8471M
[12/10 02:24:46 d2.utils.events]:  eta: 0:35:25  iter: 4459  total_loss: 5.907  loss_sem_seg: 4.551  loss_center: 0.6385  loss_offset: 0.951  time: 0.3856  data_time: 0.0269  lr: 0.0014695  max_mem: 8471M
[12/10 02:24:53 d2.utils.events]:  eta: 0:35:17  iter: 4479  total_loss: 5.849  loss_sem_seg: 4.405  loss_center: 0.5373  loss_offset: 0.9553  time: 0.3856  data_time: 0.0272  lr: 0.0014647  max_mem: 8471M
[12/10 02:25:01 d2.utils.events]:  eta: 0:35:09  iter: 4499  total_loss: 5.925  loss_sem_seg: 4.2  loss_center: 0.6594  loss_offset: 0.938  time: 0.3856  data_time: 0.0251  lr: 0.0014599  max_mem: 8471M
[12/10 02:25:09 d2.utils.events]:  eta: 0:35:01  iter: 4519  total_loss: 6.04  loss_sem_seg: 4.443  loss_center: 0.6304  loss_offset: 0.9699  time: 0.3856  data_time: 0.0264  lr: 0.0014552  max_mem: 8471M
[12/10 02:25:16 d2.utils.events]:  eta: 0:34:54  iter: 4539  total_loss: 6.162  loss_sem_seg: 4.56  loss_center: 0.7213  loss_offset: 0.8954  time: 0.3856  data_time: 0.0270  lr: 0.0014504  max_mem: 8471M
[12/10 02:25:24 d2.utils.events]:  eta: 0:34:46  iter: 4559  total_loss: 5.756  loss_sem_seg: 4.282  loss_center: 0.562  loss_offset: 0.8604  time: 0.3856  data_time: 0.0247  lr: 0.0014456  max_mem: 8471M
[12/10 02:25:32 d2.utils.events]:  eta: 0:34:38  iter: 4579  total_loss: 6.03  loss_sem_seg: 4.383  loss_center: 0.5887  loss_offset: 0.9604  time: 0.3855  data_time: 0.0257  lr: 0.0014408  max_mem: 8471M
[12/10 02:25:39 d2.utils.events]:  eta: 0:34:31  iter: 4599  total_loss: 5.885  loss_sem_seg: 4.405  loss_center: 0.575  loss_offset: 0.9251  time: 0.3855  data_time: 0.0275  lr: 0.001436  max_mem: 8471M
[12/10 02:25:47 d2.utils.events]:  eta: 0:34:24  iter: 4619  total_loss: 5.99  loss_sem_seg: 4.237  loss_center: 0.6367  loss_offset: 0.9262  time: 0.3856  data_time: 0.0284  lr: 0.0014313  max_mem: 8471M
[12/10 02:25:55 d2.utils.events]:  eta: 0:34:16  iter: 4639  total_loss: 6.252  loss_sem_seg: 4.384  loss_center: 0.7134  loss_offset: 0.94  time: 0.3855  data_time: 0.0272  lr: 0.0014265  max_mem: 8471M
[12/10 02:26:03 d2.utils.events]:  eta: 0:34:09  iter: 4659  total_loss: 6.044  loss_sem_seg: 4.321  loss_center: 0.6018  loss_offset: 0.9439  time: 0.3856  data_time: 0.0266  lr: 0.0014217  max_mem: 8471M
[12/10 02:26:10 d2.utils.events]:  eta: 0:34:02  iter: 4679  total_loss: 6.012  loss_sem_seg: 4.272  loss_center: 0.7392  loss_offset: 0.8447  time: 0.3856  data_time: 0.0273  lr: 0.0014169  max_mem: 8471M
[12/10 02:26:18 d2.utils.events]:  eta: 0:33:54  iter: 4699  total_loss: 5.96  loss_sem_seg: 4.418  loss_center: 0.6815  loss_offset: 0.8905  time: 0.3856  data_time: 0.0272  lr: 0.0014121  max_mem: 8471M
[12/10 02:26:26 d2.utils.events]:  eta: 0:33:46  iter: 4719  total_loss: 5.976  loss_sem_seg: 4.437  loss_center: 0.5747  loss_offset: 0.9283  time: 0.3855  data_time: 0.0281  lr: 0.0014073  max_mem: 8471M
[12/10 02:26:33 d2.utils.events]:  eta: 0:33:38  iter: 4739  total_loss: 5.927  loss_sem_seg: 4.433  loss_center: 0.5375  loss_offset: 0.9366  time: 0.3855  data_time: 0.0270  lr: 0.0014025  max_mem: 8471M
[12/10 02:26:41 d2.utils.events]:  eta: 0:33:30  iter: 4759  total_loss: 5.745  loss_sem_seg: 4.282  loss_center: 0.5515  loss_offset: 0.963  time: 0.3855  data_time: 0.0277  lr: 0.0013977  max_mem: 8471M
[12/10 02:26:49 d2.utils.events]:  eta: 0:33:23  iter: 4779  total_loss: 6.016  loss_sem_seg: 4.479  loss_center: 0.636  loss_offset: 0.9225  time: 0.3855  data_time: 0.0263  lr: 0.0013929  max_mem: 8471M
[12/10 02:26:57 d2.utils.events]:  eta: 0:33:15  iter: 4799  total_loss: 5.844  loss_sem_seg: 4.248  loss_center: 0.6802  loss_offset: 0.8207  time: 0.3855  data_time: 0.0260  lr: 0.0013881  max_mem: 8471M
[12/10 02:27:04 d2.utils.events]:  eta: 0:33:07  iter: 4819  total_loss: 5.881  loss_sem_seg: 4.303  loss_center: 0.6372  loss_offset: 0.8518  time: 0.3855  data_time: 0.0266  lr: 0.0013833  max_mem: 8471M
[12/10 02:27:12 d2.utils.events]:  eta: 0:32:59  iter: 4839  total_loss: 6.135  loss_sem_seg: 4.34  loss_center: 0.6264  loss_offset: 0.8803  time: 0.3855  data_time: 0.0280  lr: 0.0013785  max_mem: 8471M
[12/10 02:27:20 d2.utils.events]:  eta: 0:32:51  iter: 4859  total_loss: 5.901  loss_sem_seg: 4.396  loss_center: 0.6094  loss_offset: 0.8699  time: 0.3855  data_time: 0.0276  lr: 0.0013737  max_mem: 8471M
[12/10 02:27:27 d2.utils.events]:  eta: 0:32:43  iter: 4879  total_loss: 5.752  loss_sem_seg: 4.385  loss_center: 0.6445  loss_offset: 0.8515  time: 0.3855  data_time: 0.0285  lr: 0.0013689  max_mem: 8471M
[12/10 02:27:35 d2.utils.events]:  eta: 0:32:36  iter: 4899  total_loss: 5.791  loss_sem_seg: 4.271  loss_center: 0.5045  loss_offset: 0.8601  time: 0.3855  data_time: 0.0266  lr: 0.001364  max_mem: 8471M
[12/10 02:27:43 d2.utils.events]:  eta: 0:32:28  iter: 4919  total_loss: 5.836  loss_sem_seg: 4.237  loss_center: 0.6027  loss_offset: 0.9418  time: 0.3856  data_time: 0.0289  lr: 0.0013592  max_mem: 8471M
[12/10 02:27:51 d2.utils.events]:  eta: 0:32:20  iter: 4939  total_loss: 5.978  loss_sem_seg: 4.326  loss_center: 0.7658  loss_offset: 0.8617  time: 0.3855  data_time: 0.0256  lr: 0.0013544  max_mem: 8471M
[12/10 02:27:58 d2.utils.events]:  eta: 0:32:13  iter: 4959  total_loss: 6.133  loss_sem_seg: 4.457  loss_center: 0.7441  loss_offset: 0.8887  time: 0.3855  data_time: 0.0261  lr: 0.0013496  max_mem: 8471M
[12/10 02:28:06 d2.utils.events]:  eta: 0:32:05  iter: 4979  total_loss: 5.795  loss_sem_seg: 4.316  loss_center: 0.6428  loss_offset: 0.8508  time: 0.3855  data_time: 0.0263  lr: 0.0013448  max_mem: 8471M
[12/10 02:28:14 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0004999.pth
[12/10 02:28:15 d2.utils.events]:  eta: 0:31:58  iter: 4999  total_loss: 6.243  loss_sem_seg: 4.529  loss_center: 0.632  loss_offset: 1.058  time: 0.3855  data_time: 0.0269  lr: 0.00134  max_mem: 8471M
[12/10 02:28:23 d2.utils.events]:  eta: 0:31:51  iter: 5019  total_loss: 5.879  loss_sem_seg: 4.204  loss_center: 0.5719  loss_offset: 0.988  time: 0.3855  data_time: 0.0260  lr: 0.0013351  max_mem: 8471M
[12/10 02:28:31 d2.utils.events]:  eta: 0:31:44  iter: 5039  total_loss: 5.927  loss_sem_seg: 4.305  loss_center: 0.6152  loss_offset: 0.8882  time: 0.3855  data_time: 0.0266  lr: 0.0013303  max_mem: 8471M
[12/10 02:28:38 d2.utils.events]:  eta: 0:31:36  iter: 5059  total_loss: 5.927  loss_sem_seg: 4.323  loss_center: 0.6526  loss_offset: 0.885  time: 0.3855  data_time: 0.0273  lr: 0.0013255  max_mem: 8471M
[12/10 02:28:46 d2.utils.events]:  eta: 0:31:29  iter: 5079  total_loss: 5.992  loss_sem_seg: 4.398  loss_center: 0.6325  loss_offset: 0.8387  time: 0.3855  data_time: 0.0272  lr: 0.0013207  max_mem: 8471M
[12/10 02:28:54 d2.utils.events]:  eta: 0:31:21  iter: 5099  total_loss: 5.843  loss_sem_seg: 4.233  loss_center: 0.5643  loss_offset: 0.9845  time: 0.3855  data_time: 0.0268  lr: 0.0013158  max_mem: 8471M
[12/10 02:29:01 d2.utils.events]:  eta: 0:31:14  iter: 5119  total_loss: 5.762  loss_sem_seg: 4.261  loss_center: 0.5777  loss_offset: 0.9022  time: 0.3855  data_time: 0.0276  lr: 0.001311  max_mem: 8471M
[12/10 02:29:09 d2.utils.events]:  eta: 0:31:05  iter: 5139  total_loss: 5.78  loss_sem_seg: 4.307  loss_center: 0.5473  loss_offset: 0.8075  time: 0.3855  data_time: 0.0261  lr: 0.0013062  max_mem: 8471M
[12/10 02:29:17 d2.utils.events]:  eta: 0:30:58  iter: 5159  total_loss: 5.889  loss_sem_seg: 4.275  loss_center: 0.6721  loss_offset: 0.8596  time: 0.3855  data_time: 0.0258  lr: 0.0013013  max_mem: 8471M
[12/10 02:29:24 d2.utils.events]:  eta: 0:30:50  iter: 5179  total_loss: 5.797  loss_sem_seg: 4.215  loss_center: 0.6459  loss_offset: 0.8588  time: 0.3855  data_time: 0.0261  lr: 0.0012965  max_mem: 8471M
[12/10 02:29:32 d2.utils.events]:  eta: 0:30:42  iter: 5199  total_loss: 5.773  loss_sem_seg: 4.321  loss_center: 0.6496  loss_offset: 0.9033  time: 0.3855  data_time: 0.0260  lr: 0.0012916  max_mem: 8471M
[12/10 02:29:40 d2.utils.events]:  eta: 0:30:34  iter: 5219  total_loss: 6.01  loss_sem_seg: 4.316  loss_center: 0.6271  loss_offset: 0.8752  time: 0.3855  data_time: 0.0247  lr: 0.0012868  max_mem: 8471M
[12/10 02:29:47 d2.utils.events]:  eta: 0:30:26  iter: 5239  total_loss: 5.924  loss_sem_seg: 4.368  loss_center: 0.6366  loss_offset: 0.8938  time: 0.3855  data_time: 0.0263  lr: 0.0012819  max_mem: 8471M
[12/10 02:29:55 d2.utils.events]:  eta: 0:30:19  iter: 5259  total_loss: 5.985  loss_sem_seg: 4.348  loss_center: 0.54  loss_offset: 0.9892  time: 0.3855  data_time: 0.0271  lr: 0.0012771  max_mem: 8471M
[12/10 02:30:03 d2.utils.events]:  eta: 0:30:11  iter: 5279  total_loss: 6.198  loss_sem_seg: 4.549  loss_center: 0.8196  loss_offset: 0.9569  time: 0.3855  data_time: 0.0270  lr: 0.0012722  max_mem: 8471M
[12/10 02:30:11 d2.utils.events]:  eta: 0:30:04  iter: 5299  total_loss: 5.749  loss_sem_seg: 4.073  loss_center: 0.5897  loss_offset: 0.9819  time: 0.3855  data_time: 0.0265  lr: 0.0012674  max_mem: 8471M
[12/10 02:30:18 d2.utils.events]:  eta: 0:29:56  iter: 5319  total_loss: 5.819  loss_sem_seg: 4.335  loss_center: 0.5838  loss_offset: 0.8376  time: 0.3855  data_time: 0.0261  lr: 0.0012625  max_mem: 8471M
[12/10 02:30:26 d2.utils.events]:  eta: 0:29:48  iter: 5339  total_loss: 6.085  loss_sem_seg: 4.391  loss_center: 0.6035  loss_offset: 0.9189  time: 0.3855  data_time: 0.0261  lr: 0.0012577  max_mem: 8471M
[12/10 02:30:34 d2.utils.events]:  eta: 0:29:40  iter: 5359  total_loss: 5.857  loss_sem_seg: 4.198  loss_center: 0.6516  loss_offset: 0.9283  time: 0.3855  data_time: 0.0263  lr: 0.0012528  max_mem: 8471M
[12/10 02:30:41 d2.utils.events]:  eta: 0:29:32  iter: 5379  total_loss: 6.099  loss_sem_seg: 4.291  loss_center: 0.6342  loss_offset: 0.9288  time: 0.3855  data_time: 0.0266  lr: 0.001248  max_mem: 8471M
[12/10 02:30:49 d2.utils.events]:  eta: 0:29:25  iter: 5399  total_loss: 5.749  loss_sem_seg: 4.393  loss_center: 0.6009  loss_offset: 0.7714  time: 0.3855  data_time: 0.0268  lr: 0.0012431  max_mem: 8471M
[12/10 02:30:57 d2.utils.events]:  eta: 0:29:17  iter: 5419  total_loss: 5.847  loss_sem_seg: 4.328  loss_center: 0.6309  loss_offset: 0.8783  time: 0.3855  data_time: 0.0269  lr: 0.0012382  max_mem: 8471M
[12/10 02:31:05 d2.utils.events]:  eta: 0:29:09  iter: 5439  total_loss: 5.764  loss_sem_seg: 4.14  loss_center: 0.4891  loss_offset: 0.9006  time: 0.3855  data_time: 0.0255  lr: 0.0012334  max_mem: 8471M
[12/10 02:31:12 d2.utils.events]:  eta: 0:29:02  iter: 5459  total_loss: 5.997  loss_sem_seg: 4.148  loss_center: 0.8913  loss_offset: 0.8646  time: 0.3855  data_time: 0.0278  lr: 0.0012285  max_mem: 8471M
[12/10 02:31:20 d2.utils.events]:  eta: 0:28:54  iter: 5479  total_loss: 5.899  loss_sem_seg: 4.353  loss_center: 0.6204  loss_offset: 0.8757  time: 0.3855  data_time: 0.0266  lr: 0.0012236  max_mem: 8471M
[12/10 02:31:28 d2.utils.events]:  eta: 0:28:46  iter: 5499  total_loss: 5.976  loss_sem_seg: 4.118  loss_center: 0.7699  loss_offset: 0.8311  time: 0.3855  data_time: 0.0252  lr: 0.0012188  max_mem: 8471M
[12/10 02:31:35 d2.utils.events]:  eta: 0:28:39  iter: 5519  total_loss: 5.537  loss_sem_seg: 4.066  loss_center: 0.5519  loss_offset: 0.8643  time: 0.3855  data_time: 0.0262  lr: 0.0012139  max_mem: 8471M
[12/10 02:31:43 d2.utils.events]:  eta: 0:28:32  iter: 5539  total_loss: 5.7  loss_sem_seg: 4.146  loss_center: 0.6473  loss_offset: 0.7802  time: 0.3855  data_time: 0.0270  lr: 0.001209  max_mem: 8471M
[12/10 02:31:51 d2.utils.events]:  eta: 0:28:24  iter: 5559  total_loss: 5.477  loss_sem_seg: 4.135  loss_center: 0.5786  loss_offset: 0.8496  time: 0.3854  data_time: 0.0254  lr: 0.0012041  max_mem: 8471M
[12/10 02:31:58 d2.utils.events]:  eta: 0:28:16  iter: 5579  total_loss: 5.799  loss_sem_seg: 4.29  loss_center: 0.6972  loss_offset: 0.7962  time: 0.3854  data_time: 0.0278  lr: 0.0011992  max_mem: 8471M
[12/10 02:32:06 d2.utils.events]:  eta: 0:28:08  iter: 5599  total_loss: 5.674  loss_sem_seg: 4.255  loss_center: 0.7141  loss_offset: 0.9143  time: 0.3854  data_time: 0.0272  lr: 0.0011944  max_mem: 8471M
[12/10 02:32:14 d2.utils.events]:  eta: 0:28:00  iter: 5619  total_loss: 5.927  loss_sem_seg: 4.249  loss_center: 0.7829  loss_offset: 0.7849  time: 0.3854  data_time: 0.0257  lr: 0.0011895  max_mem: 8471M
[12/10 02:32:22 d2.utils.events]:  eta: 0:27:53  iter: 5639  total_loss: 6.101  loss_sem_seg: 4.438  loss_center: 0.5845  loss_offset: 1.018  time: 0.3854  data_time: 0.0277  lr: 0.0011846  max_mem: 8471M
[12/10 02:32:29 d2.utils.events]:  eta: 0:27:45  iter: 5659  total_loss: 5.939  loss_sem_seg: 4.357  loss_center: 0.8018  loss_offset: 0.8332  time: 0.3854  data_time: 0.0275  lr: 0.0011797  max_mem: 8471M
[12/10 02:32:37 d2.utils.events]:  eta: 0:27:37  iter: 5679  total_loss: 5.609  loss_sem_seg: 4.13  loss_center: 0.52  loss_offset: 0.9543  time: 0.3854  data_time: 0.0264  lr: 0.0011748  max_mem: 8471M
[12/10 02:32:45 d2.utils.events]:  eta: 0:27:30  iter: 5699  total_loss: 5.928  loss_sem_seg: 4.218  loss_center: 0.7452  loss_offset: 0.8314  time: 0.3854  data_time: 0.0266  lr: 0.0011699  max_mem: 8471M
[12/10 02:32:52 d2.utils.events]:  eta: 0:27:22  iter: 5719  total_loss: 5.986  loss_sem_seg: 4.412  loss_center: 0.5514  loss_offset: 0.8406  time: 0.3854  data_time: 0.0282  lr: 0.001165  max_mem: 8471M
[12/10 02:33:00 d2.utils.events]:  eta: 0:27:15  iter: 5739  total_loss: 6.154  loss_sem_seg: 4.519  loss_center: 0.5802  loss_offset: 0.9793  time: 0.3854  data_time: 0.0279  lr: 0.0011601  max_mem: 8471M
[12/10 02:33:08 d2.utils.events]:  eta: 0:27:07  iter: 5759  total_loss: 5.922  loss_sem_seg: 4.342  loss_center: 0.5519  loss_offset: 0.8825  time: 0.3854  data_time: 0.0252  lr: 0.0011552  max_mem: 8471M
[12/10 02:33:16 d2.utils.events]:  eta: 0:26:59  iter: 5779  total_loss: 5.975  loss_sem_seg: 4.363  loss_center: 0.6825  loss_offset: 0.8644  time: 0.3854  data_time: 0.0270  lr: 0.0011503  max_mem: 8471M
[12/10 02:33:23 d2.utils.events]:  eta: 0:26:52  iter: 5799  total_loss: 6.119  loss_sem_seg: 4.545  loss_center: 0.7058  loss_offset: 0.8261  time: 0.3854  data_time: 0.0270  lr: 0.0011454  max_mem: 8471M
[12/10 02:33:31 d2.utils.events]:  eta: 0:26:44  iter: 5819  total_loss: 5.785  loss_sem_seg: 4.144  loss_center: 0.6025  loss_offset: 0.8876  time: 0.3854  data_time: 0.0263  lr: 0.0011405  max_mem: 8471M
[12/10 02:33:39 d2.utils.events]:  eta: 0:26:36  iter: 5839  total_loss: 5.639  loss_sem_seg: 4.166  loss_center: 0.5847  loss_offset: 0.9345  time: 0.3854  data_time: 0.0262  lr: 0.0011356  max_mem: 8471M
[12/10 02:33:46 d2.utils.events]:  eta: 0:26:29  iter: 5859  total_loss: 5.415  loss_sem_seg: 3.979  loss_center: 0.5515  loss_offset: 0.828  time: 0.3854  data_time: 0.0266  lr: 0.0011307  max_mem: 8471M
[12/10 02:33:54 d2.utils.events]:  eta: 0:26:21  iter: 5879  total_loss: 5.768  loss_sem_seg: 4.192  loss_center: 0.6161  loss_offset: 0.7652  time: 0.3854  data_time: 0.0256  lr: 0.0011258  max_mem: 8471M
[12/10 02:34:02 d2.utils.events]:  eta: 0:26:13  iter: 5899  total_loss: 5.575  loss_sem_seg: 4.036  loss_center: 0.5056  loss_offset: 0.8157  time: 0.3854  data_time: 0.0260  lr: 0.0011208  max_mem: 8471M
[12/10 02:34:10 d2.utils.events]:  eta: 0:26:05  iter: 5919  total_loss: 5.784  loss_sem_seg: 4.392  loss_center: 0.5656  loss_offset: 0.9025  time: 0.3854  data_time: 0.0295  lr: 0.0011159  max_mem: 8471M
[12/10 02:34:17 d2.utils.events]:  eta: 0:25:57  iter: 5939  total_loss: 5.636  loss_sem_seg: 4.291  loss_center: 0.6202  loss_offset: 0.8463  time: 0.3854  data_time: 0.0246  lr: 0.001111  max_mem: 8471M
[12/10 02:34:25 d2.utils.events]:  eta: 0:25:50  iter: 5959  total_loss: 5.673  loss_sem_seg: 4.037  loss_center: 0.5668  loss_offset: 0.9499  time: 0.3854  data_time: 0.0253  lr: 0.0011061  max_mem: 8471M
[12/10 02:34:33 d2.utils.events]:  eta: 0:25:42  iter: 5979  total_loss: 5.611  loss_sem_seg: 4.125  loss_center: 0.6611  loss_offset: 0.9394  time: 0.3854  data_time: 0.0275  lr: 0.0011011  max_mem: 8471M
[12/10 02:34:40 d2.utils.events]:  eta: 0:25:34  iter: 5999  total_loss: 5.461  loss_sem_seg: 4.111  loss_center: 0.571  loss_offset: 0.7752  time: 0.3854  data_time: 0.0258  lr: 0.0010962  max_mem: 8471M
[12/10 02:34:48 d2.utils.events]:  eta: 0:25:26  iter: 6019  total_loss: 5.497  loss_sem_seg: 4.126  loss_center: 0.6332  loss_offset: 0.7686  time: 0.3854  data_time: 0.0268  lr: 0.0010913  max_mem: 8471M
[12/10 02:34:56 d2.utils.events]:  eta: 0:25:18  iter: 6039  total_loss: 5.694  loss_sem_seg: 4.22  loss_center: 0.6185  loss_offset: 0.8574  time: 0.3854  data_time: 0.0262  lr: 0.0010863  max_mem: 8471M
[12/10 02:35:03 d2.utils.events]:  eta: 0:25:11  iter: 6059  total_loss: 6.047  loss_sem_seg: 4.294  loss_center: 0.7646  loss_offset: 0.8103  time: 0.3854  data_time: 0.0270  lr: 0.0010814  max_mem: 8471M
[12/10 02:35:11 d2.utils.events]:  eta: 0:25:03  iter: 6079  total_loss: 5.7  loss_sem_seg: 3.936  loss_center: 0.6783  loss_offset: 0.8324  time: 0.3854  data_time: 0.0268  lr: 0.0010765  max_mem: 8471M
[12/10 02:35:19 d2.utils.events]:  eta: 0:24:55  iter: 6099  total_loss: 5.901  loss_sem_seg: 4.334  loss_center: 0.6459  loss_offset: 0.9539  time: 0.3854  data_time: 0.0291  lr: 0.0010715  max_mem: 8471M
[12/10 02:35:26 d2.utils.events]:  eta: 0:24:47  iter: 6119  total_loss: 5.978  loss_sem_seg: 4.394  loss_center: 0.6785  loss_offset: 0.9344  time: 0.3854  data_time: 0.0258  lr: 0.0010666  max_mem: 8471M
[12/10 02:35:34 d2.utils.events]:  eta: 0:24:39  iter: 6139  total_loss: 5.863  loss_sem_seg: 4.317  loss_center: 0.6971  loss_offset: 0.8554  time: 0.3854  data_time: 0.0269  lr: 0.0010616  max_mem: 8471M
[12/10 02:35:42 d2.utils.events]:  eta: 0:24:32  iter: 6159  total_loss: 5.791  loss_sem_seg: 4.224  loss_center: 0.6007  loss_offset: 0.877  time: 0.3854  data_time: 0.0278  lr: 0.0010567  max_mem: 8471M
[12/10 02:35:49 d2.utils.events]:  eta: 0:24:25  iter: 6179  total_loss: 5.705  loss_sem_seg: 4.24  loss_center: 0.6007  loss_offset: 0.8965  time: 0.3854  data_time: 0.0260  lr: 0.0010517  max_mem: 8471M
[12/10 02:35:57 d2.utils.events]:  eta: 0:24:17  iter: 6199  total_loss: 6.013  loss_sem_seg: 4.268  loss_center: 0.6299  loss_offset: 0.9602  time: 0.3854  data_time: 0.0282  lr: 0.0010468  max_mem: 8471M
[12/10 02:36:05 d2.utils.events]:  eta: 0:24:10  iter: 6219  total_loss: 6.031  loss_sem_seg: 4.279  loss_center: 0.6939  loss_offset: 0.9187  time: 0.3854  data_time: 0.0274  lr: 0.0010418  max_mem: 8471M
[12/10 02:36:13 d2.utils.events]:  eta: 0:24:02  iter: 6239  total_loss: 5.414  loss_sem_seg: 3.968  loss_center: 0.6849  loss_offset: 0.7857  time: 0.3854  data_time: 0.0275  lr: 0.0010368  max_mem: 8471M
[12/10 02:36:20 d2.utils.events]:  eta: 0:23:54  iter: 6259  total_loss: 5.365  loss_sem_seg: 4.065  loss_center: 0.5361  loss_offset: 0.9142  time: 0.3854  data_time: 0.0287  lr: 0.0010319  max_mem: 8471M
[12/10 02:36:28 d2.utils.events]:  eta: 0:23:47  iter: 6279  total_loss: 5.649  loss_sem_seg: 4.158  loss_center: 0.5608  loss_offset: 0.9067  time: 0.3854  data_time: 0.0277  lr: 0.0010269  max_mem: 8471M
[12/10 02:36:36 d2.utils.events]:  eta: 0:23:39  iter: 6299  total_loss: 5.723  loss_sem_seg: 4.239  loss_center: 0.7113  loss_offset: 0.867  time: 0.3854  data_time: 0.0269  lr: 0.0010219  max_mem: 8471M
[12/10 02:36:44 d2.utils.events]:  eta: 0:23:31  iter: 6319  total_loss: 5.667  loss_sem_seg: 4.201  loss_center: 0.5109  loss_offset: 0.79  time: 0.3854  data_time: 0.0279  lr: 0.001017  max_mem: 8471M
[12/10 02:36:51 d2.utils.events]:  eta: 0:23:24  iter: 6339  total_loss: 5.864  loss_sem_seg: 4.258  loss_center: 0.7978  loss_offset: 0.7686  time: 0.3854  data_time: 0.0267  lr: 0.001012  max_mem: 8471M
[12/10 02:36:59 d2.utils.events]:  eta: 0:23:16  iter: 6359  total_loss: 5.797  loss_sem_seg: 4.166  loss_center: 0.7113  loss_offset: 0.9696  time: 0.3854  data_time: 0.0258  lr: 0.001007  max_mem: 8471M
[12/10 02:37:07 d2.utils.events]:  eta: 0:23:09  iter: 6379  total_loss: 5.447  loss_sem_seg: 4.01  loss_center: 0.5448  loss_offset: 0.7781  time: 0.3854  data_time: 0.0257  lr: 0.001002  max_mem: 8471M
[12/10 02:37:14 d2.utils.events]:  eta: 0:23:01  iter: 6399  total_loss: 5.713  loss_sem_seg: 4.147  loss_center: 0.7913  loss_offset: 0.8488  time: 0.3854  data_time: 0.0253  lr: 0.00099706  max_mem: 8471M
[12/10 02:37:22 d2.utils.events]:  eta: 0:22:53  iter: 6419  total_loss: 5.838  loss_sem_seg: 4.162  loss_center: 0.5195  loss_offset: 0.8702  time: 0.3854  data_time: 0.0256  lr: 0.00099207  max_mem: 8471M
[12/10 02:37:30 d2.utils.events]:  eta: 0:22:46  iter: 6439  total_loss: 5.68  loss_sem_seg: 4.22  loss_center: 0.4958  loss_offset: 0.8044  time: 0.3854  data_time: 0.0272  lr: 0.00098709  max_mem: 8471M
[12/10 02:37:38 d2.utils.events]:  eta: 0:22:38  iter: 6459  total_loss: 5.538  loss_sem_seg: 4.027  loss_center: 0.6466  loss_offset: 0.7443  time: 0.3854  data_time: 0.0284  lr: 0.00098209  max_mem: 8471M
[12/10 02:37:45 d2.utils.events]:  eta: 0:22:31  iter: 6479  total_loss: 6.138  loss_sem_seg: 4.278  loss_center: 0.6542  loss_offset: 0.8282  time: 0.3854  data_time: 0.0277  lr: 0.0009771  max_mem: 8471M
[12/10 02:37:53 d2.utils.events]:  eta: 0:22:23  iter: 6499  total_loss: 5.967  loss_sem_seg: 4.312  loss_center: 0.6841  loss_offset: 0.8176  time: 0.3854  data_time: 0.0260  lr: 0.0009721  max_mem: 8471M
[12/10 02:38:01 d2.utils.events]:  eta: 0:22:15  iter: 6519  total_loss: 5.633  loss_sem_seg: 4.052  loss_center: 0.6574  loss_offset: 0.889  time: 0.3854  data_time: 0.0287  lr: 0.00096711  max_mem: 8471M
[12/10 02:38:08 d2.utils.events]:  eta: 0:22:07  iter: 6539  total_loss: 5.708  loss_sem_seg: 4.022  loss_center: 0.7384  loss_offset: 0.8839  time: 0.3854  data_time: 0.0256  lr: 0.0009621  max_mem: 8471M
[12/10 02:38:16 d2.utils.events]:  eta: 0:22:00  iter: 6559  total_loss: 5.869  loss_sem_seg: 4.367  loss_center: 0.5709  loss_offset: 0.9873  time: 0.3854  data_time: 0.0281  lr: 0.0009571  max_mem: 8471M
[12/10 02:38:24 d2.utils.events]:  eta: 0:21:52  iter: 6579  total_loss: 5.95  loss_sem_seg: 4.245  loss_center: 0.646  loss_offset: 0.8927  time: 0.3854  data_time: 0.0266  lr: 0.00095209  max_mem: 8471M
[12/10 02:38:32 d2.utils.events]:  eta: 0:21:45  iter: 6599  total_loss: 5.509  loss_sem_seg: 4.125  loss_center: 0.561  loss_offset: 0.8574  time: 0.3854  data_time: 0.0286  lr: 0.00094708  max_mem: 8471M
[12/10 02:38:39 d2.utils.events]:  eta: 0:21:37  iter: 6619  total_loss: 5.858  loss_sem_seg: 4.282  loss_center: 0.5886  loss_offset: 0.8375  time: 0.3854  data_time: 0.0254  lr: 0.00094206  max_mem: 8471M
[12/10 02:38:47 d2.utils.events]:  eta: 0:21:29  iter: 6639  total_loss: 5.448  loss_sem_seg: 4.012  loss_center: 0.6537  loss_offset: 0.7369  time: 0.3854  data_time: 0.0268  lr: 0.00093705  max_mem: 8471M
[12/10 02:38:55 d2.utils.events]:  eta: 0:21:21  iter: 6659  total_loss: 5.801  loss_sem_seg: 4.157  loss_center: 0.6684  loss_offset: 0.8926  time: 0.3854  data_time: 0.0269  lr: 0.00093203  max_mem: 8471M
[12/10 02:39:02 d2.utils.events]:  eta: 0:21:14  iter: 6679  total_loss: 5.89  loss_sem_seg: 4.263  loss_center: 0.584  loss_offset: 0.7715  time: 0.3854  data_time: 0.0258  lr: 0.000927  max_mem: 8471M
[12/10 02:39:10 d2.utils.events]:  eta: 0:21:06  iter: 6699  total_loss: 5.993  loss_sem_seg: 4.375  loss_center: 0.566  loss_offset: 0.9332  time: 0.3854  data_time: 0.0276  lr: 0.00092198  max_mem: 8471M
[12/10 02:39:18 d2.utils.events]:  eta: 0:20:59  iter: 6719  total_loss: 5.407  loss_sem_seg: 4.064  loss_center: 0.5314  loss_offset: 0.8387  time: 0.3854  data_time: 0.0280  lr: 0.00091695  max_mem: 8471M
[12/10 02:39:26 d2.utils.events]:  eta: 0:20:51  iter: 6739  total_loss: 5.662  loss_sem_seg: 3.989  loss_center: 0.7651  loss_offset: 0.8061  time: 0.3854  data_time: 0.0272  lr: 0.00091192  max_mem: 8471M
[12/10 02:39:33 d2.utils.events]:  eta: 0:20:43  iter: 6759  total_loss: 5.629  loss_sem_seg: 4.175  loss_center: 0.5718  loss_offset: 0.878  time: 0.3854  data_time: 0.0260  lr: 0.00090688  max_mem: 8471M
[12/10 02:39:41 d2.utils.events]:  eta: 0:20:36  iter: 6779  total_loss: 5.503  loss_sem_seg: 4.173  loss_center: 0.6128  loss_offset: 0.8627  time: 0.3854  data_time: 0.0284  lr: 0.00090184  max_mem: 8471M
[12/10 02:39:49 d2.utils.events]:  eta: 0:20:28  iter: 6799  total_loss: 5.751  loss_sem_seg: 4.224  loss_center: 0.6192  loss_offset: 0.8704  time: 0.3854  data_time: 0.0270  lr: 0.0008968  max_mem: 8471M
[12/10 02:39:57 d2.utils.events]:  eta: 0:20:21  iter: 6819  total_loss: 5.478  loss_sem_seg: 4.082  loss_center: 0.5596  loss_offset: 0.8237  time: 0.3854  data_time: 0.0270  lr: 0.00089176  max_mem: 8471M
[12/10 02:40:04 d2.utils.events]:  eta: 0:20:13  iter: 6839  total_loss: 5.693  loss_sem_seg: 4.062  loss_center: 0.5811  loss_offset: 0.8376  time: 0.3854  data_time: 0.0269  lr: 0.00088671  max_mem: 8471M
[12/10 02:40:12 d2.utils.events]:  eta: 0:20:05  iter: 6859  total_loss: 5.939  loss_sem_seg: 4.23  loss_center: 0.6235  loss_offset: 0.9215  time: 0.3854  data_time: 0.0295  lr: 0.00088166  max_mem: 8471M
[12/10 02:40:20 d2.utils.events]:  eta: 0:19:57  iter: 6879  total_loss: 5.857  loss_sem_seg: 4.222  loss_center: 0.5789  loss_offset: 0.8788  time: 0.3854  data_time: 0.0264  lr: 0.00087661  max_mem: 8471M
[12/10 02:40:27 d2.utils.events]:  eta: 0:19:50  iter: 6899  total_loss: 5.623  loss_sem_seg: 4.001  loss_center: 0.6195  loss_offset: 0.8389  time: 0.3854  data_time: 0.0269  lr: 0.00087155  max_mem: 8471M
[12/10 02:40:35 d2.utils.events]:  eta: 0:19:42  iter: 6919  total_loss: 5.54  loss_sem_seg: 4.188  loss_center: 0.6065  loss_offset: 0.7762  time: 0.3854  data_time: 0.0278  lr: 0.00086649  max_mem: 8471M
[12/10 02:40:43 d2.utils.events]:  eta: 0:19:35  iter: 6939  total_loss: 6.083  loss_sem_seg: 4.375  loss_center: 0.7283  loss_offset: 0.8355  time: 0.3854  data_time: 0.0274  lr: 0.00086142  max_mem: 8471M
[12/10 02:40:51 d2.utils.events]:  eta: 0:19:28  iter: 6959  total_loss: 5.675  loss_sem_seg: 4.072  loss_center: 0.6692  loss_offset: 0.8771  time: 0.3854  data_time: 0.0280  lr: 0.00085636  max_mem: 8471M
[12/10 02:40:58 d2.utils.events]:  eta: 0:19:19  iter: 6979  total_loss: 5.438  loss_sem_seg: 3.956  loss_center: 0.5779  loss_offset: 0.7572  time: 0.3854  data_time: 0.0262  lr: 0.00085129  max_mem: 8471M
[12/10 02:41:06 d2.utils.events]:  eta: 0:19:12  iter: 6999  total_loss: 5.368  loss_sem_seg: 3.983  loss_center: 0.5464  loss_offset: 0.886  time: 0.3854  data_time: 0.0271  lr: 0.00084621  max_mem: 8471M
[12/10 02:41:14 d2.utils.events]:  eta: 0:19:04  iter: 7019  total_loss: 5.447  loss_sem_seg: 4.11  loss_center: 0.4796  loss_offset: 0.7556  time: 0.3854  data_time: 0.0273  lr: 0.00084114  max_mem: 8471M
[12/10 02:41:21 d2.utils.events]:  eta: 0:18:57  iter: 7039  total_loss: 5.65  loss_sem_seg: 3.9  loss_center: 0.6905  loss_offset: 0.8794  time: 0.3854  data_time: 0.0259  lr: 0.00083605  max_mem: 8471M
[12/10 02:41:29 d2.utils.events]:  eta: 0:18:50  iter: 7059  total_loss: 5.676  loss_sem_seg: 4.111  loss_center: 0.6056  loss_offset: 0.7708  time: 0.3854  data_time: 0.0260  lr: 0.00083097  max_mem: 8471M
[12/10 02:41:37 d2.utils.events]:  eta: 0:18:41  iter: 7079  total_loss: 5.549  loss_sem_seg: 4.092  loss_center: 0.651  loss_offset: 0.854  time: 0.3854  data_time: 0.0260  lr: 0.00082588  max_mem: 8471M
[12/10 02:41:44 d2.utils.events]:  eta: 0:18:34  iter: 7099  total_loss: 5.481  loss_sem_seg: 3.93  loss_center: 0.6403  loss_offset: 0.7656  time: 0.3854  data_time: 0.0268  lr: 0.00082079  max_mem: 8471M
[12/10 02:41:52 d2.utils.events]:  eta: 0:18:26  iter: 7119  total_loss: 5.535  loss_sem_seg: 4.029  loss_center: 0.7361  loss_offset: 0.8501  time: 0.3854  data_time: 0.0283  lr: 0.0008157  max_mem: 8471M
[12/10 02:42:00 d2.utils.events]:  eta: 0:18:18  iter: 7139  total_loss: 5.908  loss_sem_seg: 4.297  loss_center: 0.7128  loss_offset: 0.8301  time: 0.3854  data_time: 0.0254  lr: 0.0008106  max_mem: 8471M
[12/10 02:42:08 d2.utils.events]:  eta: 0:18:10  iter: 7159  total_loss: 5.487  loss_sem_seg: 4.283  loss_center: 0.5781  loss_offset: 0.7468  time: 0.3854  data_time: 0.0280  lr: 0.0008055  max_mem: 8471M
[12/10 02:42:15 d2.utils.events]:  eta: 0:18:02  iter: 7179  total_loss: 5.392  loss_sem_seg: 4.145  loss_center: 0.5411  loss_offset: 0.9038  time: 0.3854  data_time: 0.0262  lr: 0.00080039  max_mem: 8471M
[12/10 02:42:23 d2.utils.events]:  eta: 0:17:55  iter: 7199  total_loss: 5.643  loss_sem_seg: 4.448  loss_center: 0.5871  loss_offset: 0.8868  time: 0.3854  data_time: 0.0267  lr: 0.00079528  max_mem: 8471M
[12/10 02:42:31 d2.utils.events]:  eta: 0:17:47  iter: 7219  total_loss: 5.324  loss_sem_seg: 4.053  loss_center: 0.6444  loss_offset: 0.8276  time: 0.3854  data_time: 0.0251  lr: 0.00079017  max_mem: 8471M
[12/10 02:42:38 d2.utils.events]:  eta: 0:17:40  iter: 7239  total_loss: 5.819  loss_sem_seg: 4.131  loss_center: 0.6126  loss_offset: 0.8829  time: 0.3854  data_time: 0.0263  lr: 0.00078505  max_mem: 8471M
[12/10 02:42:46 d2.utils.events]:  eta: 0:17:32  iter: 7259  total_loss: 5.665  loss_sem_seg: 4.101  loss_center: 0.7088  loss_offset: 0.8605  time: 0.3854  data_time: 0.0280  lr: 0.00077993  max_mem: 8471M
[12/10 02:42:54 d2.utils.events]:  eta: 0:17:24  iter: 7279  total_loss: 5.551  loss_sem_seg: 4.096  loss_center: 0.6366  loss_offset: 0.8639  time: 0.3854  data_time: 0.0267  lr: 0.00077481  max_mem: 8471M
[12/10 02:43:01 d2.utils.events]:  eta: 0:17:16  iter: 7299  total_loss: 5.242  loss_sem_seg: 3.82  loss_center: 0.5799  loss_offset: 0.6648  time: 0.3853  data_time: 0.0269  lr: 0.00076968  max_mem: 8471M
[12/10 02:43:09 d2.utils.events]:  eta: 0:17:09  iter: 7319  total_loss: 5.493  loss_sem_seg: 3.897  loss_center: 0.7176  loss_offset: 0.7773  time: 0.3853  data_time: 0.0270  lr: 0.00076455  max_mem: 8471M
[12/10 02:43:17 d2.utils.events]:  eta: 0:17:01  iter: 7339  total_loss: 5.763  loss_sem_seg: 4.255  loss_center: 0.6386  loss_offset: 0.7907  time: 0.3853  data_time: 0.0276  lr: 0.00075942  max_mem: 8471M
[12/10 02:43:25 d2.utils.events]:  eta: 0:16:53  iter: 7359  total_loss: 6.184  loss_sem_seg: 4.391  loss_center: 0.7265  loss_offset: 0.8725  time: 0.3853  data_time: 0.0276  lr: 0.00075428  max_mem: 8471M
[12/10 02:43:32 d2.utils.events]:  eta: 0:16:45  iter: 7379  total_loss: 5.426  loss_sem_seg: 4.282  loss_center: 0.5415  loss_offset: 0.7956  time: 0.3853  data_time: 0.0245  lr: 0.00074914  max_mem: 8471M
[12/10 02:43:40 d2.utils.events]:  eta: 0:16:37  iter: 7399  total_loss: 5.674  loss_sem_seg: 4.273  loss_center: 0.6267  loss_offset: 0.8191  time: 0.3853  data_time: 0.0272  lr: 0.00074399  max_mem: 8471M
[12/10 02:43:48 d2.utils.events]:  eta: 0:16:30  iter: 7419  total_loss: 5.753  loss_sem_seg: 4.213  loss_center: 0.6399  loss_offset: 0.8437  time: 0.3853  data_time: 0.0265  lr: 0.00073884  max_mem: 8471M
[12/10 02:43:55 d2.utils.events]:  eta: 0:16:22  iter: 7439  total_loss: 5.679  loss_sem_seg: 3.964  loss_center: 0.7615  loss_offset: 0.8967  time: 0.3853  data_time: 0.0271  lr: 0.00073368  max_mem: 8471M
[12/10 02:44:03 d2.utils.events]:  eta: 0:16:15  iter: 7459  total_loss: 5.548  loss_sem_seg: 4.102  loss_center: 0.5977  loss_offset: 0.8823  time: 0.3853  data_time: 0.0265  lr: 0.00072852  max_mem: 8471M
[12/10 02:44:11 d2.utils.events]:  eta: 0:16:07  iter: 7479  total_loss: 5.367  loss_sem_seg: 3.934  loss_center: 0.652  loss_offset: 0.7605  time: 0.3853  data_time: 0.0248  lr: 0.00072336  max_mem: 8471M
[12/10 02:44:18 d2.utils.events]:  eta: 0:15:59  iter: 7499  total_loss: 6.051  loss_sem_seg: 4.264  loss_center: 0.7273  loss_offset: 0.9338  time: 0.3853  data_time: 0.0262  lr: 0.00071819  max_mem: 8471M
[12/10 02:44:26 d2.utils.events]:  eta: 0:15:51  iter: 7519  total_loss: 5.457  loss_sem_seg: 4.062  loss_center: 0.5838  loss_offset: 0.79  time: 0.3853  data_time: 0.0250  lr: 0.00071302  max_mem: 8471M
[12/10 02:44:34 d2.utils.events]:  eta: 0:15:43  iter: 7539  total_loss: 5.722  loss_sem_seg: 4.17  loss_center: 0.5756  loss_offset: 0.8192  time: 0.3853  data_time: 0.0254  lr: 0.00070785  max_mem: 8471M
[12/10 02:44:41 d2.utils.events]:  eta: 0:15:36  iter: 7559  total_loss: 5.723  loss_sem_seg: 4.255  loss_center: 0.7025  loss_offset: 0.8448  time: 0.3853  data_time: 0.0248  lr: 0.00070267  max_mem: 8471M
[12/10 02:44:49 d2.utils.events]:  eta: 0:15:28  iter: 7579  total_loss: 5.759  loss_sem_seg: 4.163  loss_center: 0.562  loss_offset: 0.9113  time: 0.3853  data_time: 0.0265  lr: 0.00069749  max_mem: 8471M
[12/10 02:44:57 d2.utils.events]:  eta: 0:15:20  iter: 7599  total_loss: 5.375  loss_sem_seg: 4.081  loss_center: 0.5203  loss_offset: 0.828  time: 0.3853  data_time: 0.0267  lr: 0.0006923  max_mem: 8471M
[12/10 02:45:04 d2.utils.events]:  eta: 0:15:13  iter: 7619  total_loss: 5.435  loss_sem_seg: 4.045  loss_center: 0.5139  loss_offset: 0.7905  time: 0.3853  data_time: 0.0269  lr: 0.00068711  max_mem: 8471M
[12/10 02:45:12 d2.utils.events]:  eta: 0:15:05  iter: 7639  total_loss: 5.698  loss_sem_seg: 4.197  loss_center: 0.6194  loss_offset: 0.8366  time: 0.3853  data_time: 0.0264  lr: 0.00068191  max_mem: 8471M
[12/10 02:45:20 d2.utils.events]:  eta: 0:14:57  iter: 7659  total_loss: 5.282  loss_sem_seg: 4.029  loss_center: 0.572  loss_offset: 0.7448  time: 0.3853  data_time: 0.0275  lr: 0.00067671  max_mem: 8471M
[12/10 02:45:27 d2.utils.events]:  eta: 0:14:50  iter: 7679  total_loss: 5.481  loss_sem_seg: 4.026  loss_center: 0.6071  loss_offset: 0.9067  time: 0.3853  data_time: 0.0263  lr: 0.0006715  max_mem: 8471M
[12/10 02:45:35 d2.utils.events]:  eta: 0:14:42  iter: 7699  total_loss: 5.622  loss_sem_seg: 4.19  loss_center: 0.5504  loss_offset: 0.8681  time: 0.3853  data_time: 0.0258  lr: 0.00066629  max_mem: 8471M
[12/10 02:45:43 d2.utils.events]:  eta: 0:14:34  iter: 7719  total_loss: 5.833  loss_sem_seg: 4.108  loss_center: 0.5568  loss_offset: 0.704  time: 0.3853  data_time: 0.0264  lr: 0.00066108  max_mem: 8471M
[12/10 02:45:51 d2.utils.events]:  eta: 0:14:26  iter: 7739  total_loss: 5.658  loss_sem_seg: 4.048  loss_center: 0.6954  loss_offset: 0.7808  time: 0.3853  data_time: 0.0264  lr: 0.00065586  max_mem: 8471M
[12/10 02:45:58 d2.utils.events]:  eta: 0:14:18  iter: 7759  total_loss: 5.592  loss_sem_seg: 4.046  loss_center: 0.5626  loss_offset: 0.8641  time: 0.3853  data_time: 0.0269  lr: 0.00065064  max_mem: 8471M
[12/10 02:46:06 d2.utils.events]:  eta: 0:14:11  iter: 7779  total_loss: 5.589  loss_sem_seg: 4.062  loss_center: 0.5484  loss_offset: 0.8073  time: 0.3853  data_time: 0.0277  lr: 0.00064541  max_mem: 8471M
[12/10 02:46:14 d2.utils.events]:  eta: 0:14:03  iter: 7799  total_loss: 5.807  loss_sem_seg: 4.074  loss_center: 0.6463  loss_offset: 0.8613  time: 0.3853  data_time: 0.0269  lr: 0.00064017  max_mem: 8471M
[12/10 02:46:21 d2.utils.events]:  eta: 0:13:55  iter: 7819  total_loss: 5.506  loss_sem_seg: 3.954  loss_center: 0.6007  loss_offset: 0.9107  time: 0.3853  data_time: 0.0268  lr: 0.00063494  max_mem: 8471M
[12/10 02:46:29 d2.utils.events]:  eta: 0:13:48  iter: 7839  total_loss: 5.487  loss_sem_seg: 3.962  loss_center: 0.5175  loss_offset: 0.8436  time: 0.3853  data_time: 0.0266  lr: 0.00062969  max_mem: 8471M
[12/10 02:46:37 d2.utils.events]:  eta: 0:13:40  iter: 7859  total_loss: 5.446  loss_sem_seg: 4.028  loss_center: 0.6711  loss_offset: 0.7998  time: 0.3853  data_time: 0.0256  lr: 0.00062445  max_mem: 8471M
[12/10 02:46:44 d2.utils.events]:  eta: 0:13:32  iter: 7879  total_loss: 5.37  loss_sem_seg: 3.959  loss_center: 0.5828  loss_offset: 0.7621  time: 0.3853  data_time: 0.0275  lr: 0.00061919  max_mem: 8471M
[12/10 02:46:52 d2.utils.events]:  eta: 0:13:25  iter: 7899  total_loss: 5.639  loss_sem_seg: 4.208  loss_center: 0.6132  loss_offset: 0.7851  time: 0.3852  data_time: 0.0269  lr: 0.00061394  max_mem: 8471M
[12/10 02:47:00 d2.utils.events]:  eta: 0:13:17  iter: 7919  total_loss: 5.599  loss_sem_seg: 4.172  loss_center: 0.7168  loss_offset: 0.7085  time: 0.3852  data_time: 0.0249  lr: 0.00060867  max_mem: 8471M
[12/10 02:47:07 d2.utils.events]:  eta: 0:13:09  iter: 7939  total_loss: 5.49  loss_sem_seg: 3.867  loss_center: 0.5866  loss_offset: 0.9054  time: 0.3852  data_time: 0.0262  lr: 0.00060341  max_mem: 8471M
[12/10 02:47:15 d2.utils.events]:  eta: 0:13:01  iter: 7959  total_loss: 5.456  loss_sem_seg: 4.05  loss_center: 0.5499  loss_offset: 0.8173  time: 0.3852  data_time: 0.0253  lr: 0.00059813  max_mem: 8471M
[12/10 02:47:23 d2.utils.events]:  eta: 0:12:54  iter: 7979  total_loss: 5.433  loss_sem_seg: 4.045  loss_center: 0.5057  loss_offset: 0.8776  time: 0.3852  data_time: 0.0266  lr: 0.00059286  max_mem: 8471M
[12/10 02:47:30 d2.utils.events]:  eta: 0:12:46  iter: 7999  total_loss: 5.53  loss_sem_seg: 4.085  loss_center: 0.5458  loss_offset: 0.8274  time: 0.3852  data_time: 0.0258  lr: 0.00058757  max_mem: 8471M
[12/10 02:47:38 d2.utils.events]:  eta: 0:12:38  iter: 8019  total_loss: 6.05  loss_sem_seg: 4.242  loss_center: 0.5912  loss_offset: 0.8161  time: 0.3852  data_time: 0.0263  lr: 0.00058229  max_mem: 8471M
[12/10 02:47:46 d2.utils.events]:  eta: 0:12:30  iter: 8039  total_loss: 5.115  loss_sem_seg: 3.94  loss_center: 0.6322  loss_offset: 0.7771  time: 0.3852  data_time: 0.0271  lr: 0.00057699  max_mem: 8471M
[12/10 02:47:53 d2.utils.events]:  eta: 0:12:22  iter: 8059  total_loss: 5.478  loss_sem_seg: 4.089  loss_center: 0.542  loss_offset: 0.8352  time: 0.3852  data_time: 0.0274  lr: 0.00057169  max_mem: 8471M
[12/10 02:48:01 d2.utils.events]:  eta: 0:12:15  iter: 8079  total_loss: 5.36  loss_sem_seg: 3.778  loss_center: 0.7702  loss_offset: 0.8175  time: 0.3852  data_time: 0.0265  lr: 0.00056639  max_mem: 8471M
[12/10 02:48:09 d2.utils.events]:  eta: 0:12:07  iter: 8099  total_loss: 5.622  loss_sem_seg: 3.998  loss_center: 0.6214  loss_offset: 0.8667  time: 0.3852  data_time: 0.0262  lr: 0.00056108  max_mem: 8471M
[12/10 02:48:16 d2.utils.events]:  eta: 0:11:59  iter: 8119  total_loss: 5.469  loss_sem_seg: 4.068  loss_center: 0.5552  loss_offset: 0.9004  time: 0.3852  data_time: 0.0271  lr: 0.00055576  max_mem: 8471M
[12/10 02:48:24 d2.utils.events]:  eta: 0:11:52  iter: 8139  total_loss: 5.605  loss_sem_seg: 4.1  loss_center: 0.6225  loss_offset: 0.8672  time: 0.3852  data_time: 0.0261  lr: 0.00055044  max_mem: 8471M
[12/10 02:48:32 d2.utils.events]:  eta: 0:11:44  iter: 8159  total_loss: 5.492  loss_sem_seg: 4.125  loss_center: 0.5955  loss_offset: 0.7936  time: 0.3852  data_time: 0.0255  lr: 0.00054512  max_mem: 8471M
[12/10 02:48:39 d2.utils.events]:  eta: 0:11:37  iter: 8179  total_loss: 5.465  loss_sem_seg: 3.969  loss_center: 0.755  loss_offset: 0.847  time: 0.3852  data_time: 0.0254  lr: 0.00053978  max_mem: 8471M
[12/10 02:48:47 d2.utils.events]:  eta: 0:11:29  iter: 8199  total_loss: 5.632  loss_sem_seg: 4.136  loss_center: 0.6382  loss_offset: 0.7166  time: 0.3852  data_time: 0.0264  lr: 0.00053444  max_mem: 8471M
[12/10 02:48:55 d2.utils.events]:  eta: 0:11:21  iter: 8219  total_loss: 5.321  loss_sem_seg: 4.023  loss_center: 0.461  loss_offset: 0.8581  time: 0.3852  data_time: 0.0265  lr: 0.0005291  max_mem: 8471M
[12/10 02:49:02 d2.utils.events]:  eta: 0:11:14  iter: 8239  total_loss: 5.419  loss_sem_seg: 3.801  loss_center: 0.7132  loss_offset: 0.7353  time: 0.3852  data_time: 0.0245  lr: 0.00052375  max_mem: 8471M
[12/10 02:49:10 d2.utils.events]:  eta: 0:11:05  iter: 8259  total_loss: 5.623  loss_sem_seg: 3.842  loss_center: 0.5202  loss_offset: 0.9015  time: 0.3851  data_time: 0.0272  lr: 0.00051839  max_mem: 8471M
[12/10 02:49:18 d2.utils.events]:  eta: 0:10:58  iter: 8279  total_loss: 5.332  loss_sem_seg: 3.821  loss_center: 0.5756  loss_offset: 0.7579  time: 0.3851  data_time: 0.0256  lr: 0.00051303  max_mem: 8471M
[12/10 02:49:25 d2.utils.events]:  eta: 0:10:50  iter: 8299  total_loss: 5.364  loss_sem_seg: 3.926  loss_center: 0.6068  loss_offset: 0.7405  time: 0.3851  data_time: 0.0260  lr: 0.00050766  max_mem: 8471M
[12/10 02:49:33 d2.utils.events]:  eta: 0:10:42  iter: 8319  total_loss: 5.832  loss_sem_seg: 4.278  loss_center: 0.6497  loss_offset: 0.8073  time: 0.3851  data_time: 0.0265  lr: 0.00050229  max_mem: 8471M
[12/10 02:49:41 d2.utils.events]:  eta: 0:10:35  iter: 8339  total_loss: 5.409  loss_sem_seg: 4.018  loss_center: 0.4899  loss_offset: 0.7461  time: 0.3851  data_time: 0.0263  lr: 0.0004969  max_mem: 8471M
[12/10 02:49:48 d2.utils.events]:  eta: 0:10:27  iter: 8359  total_loss: 5.232  loss_sem_seg: 3.744  loss_center: 0.5613  loss_offset: 0.8004  time: 0.3851  data_time: 0.0258  lr: 0.00049152  max_mem: 8471M
[12/10 02:49:56 d2.utils.events]:  eta: 0:10:19  iter: 8379  total_loss: 5.293  loss_sem_seg: 3.826  loss_center: 0.5099  loss_offset: 0.772  time: 0.3851  data_time: 0.0270  lr: 0.00048612  max_mem: 8471M
[12/10 02:50:04 d2.utils.events]:  eta: 0:10:12  iter: 8399  total_loss: 5.602  loss_sem_seg: 4.014  loss_center: 0.6069  loss_offset: 0.9098  time: 0.3851  data_time: 0.0261  lr: 0.00048072  max_mem: 8471M
[12/10 02:50:11 d2.utils.events]:  eta: 0:10:04  iter: 8419  total_loss: 5.605  loss_sem_seg: 4.173  loss_center: 0.5633  loss_offset: 0.8054  time: 0.3851  data_time: 0.0252  lr: 0.00047531  max_mem: 8471M
[12/10 02:50:19 d2.utils.events]:  eta: 0:09:57  iter: 8439  total_loss: 5.64  loss_sem_seg: 4.136  loss_center: 0.6746  loss_offset: 0.7794  time: 0.3851  data_time: 0.0257  lr: 0.0004699  max_mem: 8471M
[12/10 02:50:27 d2.utils.events]:  eta: 0:09:49  iter: 8459  total_loss: 5.529  loss_sem_seg: 4.027  loss_center: 0.6325  loss_offset: 0.738  time: 0.3851  data_time: 0.0274  lr: 0.00046448  max_mem: 8471M
[12/10 02:50:35 d2.utils.events]:  eta: 0:09:42  iter: 8479  total_loss: 5.232  loss_sem_seg: 3.89  loss_center: 0.5478  loss_offset: 0.7692  time: 0.3851  data_time: 0.0271  lr: 0.00045905  max_mem: 8471M
[12/10 02:50:42 d2.utils.events]:  eta: 0:09:34  iter: 8499  total_loss: 5.562  loss_sem_seg: 4.159  loss_center: 0.61  loss_offset: 0.7872  time: 0.3851  data_time: 0.0257  lr: 0.00045361  max_mem: 8471M
[12/10 02:50:50 d2.utils.events]:  eta: 0:09:26  iter: 8519  total_loss: 5.599  loss_sem_seg: 3.955  loss_center: 0.6424  loss_offset: 0.8444  time: 0.3851  data_time: 0.0274  lr: 0.00044817  max_mem: 8471M
[12/10 02:50:58 d2.utils.events]:  eta: 0:09:19  iter: 8539  total_loss: 5.528  loss_sem_seg: 3.872  loss_center: 0.7914  loss_offset: 0.7136  time: 0.3851  data_time: 0.0248  lr: 0.00044272  max_mem: 8471M
[12/10 02:51:05 d2.utils.events]:  eta: 0:09:11  iter: 8559  total_loss: 5.565  loss_sem_seg: 3.999  loss_center: 0.639  loss_offset: 0.7975  time: 0.3851  data_time: 0.0257  lr: 0.00043726  max_mem: 8471M
[12/10 02:51:13 d2.utils.events]:  eta: 0:09:03  iter: 8579  total_loss: 5.396  loss_sem_seg: 3.941  loss_center: 0.5824  loss_offset: 0.7509  time: 0.3851  data_time: 0.0266  lr: 0.00043179  max_mem: 8471M
[12/10 02:51:21 d2.utils.events]:  eta: 0:08:56  iter: 8599  total_loss: 5.168  loss_sem_seg: 3.851  loss_center: 0.5404  loss_offset: 0.7497  time: 0.3851  data_time: 0.0275  lr: 0.00042632  max_mem: 8471M
[12/10 02:51:28 d2.utils.events]:  eta: 0:08:48  iter: 8619  total_loss: 5.39  loss_sem_seg: 3.965  loss_center: 0.5754  loss_offset: 0.8998  time: 0.3851  data_time: 0.0256  lr: 0.00042084  max_mem: 8471M
[12/10 02:51:36 d2.utils.events]:  eta: 0:08:40  iter: 8639  total_loss: 5.324  loss_sem_seg: 3.784  loss_center: 0.5979  loss_offset: 0.7241  time: 0.3851  data_time: 0.0251  lr: 0.00041535  max_mem: 8471M
[12/10 02:51:44 d2.utils.events]:  eta: 0:08:33  iter: 8659  total_loss: 5.487  loss_sem_seg: 3.945  loss_center: 0.4572  loss_offset: 0.8823  time: 0.3851  data_time: 0.0252  lr: 0.00040985  max_mem: 8471M
[12/10 02:51:51 d2.utils.events]:  eta: 0:08:25  iter: 8679  total_loss: 5.131  loss_sem_seg: 3.875  loss_center: 0.5817  loss_offset: 0.6787  time: 0.3851  data_time: 0.0254  lr: 0.00040435  max_mem: 8471M
[12/10 02:51:59 d2.utils.events]:  eta: 0:08:17  iter: 8699  total_loss: 5.699  loss_sem_seg: 3.969  loss_center: 0.5835  loss_offset: 0.8579  time: 0.3851  data_time: 0.0267  lr: 0.00039883  max_mem: 8471M
[12/10 02:52:07 d2.utils.events]:  eta: 0:08:10  iter: 8719  total_loss: 5.86  loss_sem_seg: 4.272  loss_center: 0.6779  loss_offset: 0.8079  time: 0.3851  data_time: 0.0265  lr: 0.00039331  max_mem: 8471M
[12/10 02:52:14 d2.utils.events]:  eta: 0:08:02  iter: 8739  total_loss: 5.495  loss_sem_seg: 4.05  loss_center: 0.5695  loss_offset: 0.9211  time: 0.3851  data_time: 0.0265  lr: 0.00038778  max_mem: 8471M
[12/10 02:52:22 d2.utils.events]:  eta: 0:07:54  iter: 8759  total_loss: 5.327  loss_sem_seg: 4.007  loss_center: 0.606  loss_offset: 0.8034  time: 0.3851  data_time: 0.0245  lr: 0.00038224  max_mem: 8471M
[12/10 02:52:30 d2.utils.events]:  eta: 0:07:46  iter: 8779  total_loss: 5.5  loss_sem_seg: 4.095  loss_center: 0.728  loss_offset: 0.6767  time: 0.3851  data_time: 0.0268  lr: 0.00037669  max_mem: 8471M
[12/10 02:52:37 d2.utils.events]:  eta: 0:07:39  iter: 8799  total_loss: 5.539  loss_sem_seg: 3.965  loss_center: 0.6547  loss_offset: 0.6831  time: 0.3851  data_time: 0.0266  lr: 0.00037113  max_mem: 8471M
[12/10 02:52:45 d2.utils.events]:  eta: 0:07:31  iter: 8819  total_loss: 5.304  loss_sem_seg: 3.907  loss_center: 0.6047  loss_offset: 0.8798  time: 0.3851  data_time: 0.0272  lr: 0.00036557  max_mem: 8471M
[12/10 02:52:53 d2.utils.events]:  eta: 0:07:23  iter: 8839  total_loss: 5.617  loss_sem_seg: 4.012  loss_center: 0.6081  loss_offset: 0.8384  time: 0.3850  data_time: 0.0259  lr: 0.00035999  max_mem: 8471M
[12/10 02:53:00 d2.utils.events]:  eta: 0:07:16  iter: 8859  total_loss: 5.161  loss_sem_seg: 3.851  loss_center: 0.6606  loss_offset: 0.7271  time: 0.3850  data_time: 0.0254  lr: 0.0003544  max_mem: 8471M
[12/10 02:53:08 d2.utils.events]:  eta: 0:07:08  iter: 8879  total_loss: 5.794  loss_sem_seg: 4.199  loss_center: 0.6743  loss_offset: 0.798  time: 0.3850  data_time: 0.0265  lr: 0.00034881  max_mem: 8471M
[12/10 02:53:16 d2.utils.events]:  eta: 0:07:00  iter: 8899  total_loss: 5.496  loss_sem_seg: 3.992  loss_center: 0.5696  loss_offset: 0.7445  time: 0.3850  data_time: 0.0266  lr: 0.0003432  max_mem: 8471M
[12/10 02:53:24 d2.utils.events]:  eta: 0:06:53  iter: 8919  total_loss: 5.406  loss_sem_seg: 3.833  loss_center: 0.6102  loss_offset: 0.7066  time: 0.3850  data_time: 0.0284  lr: 0.00033758  max_mem: 8471M
[12/10 02:53:31 d2.utils.events]:  eta: 0:06:45  iter: 8939  total_loss: 5.835  loss_sem_seg: 4.081  loss_center: 0.6936  loss_offset: 0.898  time: 0.3850  data_time: 0.0264  lr: 0.00033196  max_mem: 8471M
[12/10 02:53:39 d2.utils.events]:  eta: 0:06:38  iter: 8959  total_loss: 5.411  loss_sem_seg: 3.937  loss_center: 0.5991  loss_offset: 0.717  time: 0.3850  data_time: 0.0260  lr: 0.00032632  max_mem: 8471M
[12/10 02:53:47 d2.utils.events]:  eta: 0:06:30  iter: 8979  total_loss: 5.112  loss_sem_seg: 3.817  loss_center: 0.4638  loss_offset: 0.6636  time: 0.3850  data_time: 0.0283  lr: 0.00032067  max_mem: 8471M
[12/10 02:53:54 d2.utils.events]:  eta: 0:06:22  iter: 8999  total_loss: 5.402  loss_sem_seg: 4.048  loss_center: 0.6289  loss_offset: 0.8523  time: 0.3850  data_time: 0.0259  lr: 0.00031501  max_mem: 8471M
[12/10 02:54:02 d2.utils.events]:  eta: 0:06:15  iter: 9019  total_loss: 5.714  loss_sem_seg: 4.232  loss_center: 0.6425  loss_offset: 0.741  time: 0.3850  data_time: 0.0264  lr: 0.00030934  max_mem: 8471M
[12/10 02:54:10 d2.utils.events]:  eta: 0:06:07  iter: 9039  total_loss: 5.401  loss_sem_seg: 3.999  loss_center: 0.6746  loss_offset: 0.7045  time: 0.3850  data_time: 0.0273  lr: 0.00030366  max_mem: 8471M
[12/10 02:54:18 d2.utils.events]:  eta: 0:05:59  iter: 9059  total_loss: 5.487  loss_sem_seg: 3.95  loss_center: 0.5949  loss_offset: 0.9459  time: 0.3850  data_time: 0.0278  lr: 0.00029797  max_mem: 8471M
[12/10 02:54:25 d2.utils.events]:  eta: 0:05:52  iter: 9079  total_loss: 5.462  loss_sem_seg: 3.979  loss_center: 0.7291  loss_offset: 0.7786  time: 0.3850  data_time: 0.0275  lr: 0.00029226  max_mem: 8471M
[12/10 02:54:33 d2.utils.events]:  eta: 0:05:44  iter: 9099  total_loss: 5.307  loss_sem_seg: 3.852  loss_center: 0.564  loss_offset: 0.7018  time: 0.3850  data_time: 0.0267  lr: 0.00028654  max_mem: 8471M
[12/10 02:54:41 d2.utils.events]:  eta: 0:05:37  iter: 9119  total_loss: 5.486  loss_sem_seg: 4.024  loss_center: 0.6167  loss_offset: 0.8435  time: 0.3850  data_time: 0.0263  lr: 0.00028081  max_mem: 8471M
[12/10 02:54:48 d2.utils.events]:  eta: 0:05:29  iter: 9139  total_loss: 5.34  loss_sem_seg: 4.008  loss_center: 0.5492  loss_offset: 0.7014  time: 0.3850  data_time: 0.0281  lr: 0.00027507  max_mem: 8471M
[12/10 02:54:56 d2.utils.events]:  eta: 0:05:22  iter: 9159  total_loss: 5.386  loss_sem_seg: 4.007  loss_center: 0.6652  loss_offset: 0.7416  time: 0.3850  data_time: 0.0262  lr: 0.00026931  max_mem: 8471M
[12/10 02:55:04 d2.utils.events]:  eta: 0:05:14  iter: 9179  total_loss: 5.361  loss_sem_seg: 3.804  loss_center: 0.6068  loss_offset: 0.713  time: 0.3850  data_time: 0.0269  lr: 0.00026354  max_mem: 8471M
[12/10 02:55:12 d2.utils.events]:  eta: 0:05:06  iter: 9199  total_loss: 5.46  loss_sem_seg: 3.925  loss_center: 0.5711  loss_offset: 0.8248  time: 0.3850  data_time: 0.0275  lr: 0.00025776  max_mem: 8471M
[12/10 02:55:19 d2.utils.events]:  eta: 0:04:58  iter: 9219  total_loss: 5.315  loss_sem_seg: 3.806  loss_center: 0.6277  loss_offset: 0.8754  time: 0.3850  data_time: 0.0269  lr: 0.00025196  max_mem: 8471M
[12/10 02:55:27 d2.utils.events]:  eta: 0:04:51  iter: 9239  total_loss: 5.714  loss_sem_seg: 4.029  loss_center: 0.6444  loss_offset: 0.8121  time: 0.3850  data_time: 0.0265  lr: 0.00024614  max_mem: 8471M
[12/10 02:55:35 d2.utils.events]:  eta: 0:04:43  iter: 9259  total_loss: 5.59  loss_sem_seg: 4.061  loss_center: 0.6135  loss_offset: 0.8224  time: 0.3850  data_time: 0.0263  lr: 0.00024031  max_mem: 8471M
[12/10 02:55:42 d2.utils.events]:  eta: 0:04:36  iter: 9279  total_loss: 5.237  loss_sem_seg: 3.986  loss_center: 0.4823  loss_offset: 0.7904  time: 0.3850  data_time: 0.0288  lr: 0.00023447  max_mem: 8471M
[12/10 02:55:50 d2.utils.events]:  eta: 0:04:28  iter: 9299  total_loss: 5.3  loss_sem_seg: 3.819  loss_center: 0.5999  loss_offset: 0.8211  time: 0.3850  data_time: 0.0267  lr: 0.00022861  max_mem: 8471M
[12/10 02:55:58 d2.utils.events]:  eta: 0:04:20  iter: 9319  total_loss: 6.105  loss_sem_seg: 4.193  loss_center: 0.7957  loss_offset: 1.077  time: 0.3850  data_time: 0.0265  lr: 0.00022273  max_mem: 8471M
[12/10 02:56:05 d2.utils.events]:  eta: 0:04:13  iter: 9339  total_loss: 5.702  loss_sem_seg: 4.056  loss_center: 0.678  loss_offset: 0.7902  time: 0.3850  data_time: 0.0265  lr: 0.00021683  max_mem: 8471M
[12/10 02:56:13 d2.utils.events]:  eta: 0:04:05  iter: 9359  total_loss: 5.561  loss_sem_seg: 4.069  loss_center: 0.6399  loss_offset: 0.649  time: 0.3850  data_time: 0.0274  lr: 0.00021092  max_mem: 8471M
[12/10 02:56:21 d2.utils.events]:  eta: 0:03:57  iter: 9379  total_loss: 5.11  loss_sem_seg: 3.631  loss_center: 0.6662  loss_offset: 0.6457  time: 0.3850  data_time: 0.0268  lr: 0.00020499  max_mem: 8471M
[12/10 02:56:29 d2.utils.events]:  eta: 0:03:50  iter: 9399  total_loss: 5.393  loss_sem_seg: 3.914  loss_center: 0.677  loss_offset: 0.7271  time: 0.3850  data_time: 0.0260  lr: 0.00019903  max_mem: 8471M
[12/10 02:56:36 d2.utils.events]:  eta: 0:03:42  iter: 9419  total_loss: 5.75  loss_sem_seg: 4.116  loss_center: 0.6292  loss_offset: 0.9298  time: 0.3850  data_time: 0.0278  lr: 0.00019306  max_mem: 8471M
[12/10 02:56:44 d2.utils.events]:  eta: 0:03:34  iter: 9439  total_loss: 5.311  loss_sem_seg: 3.887  loss_center: 0.5909  loss_offset: 0.8062  time: 0.3850  data_time: 0.0265  lr: 0.00018707  max_mem: 8471M
[12/10 02:56:52 d2.utils.events]:  eta: 0:03:27  iter: 9459  total_loss: 4.937  loss_sem_seg: 3.69  loss_center: 0.5368  loss_offset: 0.8034  time: 0.3850  data_time: 0.0274  lr: 0.00018106  max_mem: 8471M
[12/10 02:56:59 d2.utils.events]:  eta: 0:03:19  iter: 9479  total_loss: 5.694  loss_sem_seg: 4.115  loss_center: 0.6261  loss_offset: 0.7473  time: 0.3850  data_time: 0.0281  lr: 0.00017502  max_mem: 8471M
[12/10 02:57:07 d2.utils.events]:  eta: 0:03:11  iter: 9499  total_loss: 5.437  loss_sem_seg: 4.024  loss_center: 0.6062  loss_offset: 0.8309  time: 0.3850  data_time: 0.0289  lr: 0.00016896  max_mem: 8471M
[12/10 02:57:15 d2.utils.events]:  eta: 0:03:04  iter: 9519  total_loss: 5.526  loss_sem_seg: 3.993  loss_center: 0.7699  loss_offset: 0.7907  time: 0.3850  data_time: 0.0253  lr: 0.00016288  max_mem: 8471M
[12/10 02:57:22 d2.utils.events]:  eta: 0:02:56  iter: 9539  total_loss: 5.279  loss_sem_seg: 3.981  loss_center: 0.4656  loss_offset: 0.7523  time: 0.3850  data_time: 0.0263  lr: 0.00015677  max_mem: 8471M
[12/10 02:57:30 d2.utils.events]:  eta: 0:02:48  iter: 9559  total_loss: 5.486  loss_sem_seg: 3.949  loss_center: 0.6982  loss_offset: 0.8573  time: 0.3850  data_time: 0.0258  lr: 0.00015064  max_mem: 8471M
[12/10 02:57:38 d2.utils.events]:  eta: 0:02:41  iter: 9579  total_loss: 5.474  loss_sem_seg: 3.89  loss_center: 0.6793  loss_offset: 0.9264  time: 0.3850  data_time: 0.0256  lr: 0.00014448  max_mem: 8471M
[12/10 02:57:45 d2.utils.events]:  eta: 0:02:33  iter: 9599  total_loss: 5.116  loss_sem_seg: 3.766  loss_center: 0.608  loss_offset: 0.7567  time: 0.3850  data_time: 0.0259  lr: 0.00013828  max_mem: 8471M
[12/10 02:57:53 d2.utils.events]:  eta: 0:02:25  iter: 9619  total_loss: 5.227  loss_sem_seg: 3.752  loss_center: 0.6718  loss_offset: 0.7319  time: 0.3850  data_time: 0.0271  lr: 0.00013206  max_mem: 8471M
[12/10 02:58:01 d2.utils.events]:  eta: 0:02:18  iter: 9639  total_loss: 5.437  loss_sem_seg: 3.767  loss_center: 0.6127  loss_offset: 0.761  time: 0.3850  data_time: 0.0256  lr: 0.0001258  max_mem: 8471M
[12/10 02:58:09 d2.utils.events]:  eta: 0:02:10  iter: 9659  total_loss: 5.19  loss_sem_seg: 3.85  loss_center: 0.6265  loss_offset: 0.7687  time: 0.3850  data_time: 0.0274  lr: 0.00011951  max_mem: 8471M
[12/10 02:58:16 d2.utils.events]:  eta: 0:02:02  iter: 9679  total_loss: 5.502  loss_sem_seg: 3.996  loss_center: 0.5386  loss_offset: 0.9095  time: 0.3850  data_time: 0.0260  lr: 0.00011319  max_mem: 8471M
[12/10 02:58:24 d2.utils.events]:  eta: 0:01:55  iter: 9699  total_loss: 5.58  loss_sem_seg: 4.068  loss_center: 0.6799  loss_offset: 0.7098  time: 0.3850  data_time: 0.0270  lr: 0.00010682  max_mem: 8471M
[12/10 02:58:32 d2.utils.events]:  eta: 0:01:47  iter: 9719  total_loss: 5.655  loss_sem_seg: 4.27  loss_center: 0.5817  loss_offset: 0.7933  time: 0.3850  data_time: 0.0273  lr: 0.00010041  max_mem: 8471M
[12/10 02:58:39 d2.utils.events]:  eta: 0:01:39  iter: 9739  total_loss: 5.479  loss_sem_seg: 3.802  loss_center: 0.6578  loss_offset: 0.78  time: 0.3850  data_time: 0.0259  lr: 9.3954e-05  max_mem: 8471M
[12/10 02:58:47 d2.utils.events]:  eta: 0:01:32  iter: 9759  total_loss: 5.258  loss_sem_seg: 3.717  loss_center: 0.6399  loss_offset: 0.7534  time: 0.3850  data_time: 0.0261  lr: 8.7449e-05  max_mem: 8471M
[12/10 02:58:55 d2.utils.events]:  eta: 0:01:24  iter: 9779  total_loss: 5.43  loss_sem_seg: 4.161  loss_center: 0.5359  loss_offset: 0.7976  time: 0.3850  data_time: 0.0283  lr: 8.089e-05  max_mem: 8471M
[12/10 02:59:02 d2.utils.events]:  eta: 0:01:16  iter: 9799  total_loss: 5.481  loss_sem_seg: 3.9  loss_center: 0.7143  loss_offset: 0.7901  time: 0.3850  data_time: 0.0267  lr: 7.4271e-05  max_mem: 8471M
[12/10 02:59:10 d2.utils.events]:  eta: 0:01:09  iter: 9819  total_loss: 5.225  loss_sem_seg: 3.931  loss_center: 0.586  loss_offset: 0.8199  time: 0.3850  data_time: 0.0267  lr: 6.7585e-05  max_mem: 8471M
[12/10 02:59:18 d2.utils.events]:  eta: 0:01:01  iter: 9839  total_loss: 5.238  loss_sem_seg: 3.859  loss_center: 0.6565  loss_offset: 0.7424  time: 0.3850  data_time: 0.0273  lr: 6.0825e-05  max_mem: 8471M
[12/10 02:59:25 d2.utils.events]:  eta: 0:00:53  iter: 9859  total_loss: 5.677  loss_sem_seg: 3.999  loss_center: 0.6951  loss_offset: 0.8431  time: 0.3850  data_time: 0.0268  lr: 5.3981e-05  max_mem: 8471M
[12/10 02:59:33 d2.utils.events]:  eta: 0:00:46  iter: 9879  total_loss: 5.101  loss_sem_seg: 3.815  loss_center: 0.5028  loss_offset: 0.6336  time: 0.3850  data_time: 0.0274  lr: 4.7038e-05  max_mem: 8471M
[12/10 02:59:41 d2.utils.events]:  eta: 0:00:38  iter: 9899  total_loss: 5.43  loss_sem_seg: 4.078  loss_center: 0.5745  loss_offset: 0.8187  time: 0.3850  data_time: 0.0284  lr: 3.9979e-05  max_mem: 8471M
[12/10 02:59:49 d2.utils.events]:  eta: 0:00:30  iter: 9919  total_loss: 5.223  loss_sem_seg: 3.868  loss_center: 0.4678  loss_offset: 0.6947  time: 0.3850  data_time: 0.0279  lr: 3.2778e-05  max_mem: 8471M
[12/10 02:59:56 d2.utils.events]:  eta: 0:00:23  iter: 9939  total_loss: 5.516  loss_sem_seg: 4.019  loss_center: 0.4845  loss_offset: 0.7952  time: 0.3850  data_time: 0.0259  lr: 2.5394e-05  max_mem: 8471M
[12/10 03:00:04 d2.utils.events]:  eta: 0:00:15  iter: 9959  total_loss: 5.818  loss_sem_seg: 4.28  loss_center: 0.659  loss_offset: 0.818  time: 0.3850  data_time: 0.0249  lr: 1.776e-05  max_mem: 8471M
[12/10 03:00:12 d2.utils.events]:  eta: 0:00:07  iter: 9979  total_loss: 5.363  loss_sem_seg: 3.862  loss_center: 0.5362  loss_offset: 0.7366  time: 0.3850  data_time: 0.0283  lr: 9.7261e-06  max_mem: 8471M
[12/10 03:00:19 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0009999.pth
[12/10 03:00:20 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_final.pth
[12/10 03:00:21 d2.utils.events]:  eta: 0:00:00  iter: 9999  total_loss: 5.252  loss_sem_seg: 3.765  loss_center: 0.6106  loss_offset: 0.7666  time: 0.3850  data_time: 0.0265  lr: 6.2797e-07  max_mem: 8471M
[12/10 03:00:21 d2.engine.hooks]: Overall training speed: 9998 iterations in 1:04:09 (0.3850 s / it)
[12/10 03:00:21 d2.engine.hooks]: Total training time: 1:04:16 (0:00:07 on hooks)
[12/10 03:00:22 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[12/10 03:00:22 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/10 03:00:22 d2.data.common]: Serializing 5000 elements to byte tensors and concatenating them all ...
[12/10 03:00:22 d2.data.common]: Serialized dataset takes 3.40 MiB
/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 10 worker processes in total. Our suggested max number of worker in current system is 8, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  cpuset_checked))
[12/10 03:00:23 d2.evaluation.evaluator]: Start inference on 5000 batches
/usr/local/lib/python3.7/dist-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
[12/10 03:00:25 d2.evaluation.evaluator]: Inference done 11/5000. Dataloading: 0.0009 s/iter. Inference: 0.0540 s/iter. Eval: 0.0402 s/iter. Total: 0.0951 s/iter. ETA=0:07:54
[12/10 03:00:30 d2.evaluation.evaluator]: Inference done 72/5000. Dataloading: 0.0011 s/iter. Inference: 0.0501 s/iter. Eval: 0.0329 s/iter. Total: 0.0842 s/iter. ETA=0:06:54
[12/10 03:00:35 d2.evaluation.evaluator]: Inference done 127/5000. Dataloading: 0.0012 s/iter. Inference: 0.0516 s/iter. Eval: 0.0351 s/iter. Total: 0.0880 s/iter. ETA=0:07:08
[12/10 03:00:40 d2.evaluation.evaluator]: Inference done 182/5000. Dataloading: 0.0012 s/iter. Inference: 0.0522 s/iter. Eval: 0.0359 s/iter. Total: 0.0893 s/iter. ETA=0:07:10
[12/10 03:00:45 d2.evaluation.evaluator]: Inference done 236/5000. Dataloading: 0.0012 s/iter. Inference: 0.0534 s/iter. Eval: 0.0355 s/iter. Total: 0.0902 s/iter. ETA=0:07:09
[12/10 03:00:50 d2.evaluation.evaluator]: Inference done 291/5000. Dataloading: 0.0012 s/iter. Inference: 0.0536 s/iter. Eval: 0.0356 s/iter. Total: 0.0905 s/iter. ETA=0:07:06
[12/10 03:00:55 d2.evaluation.evaluator]: Inference done 346/5000. Dataloading: 0.0012 s/iter. Inference: 0.0538 s/iter. Eval: 0.0357 s/iter. Total: 0.0907 s/iter. ETA=0:07:02
[12/10 03:01:00 d2.evaluation.evaluator]: Inference done 403/5000. Dataloading: 0.0012 s/iter. Inference: 0.0536 s/iter. Eval: 0.0356 s/iter. Total: 0.0905 s/iter. ETA=0:06:55
[12/10 03:01:05 d2.evaluation.evaluator]: Inference done 462/5000. Dataloading: 0.0012 s/iter. Inference: 0.0532 s/iter. Eval: 0.0353 s/iter. Total: 0.0898 s/iter. ETA=0:06:47
[12/10 03:01:10 d2.evaluation.evaluator]: Inference done 519/5000. Dataloading: 0.0012 s/iter. Inference: 0.0531 s/iter. Eval: 0.0354 s/iter. Total: 0.0897 s/iter. ETA=0:06:42
[12/10 03:01:15 d2.evaluation.evaluator]: Inference done 573/5000. Dataloading: 0.0012 s/iter. Inference: 0.0533 s/iter. Eval: 0.0356 s/iter. Total: 0.0901 s/iter. ETA=0:06:39
[12/10 03:01:20 d2.evaluation.evaluator]: Inference done 629/5000. Dataloading: 0.0012 s/iter. Inference: 0.0533 s/iter. Eval: 0.0356 s/iter. Total: 0.0902 s/iter. ETA=0:06:34
[12/10 03:01:25 d2.evaluation.evaluator]: Inference done 683/5000. Dataloading: 0.0012 s/iter. Inference: 0.0534 s/iter. Eval: 0.0358 s/iter. Total: 0.0905 s/iter. ETA=0:06:30
[12/10 03:01:30 d2.evaluation.evaluator]: Inference done 738/5000. Dataloading: 0.0012 s/iter. Inference: 0.0534 s/iter. Eval: 0.0359 s/iter. Total: 0.0905 s/iter. ETA=0:06:25
[12/10 03:01:35 d2.evaluation.evaluator]: Inference done 794/5000. Dataloading: 0.0012 s/iter. Inference: 0.0533 s/iter. Eval: 0.0359 s/iter. Total: 0.0905 s/iter. ETA=0:06:20
[12/10 03:01:40 d2.evaluation.evaluator]: Inference done 852/5000. Dataloading: 0.0012 s/iter. Inference: 0.0532 s/iter. Eval: 0.0358 s/iter. Total: 0.0903 s/iter. ETA=0:06:14
[12/10 03:01:46 d2.evaluation.evaluator]: Inference done 911/5000. Dataloading: 0.0012 s/iter. Inference: 0.0530 s/iter. Eval: 0.0358 s/iter. Total: 0.0900 s/iter. ETA=0:06:08
[12/10 03:01:51 d2.evaluation.evaluator]: Inference done 968/5000. Dataloading: 0.0012 s/iter. Inference: 0.0529 s/iter. Eval: 0.0357 s/iter. Total: 0.0899 s/iter. ETA=0:06:02
[12/10 03:01:56 d2.evaluation.evaluator]: Inference done 1023/5000. Dataloading: 0.0012 s/iter. Inference: 0.0529 s/iter. Eval: 0.0358 s/iter. Total: 0.0900 s/iter. ETA=0:05:57
[12/10 03:02:01 d2.evaluation.evaluator]: Inference done 1079/5000. Dataloading: 0.0012 s/iter. Inference: 0.0530 s/iter. Eval: 0.0357 s/iter. Total: 0.0900 s/iter. ETA=0:05:52
[12/10 03:02:06 d2.evaluation.evaluator]: Inference done 1136/5000. Dataloading: 0.0012 s/iter. Inference: 0.0529 s/iter. Eval: 0.0357 s/iter. Total: 0.0899 s/iter. ETA=0:05:47
[12/10 03:02:11 d2.evaluation.evaluator]: Inference done 1190/5000. Dataloading: 0.0012 s/iter. Inference: 0.0530 s/iter. Eval: 0.0358 s/iter. Total: 0.0900 s/iter. ETA=0:05:43
[12/10 03:02:16 d2.evaluation.evaluator]: Inference done 1243/5000. Dataloading: 0.0012 s/iter. Inference: 0.0532 s/iter. Eval: 0.0358 s/iter. Total: 0.0903 s/iter. ETA=0:05:39
[12/10 03:02:21 d2.evaluation.evaluator]: Inference done 1301/5000. Dataloading: 0.0012 s/iter. Inference: 0.0531 s/iter. Eval: 0.0358 s/iter. Total: 0.0902 s/iter. ETA=0:05:33
[12/10 03:02:26 d2.evaluation.evaluator]: Inference done 1357/5000. Dataloading: 0.0012 s/iter. Inference: 0.0531 s/iter. Eval: 0.0358 s/iter. Total: 0.0901 s/iter. ETA=0:05:28
[12/10 03:02:31 d2.evaluation.evaluator]: Inference done 1415/5000. Dataloading: 0.0012 s/iter. Inference: 0.0530 s/iter. Eval: 0.0358 s/iter. Total: 0.0900 s/iter. ETA=0:05:22
[12/10 03:02:36 d2.evaluation.evaluator]: Inference done 1471/5000. Dataloading: 0.0012 s/iter. Inference: 0.0529 s/iter. Eval: 0.0358 s/iter. Total: 0.0900 s/iter. ETA=0:05:17
[12/10 03:02:41 d2.evaluation.evaluator]: Inference done 1527/5000. Dataloading: 0.0012 s/iter. Inference: 0.0529 s/iter. Eval: 0.0358 s/iter. Total: 0.0900 s/iter. ETA=0:05:12
[12/10 03:02:46 d2.evaluation.evaluator]: Inference done 1582/5000. Dataloading: 0.0012 s/iter. Inference: 0.0529 s/iter. Eval: 0.0359 s/iter. Total: 0.0900 s/iter. ETA=0:05:07
[12/10 03:02:51 d2.evaluation.evaluator]: Inference done 1638/5000. Dataloading: 0.0012 s/iter. Inference: 0.0529 s/iter. Eval: 0.0359 s/iter. Total: 0.0900 s/iter. ETA=0:05:02
[12/10 03:02:56 d2.evaluation.evaluator]: Inference done 1694/5000. Dataloading: 0.0012 s/iter. Inference: 0.0529 s/iter. Eval: 0.0359 s/iter. Total: 0.0900 s/iter. ETA=0:04:57
[12/10 03:03:01 d2.evaluation.evaluator]: Inference done 1750/5000. Dataloading: 0.0012 s/iter. Inference: 0.0528 s/iter. Eval: 0.0359 s/iter. Total: 0.0900 s/iter. ETA=0:04:52
[12/10 03:03:06 d2.evaluation.evaluator]: Inference done 1808/5000. Dataloading: 0.0012 s/iter. Inference: 0.0528 s/iter. Eval: 0.0359 s/iter. Total: 0.0899 s/iter. ETA=0:04:46
[12/10 03:03:11 d2.evaluation.evaluator]: Inference done 1864/5000. Dataloading: 0.0012 s/iter. Inference: 0.0528 s/iter. Eval: 0.0359 s/iter. Total: 0.0899 s/iter. ETA=0:04:41
[12/10 03:03:16 d2.evaluation.evaluator]: Inference done 1921/5000. Dataloading: 0.0012 s/iter. Inference: 0.0527 s/iter. Eval: 0.0359 s/iter. Total: 0.0899 s/iter. ETA=0:04:36
[12/10 03:03:21 d2.evaluation.evaluator]: Inference done 1978/5000. Dataloading: 0.0012 s/iter. Inference: 0.0527 s/iter. Eval: 0.0358 s/iter. Total: 0.0899 s/iter. ETA=0:04:31
[12/10 03:03:26 d2.evaluation.evaluator]: Inference done 2033/5000. Dataloading: 0.0012 s/iter. Inference: 0.0527 s/iter. Eval: 0.0359 s/iter. Total: 0.0899 s/iter. ETA=0:04:26
[12/10 03:03:31 d2.evaluation.evaluator]: Inference done 2090/5000. Dataloading: 0.0012 s/iter. Inference: 0.0527 s/iter. Eval: 0.0359 s/iter. Total: 0.0898 s/iter. ETA=0:04:21
[12/10 03:03:36 d2.evaluation.evaluator]: Inference done 2146/5000. Dataloading: 0.0012 s/iter. Inference: 0.0527 s/iter. Eval: 0.0359 s/iter. Total: 0.0898 s/iter. ETA=0:04:16
[12/10 03:03:41 d2.evaluation.evaluator]: Inference done 2204/5000. Dataloading: 0.0012 s/iter. Inference: 0.0527 s/iter. Eval: 0.0358 s/iter. Total: 0.0898 s/iter. ETA=0:04:10
[12/10 03:03:46 d2.evaluation.evaluator]: Inference done 2260/5000. Dataloading: 0.0012 s/iter. Inference: 0.0527 s/iter. Eval: 0.0358 s/iter. Total: 0.0898 s/iter. ETA=0:04:05
[12/10 03:03:51 d2.evaluation.evaluator]: Inference done 2318/5000. Dataloading: 0.0012 s/iter. Inference: 0.0526 s/iter. Eval: 0.0358 s/iter. Total: 0.0897 s/iter. ETA=0:04:00
[12/10 03:03:56 d2.evaluation.evaluator]: Inference done 2376/5000. Dataloading: 0.0012 s/iter. Inference: 0.0526 s/iter. Eval: 0.0357 s/iter. Total: 0.0896 s/iter. ETA=0:03:55
[12/10 03:04:02 d2.evaluation.evaluator]: Inference done 2430/5000. Dataloading: 0.0012 s/iter. Inference: 0.0526 s/iter. Eval: 0.0358 s/iter. Total: 0.0897 s/iter. ETA=0:03:50
[12/10 03:04:07 d2.evaluation.evaluator]: Inference done 2487/5000. Dataloading: 0.0012 s/iter. Inference: 0.0526 s/iter. Eval: 0.0357 s/iter. Total: 0.0897 s/iter. ETA=0:03:45
[12/10 03:04:12 d2.evaluation.evaluator]: Inference done 2543/5000. Dataloading: 0.0012 s/iter. Inference: 0.0526 s/iter. Eval: 0.0357 s/iter. Total: 0.0897 s/iter. ETA=0:03:40
[12/10 03:04:17 d2.evaluation.evaluator]: Inference done 2599/5000. Dataloading: 0.0012 s/iter. Inference: 0.0527 s/iter. Eval: 0.0357 s/iter. Total: 0.0897 s/iter. ETA=0:03:35
[12/10 03:04:22 d2.evaluation.evaluator]: Inference done 2653/5000. Dataloading: 0.0012 s/iter. Inference: 0.0527 s/iter. Eval: 0.0357 s/iter. Total: 0.0897 s/iter. ETA=0:03:30
[12/10 03:04:27 d2.evaluation.evaluator]: Inference done 2712/5000. Dataloading: 0.0012 s/iter. Inference: 0.0527 s/iter. Eval: 0.0357 s/iter. Total: 0.0897 s/iter. ETA=0:03:25
[12/10 03:04:32 d2.evaluation.evaluator]: Inference done 2770/5000. Dataloading: 0.0012 s/iter. Inference: 0.0527 s/iter. Eval: 0.0357 s/iter. Total: 0.0896 s/iter. ETA=0:03:19
[12/10 03:04:37 d2.evaluation.evaluator]: Inference done 2824/5000. Dataloading: 0.0012 s/iter. Inference: 0.0527 s/iter. Eval: 0.0357 s/iter. Total: 0.0897 s/iter. ETA=0:03:15
[12/10 03:04:42 d2.evaluation.evaluator]: Inference done 2882/5000. Dataloading: 0.0012 s/iter. Inference: 0.0527 s/iter. Eval: 0.0357 s/iter. Total: 0.0896 s/iter. ETA=0:03:09
[12/10 03:04:47 d2.evaluation.evaluator]: Inference done 2937/5000. Dataloading: 0.0012 s/iter. Inference: 0.0527 s/iter. Eval: 0.0357 s/iter. Total: 0.0897 s/iter. ETA=0:03:04
[12/10 03:04:52 d2.evaluation.evaluator]: Inference done 2994/5000. Dataloading: 0.0012 s/iter. Inference: 0.0526 s/iter. Eval: 0.0357 s/iter. Total: 0.0896 s/iter. ETA=0:02:59
[12/10 03:04:57 d2.evaluation.evaluator]: Inference done 3053/5000. Dataloading: 0.0012 s/iter. Inference: 0.0526 s/iter. Eval: 0.0357 s/iter. Total: 0.0895 s/iter. ETA=0:02:54
[12/10 03:05:02 d2.evaluation.evaluator]: Inference done 3112/5000. Dataloading: 0.0012 s/iter. Inference: 0.0525 s/iter. Eval: 0.0357 s/iter. Total: 0.0895 s/iter. ETA=0:02:48
[12/10 03:05:07 d2.evaluation.evaluator]: Inference done 3167/5000. Dataloading: 0.0012 s/iter. Inference: 0.0526 s/iter. Eval: 0.0357 s/iter. Total: 0.0895 s/iter. ETA=0:02:44
[12/10 03:05:12 d2.evaluation.evaluator]: Inference done 3222/5000. Dataloading: 0.0012 s/iter. Inference: 0.0526 s/iter. Eval: 0.0357 s/iter. Total: 0.0896 s/iter. ETA=0:02:39
[12/10 03:05:17 d2.evaluation.evaluator]: Inference done 3279/5000. Dataloading: 0.0012 s/iter. Inference: 0.0526 s/iter. Eval: 0.0357 s/iter. Total: 0.0895 s/iter. ETA=0:02:34
[12/10 03:05:22 d2.evaluation.evaluator]: Inference done 3333/5000. Dataloading: 0.0012 s/iter. Inference: 0.0526 s/iter. Eval: 0.0357 s/iter. Total: 0.0896 s/iter. ETA=0:02:29
[12/10 03:05:27 d2.evaluation.evaluator]: Inference done 3389/5000. Dataloading: 0.0012 s/iter. Inference: 0.0526 s/iter. Eval: 0.0357 s/iter. Total: 0.0896 s/iter. ETA=0:02:24
[12/10 03:05:32 d2.evaluation.evaluator]: Inference done 3442/5000. Dataloading: 0.0012 s/iter. Inference: 0.0526 s/iter. Eval: 0.0358 s/iter. Total: 0.0897 s/iter. ETA=0:02:19
[12/10 03:05:37 d2.evaluation.evaluator]: Inference done 3502/5000. Dataloading: 0.0012 s/iter. Inference: 0.0526 s/iter. Eval: 0.0357 s/iter. Total: 0.0896 s/iter. ETA=0:02:14
[12/10 03:05:42 d2.evaluation.evaluator]: Inference done 3558/5000. Dataloading: 0.0012 s/iter. Inference: 0.0526 s/iter. Eval: 0.0358 s/iter. Total: 0.0896 s/iter. ETA=0:02:09
[12/10 03:05:48 d2.evaluation.evaluator]: Inference done 3615/5000. Dataloading: 0.0012 s/iter. Inference: 0.0526 s/iter. Eval: 0.0358 s/iter. Total: 0.0896 s/iter. ETA=0:02:04
[12/10 03:05:53 d2.evaluation.evaluator]: Inference done 3674/5000. Dataloading: 0.0012 s/iter. Inference: 0.0525 s/iter. Eval: 0.0357 s/iter. Total: 0.0896 s/iter. ETA=0:01:58
[12/10 03:05:58 d2.evaluation.evaluator]: Inference done 3730/5000. Dataloading: 0.0012 s/iter. Inference: 0.0526 s/iter. Eval: 0.0357 s/iter. Total: 0.0896 s/iter. ETA=0:01:53
[12/10 03:06:03 d2.evaluation.evaluator]: Inference done 3786/5000. Dataloading: 0.0012 s/iter. Inference: 0.0526 s/iter. Eval: 0.0357 s/iter. Total: 0.0896 s/iter. ETA=0:01:48
[12/10 03:06:08 d2.evaluation.evaluator]: Inference done 3843/5000. Dataloading: 0.0012 s/iter. Inference: 0.0526 s/iter. Eval: 0.0357 s/iter. Total: 0.0896 s/iter. ETA=0:01:43
[12/10 03:06:13 d2.evaluation.evaluator]: Inference done 3902/5000. Dataloading: 0.0012 s/iter. Inference: 0.0525 s/iter. Eval: 0.0357 s/iter. Total: 0.0895 s/iter. ETA=0:01:38
[12/10 03:06:18 d2.evaluation.evaluator]: Inference done 3959/5000. Dataloading: 0.0012 s/iter. Inference: 0.0525 s/iter. Eval: 0.0357 s/iter. Total: 0.0895 s/iter. ETA=0:01:33
[12/10 03:06:23 d2.evaluation.evaluator]: Inference done 4015/5000. Dataloading: 0.0012 s/iter. Inference: 0.0525 s/iter. Eval: 0.0357 s/iter. Total: 0.0895 s/iter. ETA=0:01:28
[12/10 03:06:28 d2.evaluation.evaluator]: Inference done 4072/5000. Dataloading: 0.0012 s/iter. Inference: 0.0525 s/iter. Eval: 0.0357 s/iter. Total: 0.0895 s/iter. ETA=0:01:23
[12/10 03:06:33 d2.evaluation.evaluator]: Inference done 4131/5000. Dataloading: 0.0012 s/iter. Inference: 0.0525 s/iter. Eval: 0.0357 s/iter. Total: 0.0894 s/iter. ETA=0:01:17
[12/10 03:06:38 d2.evaluation.evaluator]: Inference done 4185/5000. Dataloading: 0.0012 s/iter. Inference: 0.0525 s/iter. Eval: 0.0357 s/iter. Total: 0.0895 s/iter. ETA=0:01:12
[12/10 03:06:43 d2.evaluation.evaluator]: Inference done 4244/5000. Dataloading: 0.0012 s/iter. Inference: 0.0524 s/iter. Eval: 0.0357 s/iter. Total: 0.0894 s/iter. ETA=0:01:07
[12/10 03:06:48 d2.evaluation.evaluator]: Inference done 4301/5000. Dataloading: 0.0012 s/iter. Inference: 0.0524 s/iter. Eval: 0.0357 s/iter. Total: 0.0894 s/iter. ETA=0:01:02
[12/10 03:06:53 d2.evaluation.evaluator]: Inference done 4361/5000. Dataloading: 0.0012 s/iter. Inference: 0.0524 s/iter. Eval: 0.0357 s/iter. Total: 0.0893 s/iter. ETA=0:00:57
[12/10 03:06:58 d2.evaluation.evaluator]: Inference done 4418/5000. Dataloading: 0.0012 s/iter. Inference: 0.0524 s/iter. Eval: 0.0357 s/iter. Total: 0.0893 s/iter. ETA=0:00:51
[12/10 03:07:03 d2.evaluation.evaluator]: Inference done 4475/5000. Dataloading: 0.0012 s/iter. Inference: 0.0524 s/iter. Eval: 0.0357 s/iter. Total: 0.0893 s/iter. ETA=0:00:46
[12/10 03:07:08 d2.evaluation.evaluator]: Inference done 4533/5000. Dataloading: 0.0012 s/iter. Inference: 0.0523 s/iter. Eval: 0.0357 s/iter. Total: 0.0893 s/iter. ETA=0:00:41
[12/10 03:07:13 d2.evaluation.evaluator]: Inference done 4590/5000. Dataloading: 0.0012 s/iter. Inference: 0.0523 s/iter. Eval: 0.0357 s/iter. Total: 0.0893 s/iter. ETA=0:00:36
[12/10 03:07:18 d2.evaluation.evaluator]: Inference done 4648/5000. Dataloading: 0.0012 s/iter. Inference: 0.0523 s/iter. Eval: 0.0357 s/iter. Total: 0.0893 s/iter. ETA=0:00:31
[12/10 03:07:23 d2.evaluation.evaluator]: Inference done 4702/5000. Dataloading: 0.0012 s/iter. Inference: 0.0524 s/iter. Eval: 0.0357 s/iter. Total: 0.0893 s/iter. ETA=0:00:26
[12/10 03:07:29 d2.evaluation.evaluator]: Inference done 4762/5000. Dataloading: 0.0012 s/iter. Inference: 0.0523 s/iter. Eval: 0.0356 s/iter. Total: 0.0892 s/iter. ETA=0:00:21
[12/10 03:07:34 d2.evaluation.evaluator]: Inference done 4818/5000. Dataloading: 0.0012 s/iter. Inference: 0.0523 s/iter. Eval: 0.0356 s/iter. Total: 0.0892 s/iter. ETA=0:00:16
[12/10 03:07:39 d2.evaluation.evaluator]: Inference done 4876/5000. Dataloading: 0.0012 s/iter. Inference: 0.0523 s/iter. Eval: 0.0356 s/iter. Total: 0.0892 s/iter. ETA=0:00:11
[12/10 03:07:44 d2.evaluation.evaluator]: Inference done 4930/5000. Dataloading: 0.0012 s/iter. Inference: 0.0523 s/iter. Eval: 0.0356 s/iter. Total: 0.0893 s/iter. ETA=0:00:06
[12/10 03:07:49 d2.evaluation.evaluator]: Inference done 4989/5000. Dataloading: 0.0012 s/iter. Inference: 0.0523 s/iter. Eval: 0.0356 s/iter. Total: 0.0892 s/iter. ETA=0:00:00
[12/10 03:07:50 d2.evaluation.evaluator]: Total inference time: 0:07:25.842960 (0.089258 s / iter per device, on 1 devices)
[12/10 03:07:50 d2.evaluation.evaluator]: Total inference pure compute time: 0:04:21 (0.052314 s / iter per device, on 1 devices)
[12/10 03:07:50 d2.evaluation.panoptic_evaluation]: Writing all panoptic predictions to /tmp/panoptic_evalvvp0ee5c ...
[12/10 03:08:14 d2.evaluation.panoptic_evaluation]: Panoptic Evaluation Results:
|        |  PQ   |   SQ   |  RQ   |  #categories  |
|:------:|:-----:|:------:|:-----:|:-------------:|
|  All   | 5.269 | 52.666 | 7.490 |      133      |
| Things | 5.089 | 51.110 | 7.148 |      80       |
| Stuff  | 5.540 | 55.015 | 8.005 |      53       |
[12/10 03:08:15 d2.evaluation.coco_evaluation]: Preparing results for COCO format ...
[12/10 03:08:15 d2.evaluation.coco_evaluation]: Saving results to ./output/inference/coco_instances_results.json
[12/10 03:08:15 d2.evaluation.coco_evaluation]: Evaluating predictions with unofficial COCO API...
Loading and preparing results...
DONE (t=0.04s)
creating index...
index created!
[12/10 03:08:15 d2.evaluation.fast_eval_api]: Evaluate annotation type *bbox*
[12/10 03:08:23 d2.evaluation.fast_eval_api]: COCOeval_opt.evaluate() finished in 7.96 seconds.
[12/10 03:08:23 d2.evaluation.fast_eval_api]: Accumulating evaluation results...
[12/10 03:08:24 d2.evaluation.fast_eval_api]: COCOeval_opt.accumulate() finished in 0.64 seconds.
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.007
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.020
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.004
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.001
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.006
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.013
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.020
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.027
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.027
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.001
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.014
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.057
[12/10 03:08:24 d2.evaluation.coco_evaluation]: Evaluation results for bbox: 
|  AP   |  AP50  |  AP75  |  APs  |  APm  |  APl  |
|:-----:|:------:|:------:|:-----:|:-----:|:-----:|
| 0.736 | 1.988  | 0.426  | 0.102 | 0.647 | 1.283 |
[12/10 03:08:24 d2.evaluation.coco_evaluation]: Per-category bbox AP: 
| category      | AP    | category     | AP    | category       | AP    |
|:--------------|:------|:-------------|:------|:---------------|:------|
| person        | 2.171 | bicycle      | 0.175 | car            | 0.852 |
| motorcycle    | 1.463 | airplane     | 3.804 | bus            | 3.069 |
| train         | 0.851 | truck        | 0.109 | boat           | 0.055 |
| traffic light | 0.255 | fire hydrant | 3.170 | stop sign      | 1.506 |
| parking meter | 0.000 | bench        | 0.000 | bird           | 0.365 |
| cat           | 1.155 | dog          | 0.050 | horse          | 0.000 |
| sheep         | 0.808 | cow          | 1.207 | elephant       | 2.382 |
| bear          | 5.216 | zebra        | 5.953 | giraffe        | 3.739 |
| backpack      | 0.000 | umbrella     | 0.205 | handbag        | 0.000 |
| tie           | 0.000 | suitcase     | 0.275 | frisbee        | 0.890 |
| skis          | 0.013 | snowboard    | 0.000 | sports ball    | 2.301 |
| kite          | 0.744 | baseball bat | 0.033 | baseball glove | 0.000 |
| skateboard    | 0.022 | surfboard    | 0.091 | tennis racket  | 1.189 |
| bottle        | 0.093 | wine glass   | 0.000 | cup            | 0.647 |
| fork          | 0.000 | knife        | 0.000 | spoon          | 0.000 |
| bowl          | 0.170 | banana       | 0.106 | apple          | 0.099 |
| sandwich      | 0.000 | orange       | 0.150 | broccoli       | 0.033 |
| carrot        | 0.061 | hot dog      | 0.000 | pizza          | 2.270 |
| donut         | 0.285 | cake         | 0.317 | chair          | 0.118 |
| couch         | 1.184 | potted plant | 0.066 | bed            | 2.689 |
| dining table  | 1.291 | toilet       | 1.540 | tv             | 0.413 |
| laptop        | 0.400 | mouse        | 0.347 | remote         | 0.000 |
| keyboard      | 0.055 | cell phone   | 1.028 | microwave      | 0.061 |
| oven          | 0.290 | toaster      | 0.000 | sink           | 0.083 |
| refrigerator  | 0.341 | book         | 0.069 | clock          | 0.161 |
| vase          | 0.000 | scissors     | 0.000 | teddy bear     | 0.374 |
| hair drier    | 0.000 | toothbrush   | 0.000 |                |       |
Loading and preparing results...
DONE (t=0.60s)
creating index...
index created!
[12/10 03:08:25 d2.evaluation.fast_eval_api]: Evaluate annotation type *segm*
[12/10 03:08:35 d2.evaluation.fast_eval_api]: COCOeval_opt.evaluate() finished in 9.21 seconds.
[12/10 03:08:35 d2.evaluation.fast_eval_api]: Accumulating evaluation results...
[12/10 03:08:35 d2.evaluation.fast_eval_api]: COCOeval_opt.accumulate() finished in 0.71 seconds.
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.010
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.024
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.009
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.000
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.006
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.028
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.021
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.026
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.026
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.001
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.013
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.055
[12/10 03:08:38 d2.evaluation.coco_evaluation]: Evaluation results for segm: 
|  AP   |  AP50  |  AP75  |  APs  |  APm  |  APl  |
|:-----:|:------:|:------:|:-----:|:-----:|:-----:|
| 1.041 | 2.361  | 0.866  | 0.044 | 0.568 | 2.825 |
[12/10 03:08:38 d2.evaluation.coco_evaluation]: Per-category segm AP: 
| category      | AP     | category     | AP    | category       | AP     |
|:--------------|:-------|:-------------|:------|:---------------|:-------|
| person        | 1.261  | bicycle      | 0.182 | car            | 0.944  |
| motorcycle    | 0.884  | airplane     | 0.967 | bus            | 5.583  |
| train         | 1.427  | truck        | 0.113 | boat           | 0.068  |
| traffic light | 0.311  | fire hydrant | 6.291 | stop sign      | 14.204 |
| parking meter | 1.386  | bench        | 0.000 | bird           | 0.050  |
| cat           | 2.083  | dog          | 0.000 | horse          | 0.000  |
| sheep         | 0.710  | cow          | 0.652 | elephant       | 3.255  |
| bear          | 10.963 | zebra        | 6.457 | giraffe        | 3.448  |
| backpack      | 0.000  | umbrella     | 0.173 | handbag        | 0.000  |
| tie           | 0.000  | suitcase     | 0.118 | frisbee        | 0.915  |
| skis          | 0.000  | snowboard    | 0.000 | sports ball    | 2.162  |
| kite          | 0.126  | baseball bat | 0.000 | baseball glove | 0.028  |
| skateboard    | 0.000  | surfboard    | 0.048 | tennis racket  | 3.244  |
| bottle        | 0.113  | wine glass   | 0.000 | cup            | 0.807  |
| fork          | 0.000  | knife        | 0.000 | spoon          | 0.000  |
| bowl          | 0.210  | banana       | 0.077 | apple          | 0.013  |
| sandwich      | 0.000  | orange       | 0.477 | broccoli       | 0.011  |
| carrot        | 0.024  | hot dog      | 0.000 | pizza          | 1.227  |
| donut         | 0.291  | cake         | 0.005 | chair          | 0.083  |
| couch         | 0.542  | potted plant | 0.047 | bed            | 1.456  |
| dining table  | 0.105  | toilet       | 3.662 | tv             | 1.319  |
| laptop        | 0.446  | mouse        | 0.384 | remote         | 0.000  |
| keyboard      | 0.740  | cell phone   | 1.007 | microwave      | 0.419  |
| oven          | 0.246  | toaster      | 0.000 | sink           | 0.254  |
| refrigerator  | 0.127  | book         | 0.042 | clock          | 0.715  |
| vase          | 0.017  | scissors     | 0.000 | teddy bear     | 0.359  |
| hair drier    | 0.000  | toothbrush   | 0.000 |                |        |
[12/10 03:08:43 d2.engine.defaults]: Evaluation results for coco_2017_val_panoptic in csv format:
[12/10 03:08:43 d2.evaluation.testing]: copypaste: Task: panoptic_seg
[12/10 03:08:43 d2.evaluation.testing]: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[12/10 03:08:43 d2.evaluation.testing]: copypaste: 5.2690,52.6662,7.4898,5.0893,51.1105,7.1483,5.5404,55.0146,8.0052
[12/10 03:08:43 d2.evaluation.testing]: copypaste: Task: bbox
[12/10 03:08:43 d2.evaluation.testing]: copypaste: AP,AP50,AP75,APs,APm,APl
[12/10 03:08:43 d2.evaluation.testing]: copypaste: 0.7357,1.9879,0.4256,0.1024,0.6471,1.2834
[12/10 03:08:43 d2.evaluation.testing]: copypaste: Task: segm
[12/10 03:08:43 d2.evaluation.testing]: copypaste: AP,AP50,AP75,APs,APm,APl
[12/10 03:08:43 d2.evaluation.testing]: copypaste: 1.0410,2.3608,0.8659,0.0444,0.5683,2.8254