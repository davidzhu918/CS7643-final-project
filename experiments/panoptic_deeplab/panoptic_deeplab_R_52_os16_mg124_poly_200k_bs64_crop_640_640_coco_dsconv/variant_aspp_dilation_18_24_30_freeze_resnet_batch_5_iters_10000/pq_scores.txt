env: DETECTRON2_DATASETS=/content/datasets
Command Line Args: Namespace(config_file='./detectron2/projects/Panoptic-DeepLab/configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.RESNETS.NORM', 'BN', 'MODEL.INS_EMBED_HEAD.NORM', 'BN', 'MODEL.SEM_SEG_HEAD.NORM', 'BN', 'SOLVER.MAX_ITER', '10000', 'SOLVER.IMS_PER_BATCH', '5', 'SOLVER.BASE_LR', '0.0025', 'MODEL.BACKBONE.FREEZE_AT', '2', 'MODEL.SEM_SEG_HEAD.ASPP_DILATIONS', '[18, 24, 30]', 'MODEL.INS_EMBED_HEAD.ASPP_DILATIONS', '[18, 24, 30]'], resume=False)
Loading config ./detectron2/projects/Panoptic-DeepLab/configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv.yaml with yaml.unsafe_load. Your machine may be at risk if the file contains malicious content.
[12/10 05:02:32 detectron2]: Rank of current process: 0. World size: 1
[12/10 05:02:33 detectron2]: Environment info:
----------------------  ----------------------------------------------------------------
sys.platform            linux
Python                  3.7.12 (default, Jan 15 2022, 18:48:18) [GCC 7.5.0]
numpy                   1.21.5
detectron2              0.6 @/content/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.1
detectron2 arch flags   7.0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.10.0+cu111 @/usr/local/lib/python3.7/dist-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0                   Tesla V100-SXM2-16GB (arch=7.0)
Driver version          460.32.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.1.2
torchvision             0.11.1+cu111 @/usr/local/lib/python3.7/dist-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20221122
iopath                  0.1.9
cv2                     4.1.2
----------------------  ----------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[12/10 05:02:33 detectron2]: Command line arguments: Namespace(config_file='./detectron2/projects/Panoptic-DeepLab/configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.RESNETS.NORM', 'BN', 'MODEL.INS_EMBED_HEAD.NORM', 'BN', 'MODEL.SEM_SEG_HEAD.NORM', 'BN', 'SOLVER.MAX_ITER', '10000', 'SOLVER.IMS_PER_BATCH', '5', 'SOLVER.BASE_LR', '0.0025', 'MODEL.BACKBONE.FREEZE_AT', '2', 'MODEL.SEM_SEG_HEAD.ASPP_DILATIONS', '[18, 24, 30]', 'MODEL.INS_EMBED_HEAD.ASPP_DILATIONS', '[18, 24, 30]'], resume=False)
[12/10 05:02:33 detectron2]: Contents of args.config_file=./detectron2/projects/Panoptic-DeepLab/configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv.yaml:
_BASE_: ../Cityscapes-PanopticSegmentation/Base-PanopticDeepLab-OS16.yaml
MODEL:
  WEIGHTS: "detectron2://DeepLab/R-52.pkl"
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  BACKBONE:
    NAME: "build_resnet_deeplab_backbone"
  RESNETS:
    DEPTH: 50
    NORM: "SyncBN"
    RES5_MULTI_GRID: [1, 2, 4]
    STEM_TYPE: "deeplab"
    STEM_OUT_CHANNELS: 128
    STRIDE_IN_1X1: False
  SEM_SEG_HEAD:
    NUM_CLASSES: 133
    LOSS_TOP_K: 1.0
    USE_DEPTHWISE_SEPARABLE_CONV: True
  PANOPTIC_DEEPLAB:
    STUFF_AREA: 4096
    NMS_KERNEL: 41
    SIZE_DIVISIBILITY: 640
    USE_DEPTHWISE_SEPARABLE_CONV: True
DATASETS:
  TRAIN: ("coco_2017_train_panoptic",)
  TEST: ("coco_2017_val_panoptic",)
SOLVER:
  BASE_LR: 0.0005
  MAX_ITER: 200000
  IMS_PER_BATCH: 64
INPUT:
  FORMAT: "RGB"
  GAUSSIAN_SIGMA: 8
  MIN_SIZE_TRAIN: !!python/object/apply:eval ["[int(x * 0.1 * 640) for x in range(5, 16)]"]
  MIN_SIZE_TRAIN_SAMPLING: "choice"
  MIN_SIZE_TEST: 640
  MAX_SIZE_TRAIN: 960
  MAX_SIZE_TEST: 640
  CROP:
    ENABLED: True
    TYPE: "absolute"
    SIZE: (640, 640)

[12/10 05:02:33 detectron2]: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 10
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - coco_2017_val_panoptic
  TRAIN:
  - coco_2017_train_panoptic
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: true
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 640
    - 640
    TYPE: absolute
  FORMAT: RGB
  GAUSSIAN_SIGMA: 8
  IGNORE_CROWD_IN_SEMANTIC: false
  IGNORE_STUFF_IN_OFFSET: true
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 640
  MAX_SIZE_TRAIN: 960
  MIN_SIZE_TEST: 640
  MIN_SIZE_TRAIN:
  - 320
  - 384
  - 448
  - 512
  - 576
  - 640
  - 704
  - 768
  - 832
  - 896
  - 960
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SMALL_INSTANCE_AREA: 4096
  SMALL_INSTANCE_WEIGHT: 3
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_deeplab_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  INS_EMBED_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 18
    - 24
    - 30
    ASPP_DROPOUT: 0.1
    CENTER_LOSS_WEIGHT: 200.0
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    HEAD_CHANNELS: 32
    IN_FEATURES:
    - res2
    - res3
    - res5
    NAME: PanopticDeepLabInsEmbedHead
    NORM: BN
    OFFSET_LOSS_WEIGHT: 0.01
    PROJECT_CHANNELS:
    - 32
    - 64
    PROJECT_FEATURES:
    - res2
    - res3
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: PanopticDeepLab
  PANOPTIC_DEEPLAB:
    BENCHMARK_NETWORK_SPEED: false
    CENTER_THRESHOLD: 0.1
    NMS_KERNEL: 41
    PREDICT_INSTANCES: true
    SIZE_DIVISIBILITY: 640
    STUFF_AREA: 4096
    TOP_K_INSTANCE: 200
    USE_DEPTHWISE_SEPARABLE_CONV: true
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: BN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 2
    RES5_MULTI_GRID:
    - 1
    - 2
    - 4
    STEM_OUT_CHANNELS: 128
    STEM_TYPE: deeplab
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id001
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS:
    - 10.0
    - 10.0
    - 5.0
    - 5.0
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 18
    - 24
    - 30
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    HEAD_CHANNELS: 256
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res5
    LOSS_TOP_K: 1.0
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    NAME: PanopticDeepLabSemSegHead
    NORM: BN
    NUM_CLASSES: 133
    PROJECT_CHANNELS:
    - 32
    - 64
    PROJECT_FEATURES:
    - res2
    - res3
    USE_DEPTHWISE_SEPARABLE_CONV: true
  WEIGHTS: detectron2://DeepLab/R-52.pkl
OUTPUT_DIR: ./output
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.0025
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 5
  LR_SCHEDULER_NAME: WarmupPolyLR
  MAX_ITER: 10000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAM
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 30000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0
  WEIGHT_DECAY_BIAS: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/10 05:02:33 detectron2]: Full config saved to ./output/config.yaml
[12/10 05:02:33 d2.utils.env]: Using a generated random seed 33317084
[12/10 05:02:37 d2.engine.defaults]: Model:
PanopticDeepLab(
  (backbone): ResNet(
    (stem): DeepLabStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
      )
      (conv2): Conv2d(
        64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
      )
      (conv3): Conv2d(
        64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv1): Conv2d(
          128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(8, 8), dilation=(8, 8), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (sem_seg_head): PanopticDeepLabSemSegHead(
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            288, 288, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=288, bias=False
            (norm): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            288, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(24, 24), dilation=(24, 24), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(30, 30), dilation=(30, 30), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AvgPool2d(kernel_size=(40, 40), stride=1, padding=0)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=256, bias=False
        (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (predictor): Conv2d(256, 133, kernel_size=(1, 1), stride=(1, 1))
    (loss): DeepLabCE(
      (criterion): CrossEntropyLoss()
    )
  )
  (ins_embed_head): PanopticDeepLabInsEmbedHead(
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            160, 160, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=160, bias=False
            (norm): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(24, 24), dilation=(24, 24), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(30, 30), dilation=(30, 30), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AvgPool2d(kernel_size=(40, 40), stride=1, padding=0)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (center_head): Sequential(
      (0): Conv2d(
        128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): Conv2d(
        128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (center_predictor): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
    (offset_head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=128, bias=False
        (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (offset_predictor): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
    (center_loss): MSELoss()
    (offset_loss): L1Loss()
  )
)
[12/10 05:02:37 d2.projects.panoptic_deeplab.dataset_mapper]: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960), max_size=960, sample_style='choice'), RandomCrop(crop_type='absolute', crop_size=[640, 640]), RandomFlip()]
[12/10 05:02:45 d2.data.build]: Using training sampler TrainingSampler
[12/10 05:02:45 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/10 05:02:45 d2.data.common]: Serializing 118287 elements to byte tensors and concatenating them all ...
[12/10 05:02:46 d2.data.common]: Serialized dataset takes 80.32 MiB
/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 10 worker processes in total. Our suggested max number of worker in current system is 8, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  cpuset_checked))
[12/10 05:02:49 fvcore.common.checkpoint]: [Checkpointer] Loading from detectron2://DeepLab/R-52.pkl ...
[12/10 05:02:49 fvcore.common.checkpoint]: Reading a file from 'torchvision'
[12/10 05:02:49 d2.checkpoint.c2_model_loading]: Following weights matched with submodule backbone:
| Names in Model    | Names in Checkpoint                                                                                        | Shapes                                             |
|:------------------|:-----------------------------------------------------------------------------------------------------------|:---------------------------------------------------|
| res2.0.conv1.*    | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,128,1,1)               |
| res2.0.conv2.*    | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,64,3,3)                |
| res2.0.conv3.*    | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,64,1,1)           |
| res2.0.shortcut.* | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                          | (256,) (256,) (256,) (256,) (256,128,1,1)          |
| res2.1.conv1.*    | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,256,1,1)               |
| res2.1.conv2.*    | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,64,3,3)                |
| res2.1.conv3.*    | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,64,1,1)           |
| res2.2.conv1.*    | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,256,1,1)               |
| res2.2.conv2.*    | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,64,3,3)                |
| res2.2.conv3.*    | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,64,1,1)           |
| res3.0.conv1.*    | res3.0.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3.0.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3.0.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3.0.shortcut.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) () (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3.1.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3.1.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3.1.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3.2.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3.2.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3.2.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3.3.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3.3.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3.3.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4.0.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4.0.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4.0.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4.0.shortcut.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) () (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4.1.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4.1.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4.1.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4.2.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4.2.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4.2.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4.3.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4.3.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4.3.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4.4.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4.4.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4.4.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4.5.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4.5.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4.5.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) () (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) () (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) () (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) () (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.*      | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                               | (64,) (64,) (64,) (64,) (64,3,3,3)                 |
| stem.conv2.*      | stem.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                               | (64,) (64,) (64,) (64,) (64,64,3,3)                |
| stem.conv3.*      | stem.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                               | (128,) (128,) (128,) (128,) (128,64,3,3)           |
WARNING [12/10 05:02:50 fvcore.common.checkpoint]: Some model parameters or buffers are not found in the checkpoint:
ins_embed_head.center_head.0.norm.{bias, running_mean, running_var, weight}
ins_embed_head.center_head.0.weight
ins_embed_head.center_head.1.norm.{bias, running_mean, running_var, weight}
ins_embed_head.center_head.1.weight
ins_embed_head.center_predictor.{bias, weight}
ins_embed_head.decoder.res2.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res2.fuse_conv.depthwise.weight
ins_embed_head.decoder.res2.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res2.fuse_conv.pointwise.weight
ins_embed_head.decoder.res2.project_conv.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res2.project_conv.weight
ins_embed_head.decoder.res3.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res3.fuse_conv.depthwise.weight
ins_embed_head.decoder.res3.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res3.fuse_conv.pointwise.weight
ins_embed_head.decoder.res3.project_conv.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res3.project_conv.weight
ins_embed_head.decoder.res5.project_conv.convs.0.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.0.weight
ins_embed_head.decoder.res5.project_conv.convs.1.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.1.depthwise.weight
ins_embed_head.decoder.res5.project_conv.convs.1.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.1.pointwise.weight
ins_embed_head.decoder.res5.project_conv.convs.2.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.2.depthwise.weight
ins_embed_head.decoder.res5.project_conv.convs.2.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.2.pointwise.weight
ins_embed_head.decoder.res5.project_conv.convs.3.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.3.depthwise.weight
ins_embed_head.decoder.res5.project_conv.convs.3.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.3.pointwise.weight
ins_embed_head.decoder.res5.project_conv.convs.4.1.{bias, weight}
ins_embed_head.decoder.res5.project_conv.project.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.project.weight
ins_embed_head.offset_head.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.offset_head.depthwise.weight
ins_embed_head.offset_head.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.offset_head.pointwise.weight
ins_embed_head.offset_predictor.{bias, weight}
sem_seg_head.decoder.res2.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res2.fuse_conv.depthwise.weight
sem_seg_head.decoder.res2.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res2.fuse_conv.pointwise.weight
sem_seg_head.decoder.res2.project_conv.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res2.project_conv.weight
sem_seg_head.decoder.res3.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res3.fuse_conv.depthwise.weight
sem_seg_head.decoder.res3.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res3.fuse_conv.pointwise.weight
sem_seg_head.decoder.res3.project_conv.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res3.project_conv.weight
sem_seg_head.decoder.res5.project_conv.convs.0.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.0.weight
sem_seg_head.decoder.res5.project_conv.convs.1.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.1.depthwise.weight
sem_seg_head.decoder.res5.project_conv.convs.1.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.1.pointwise.weight
sem_seg_head.decoder.res5.project_conv.convs.2.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.2.depthwise.weight
sem_seg_head.decoder.res5.project_conv.convs.2.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.2.pointwise.weight
sem_seg_head.decoder.res5.project_conv.convs.3.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.3.depthwise.weight
sem_seg_head.decoder.res5.project_conv.convs.3.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.3.pointwise.weight
sem_seg_head.decoder.res5.project_conv.convs.4.1.{bias, weight}
sem_seg_head.decoder.res5.project_conv.project.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.project.weight
sem_seg_head.head.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.head.depthwise.weight
sem_seg_head.head.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.head.pointwise.weight
sem_seg_head.predictor.{bias, weight}
WARNING [12/10 05:02:50 fvcore.common.checkpoint]: The checkpoint state_dict contains keys that are not used by the model:
  res2.0.conv1.norm.num_batches_tracked
  res2.0.conv2.norm.num_batches_tracked
  res2.0.conv3.norm.num_batches_tracked
  res2.0.shortcut.norm.num_batches_tracked
  res2.1.conv1.norm.num_batches_tracked
  res2.1.conv2.norm.num_batches_tracked
  res2.1.conv3.norm.num_batches_tracked
  res2.2.conv1.norm.num_batches_tracked
  res2.2.conv2.norm.num_batches_tracked
  res2.2.conv3.norm.num_batches_tracked
  stem.conv1.norm.num_batches_tracked
  stem.conv2.norm.num_batches_tracked
  stem.conv3.norm.num_batches_tracked
  stem.fc.{bias, weight}
[12/10 05:02:50 d2.engine.train_loop]: Starting training from iteration 0
/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 10 worker processes in total. Our suggested max number of worker in current system is 8, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  cpuset_checked))
[12/10 05:02:58 d2.utils.events]:  eta: 1:02:47  iter: 19  total_loss: 5.788  loss_sem_seg: 3.619  loss_center: 0.9739  loss_offset: 1.51  time: 0.3759  data_time: 0.0701  lr: 4.9867e-05  max_mem: 8976M
[12/10 05:03:05 d2.utils.events]:  eta: 1:02:19  iter: 39  total_loss: 6.047  loss_sem_seg: 3.765  loss_center: 0.7252  loss_offset: 1.717  time: 0.3743  data_time: 0.0247  lr: 9.9552e-05  max_mem: 8976M
[12/10 05:03:13 d2.utils.events]:  eta: 1:02:13  iter: 59  total_loss: 5.706  loss_sem_seg: 3.696  loss_center: 0.5756  loss_offset: 1.57  time: 0.3756  data_time: 0.0263  lr: 0.00014906  max_mem: 8976M
[12/10 05:03:21 d2.utils.events]:  eta: 1:02:10  iter: 79  total_loss: 5.765  loss_sem_seg: 3.448  loss_center: 0.619  loss_offset: 1.733  time: 0.3777  data_time: 0.0291  lr: 0.00019838  max_mem: 8976M
[12/10 05:03:28 d2.utils.events]:  eta: 1:02:21  iter: 99  total_loss: 5.602  loss_sem_seg: 3.403  loss_center: 0.661  loss_offset: 1.614  time: 0.3783  data_time: 0.0284  lr: 0.00024753  max_mem: 8976M
[12/10 05:03:36 d2.utils.events]:  eta: 1:02:11  iter: 119  total_loss: 5.127  loss_sem_seg: 2.882  loss_center: 0.6376  loss_offset: 1.409  time: 0.3779  data_time: 0.0262  lr: 0.00029649  max_mem: 8976M
[12/10 05:03:43 d2.utils.events]:  eta: 1:02:08  iter: 139  total_loss: 5.156  loss_sem_seg: 2.854  loss_center: 0.5864  loss_offset: 1.62  time: 0.3781  data_time: 0.0277  lr: 0.00034528  max_mem: 8976M
[12/10 05:03:51 d2.utils.events]:  eta: 1:02:08  iter: 159  total_loss: 5.333  loss_sem_seg: 2.887  loss_center: 0.5347  loss_offset: 1.81  time: 0.3782  data_time: 0.0282  lr: 0.00039388  max_mem: 8976M
[12/10 05:03:59 d2.utils.events]:  eta: 1:02:05  iter: 179  total_loss: 5.593  loss_sem_seg: 3.024  loss_center: 0.713  loss_offset: 1.695  time: 0.3788  data_time: 0.0293  lr: 0.0004423  max_mem: 8976M
[12/10 05:04:06 d2.utils.events]:  eta: 1:01:58  iter: 199  total_loss: 5.246  loss_sem_seg: 2.626  loss_center: 0.7056  loss_offset: 1.604  time: 0.3790  data_time: 0.0276  lr: 0.00049055  max_mem: 8976M
[12/10 05:04:14 d2.utils.events]:  eta: 1:01:50  iter: 219  total_loss: 4.758  loss_sem_seg: 2.813  loss_center: 0.7075  loss_offset: 1.516  time: 0.3791  data_time: 0.0274  lr: 0.00053861  max_mem: 8976M
[12/10 05:04:22 d2.utils.events]:  eta: 1:01:41  iter: 239  total_loss: 4.746  loss_sem_seg: 2.487  loss_center: 0.8967  loss_offset: 1.43  time: 0.3789  data_time: 0.0257  lr: 0.00058649  max_mem: 8976M
[12/10 05:04:29 d2.utils.events]:  eta: 1:01:32  iter: 259  total_loss: 4.833  loss_sem_seg: 2.416  loss_center: 0.6703  loss_offset: 1.59  time: 0.3788  data_time: 0.0259  lr: 0.0006342  max_mem: 8976M
[12/10 05:04:37 d2.utils.events]:  eta: 1:01:24  iter: 279  total_loss: 5.033  loss_sem_seg: 2.59  loss_center: 0.7234  loss_offset: 1.493  time: 0.3788  data_time: 0.0277  lr: 0.00068172  max_mem: 8976M
[12/10 05:04:44 d2.utils.events]:  eta: 1:01:19  iter: 299  total_loss: 4.961  loss_sem_seg: 2.723  loss_center: 0.719  loss_offset: 1.526  time: 0.3790  data_time: 0.0280  lr: 0.00072906  max_mem: 8976M
[12/10 05:04:52 d2.utils.events]:  eta: 1:01:10  iter: 319  total_loss: 4.705  loss_sem_seg: 2.59  loss_center: 0.622  loss_offset: 1.411  time: 0.3793  data_time: 0.0300  lr: 0.00077622  max_mem: 8976M
[12/10 05:05:00 d2.utils.events]:  eta: 1:01:03  iter: 339  total_loss: 4.774  loss_sem_seg: 2.523  loss_center: 0.5927  loss_offset: 1.438  time: 0.3794  data_time: 0.0276  lr: 0.0008232  max_mem: 8976M
[12/10 05:05:07 d2.utils.events]:  eta: 1:00:54  iter: 359  total_loss: 4.767  loss_sem_seg: 2.493  loss_center: 0.7418  loss_offset: 1.463  time: 0.3794  data_time: 0.0275  lr: 0.00087  max_mem: 8976M
[12/10 05:05:15 d2.utils.events]:  eta: 1:00:44  iter: 379  total_loss: 4.834  loss_sem_seg: 2.353  loss_center: 0.6493  loss_offset: 1.41  time: 0.3795  data_time: 0.0294  lr: 0.00091662  max_mem: 8976M
[12/10 05:05:23 d2.utils.events]:  eta: 1:00:36  iter: 399  total_loss: 4.548  loss_sem_seg: 2.456  loss_center: 0.6488  loss_offset: 1.425  time: 0.3797  data_time: 0.0285  lr: 0.00096306  max_mem: 8976M
[12/10 05:05:30 d2.utils.events]:  eta: 1:00:28  iter: 419  total_loss: 4.811  loss_sem_seg: 2.763  loss_center: 0.6294  loss_offset: 1.417  time: 0.3796  data_time: 0.0285  lr: 0.0010093  max_mem: 8976M
[12/10 05:05:38 d2.utils.events]:  eta: 1:00:20  iter: 439  total_loss: 4.674  loss_sem_seg: 2.59  loss_center: 0.726  loss_offset: 1.541  time: 0.3797  data_time: 0.0277  lr: 0.0010554  max_mem: 8976M
[12/10 05:05:45 d2.utils.events]:  eta: 1:00:13  iter: 459  total_loss: 4.685  loss_sem_seg: 2.501  loss_center: 0.6499  loss_offset: 1.388  time: 0.3798  data_time: 0.0282  lr: 0.0011013  max_mem: 8976M
[12/10 05:05:53 d2.utils.events]:  eta: 1:00:05  iter: 479  total_loss: 4.416  loss_sem_seg: 2.411  loss_center: 0.6338  loss_offset: 1.436  time: 0.3798  data_time: 0.0263  lr: 0.001147  max_mem: 8976M
[12/10 05:06:01 d2.utils.events]:  eta: 0:59:58  iter: 499  total_loss: 4.579  loss_sem_seg: 2.373  loss_center: 0.6647  loss_offset: 1.5  time: 0.3797  data_time: 0.0267  lr: 0.0011925  max_mem: 8976M
[12/10 05:06:08 d2.utils.events]:  eta: 0:59:50  iter: 519  total_loss: 4.525  loss_sem_seg: 2.512  loss_center: 0.7138  loss_offset: 1.475  time: 0.3796  data_time: 0.0256  lr: 0.0012379  max_mem: 8976M
[12/10 05:06:16 d2.utils.events]:  eta: 0:59:43  iter: 539  total_loss: 4.032  loss_sem_seg: 2.097  loss_center: 0.8046  loss_offset: 1.208  time: 0.3797  data_time: 0.0273  lr: 0.001283  max_mem: 8976M
[12/10 05:06:23 d2.utils.events]:  eta: 0:59:35  iter: 559  total_loss: 4.182  loss_sem_seg: 2.114  loss_center: 0.6228  loss_offset: 1.072  time: 0.3797  data_time: 0.0279  lr: 0.001328  max_mem: 8976M
[12/10 05:06:31 d2.utils.events]:  eta: 0:59:28  iter: 579  total_loss: 4.48  loss_sem_seg: 2.641  loss_center: 0.6336  loss_offset: 1.257  time: 0.3797  data_time: 0.0272  lr: 0.0013728  max_mem: 8976M
[12/10 05:06:39 d2.utils.events]:  eta: 0:59:18  iter: 599  total_loss: 4.346  loss_sem_seg: 2.164  loss_center: 0.7073  loss_offset: 1.26  time: 0.3797  data_time: 0.0271  lr: 0.0014175  max_mem: 8976M
[12/10 05:06:46 d2.utils.events]:  eta: 0:59:08  iter: 619  total_loss: 4.511  loss_sem_seg: 2.459  loss_center: 0.7479  loss_offset: 1.225  time: 0.3796  data_time: 0.0281  lr: 0.0014619  max_mem: 8976M
[12/10 05:06:54 d2.utils.events]:  eta: 0:59:00  iter: 639  total_loss: 4.293  loss_sem_seg: 2.265  loss_center: 0.6974  loss_offset: 1.237  time: 0.3796  data_time: 0.0262  lr: 0.0015062  max_mem: 8976M
[12/10 05:07:01 d2.utils.events]:  eta: 0:58:53  iter: 659  total_loss: 4.186  loss_sem_seg: 2.405  loss_center: 0.5932  loss_offset: 1.208  time: 0.3796  data_time: 0.0283  lr: 0.0015503  max_mem: 8976M
[12/10 05:07:09 d2.utils.events]:  eta: 0:58:45  iter: 679  total_loss: 4.704  loss_sem_seg: 2.637  loss_center: 0.8525  loss_offset: 1.258  time: 0.3796  data_time: 0.0265  lr: 0.0015942  max_mem: 8976M
[12/10 05:07:16 d2.utils.events]:  eta: 0:58:37  iter: 699  total_loss: 3.999  loss_sem_seg: 2.077  loss_center: 0.7293  loss_offset: 1.05  time: 0.3795  data_time: 0.0276  lr: 0.0016379  max_mem: 8976M
[12/10 05:07:24 d2.utils.events]:  eta: 0:58:29  iter: 719  total_loss: 4.433  loss_sem_seg: 2.447  loss_center: 0.7512  loss_offset: 1.084  time: 0.3795  data_time: 0.0276  lr: 0.0016814  max_mem: 8976M
[12/10 05:07:32 d2.utils.events]:  eta: 0:58:21  iter: 739  total_loss: 4.267  loss_sem_seg: 2.329  loss_center: 0.5788  loss_offset: 1.264  time: 0.3794  data_time: 0.0261  lr: 0.0017248  max_mem: 8976M
[12/10 05:07:39 d2.utils.events]:  eta: 0:58:12  iter: 759  total_loss: 4.235  loss_sem_seg: 2.25  loss_center: 0.6466  loss_offset: 1.165  time: 0.3793  data_time: 0.0267  lr: 0.0017679  max_mem: 8976M
[12/10 05:07:47 d2.utils.events]:  eta: 0:58:05  iter: 779  total_loss: 4.674  loss_sem_seg: 2.569  loss_center: 0.8133  loss_offset: 1.206  time: 0.3792  data_time: 0.0268  lr: 0.0018109  max_mem: 8976M
[12/10 05:07:54 d2.utils.events]:  eta: 0:57:57  iter: 799  total_loss: 4.314  loss_sem_seg: 2.332  loss_center: 0.8661  loss_offset: 0.9954  time: 0.3792  data_time: 0.0255  lr: 0.0018537  max_mem: 8976M
[12/10 05:08:02 d2.utils.events]:  eta: 0:57:49  iter: 819  total_loss: 4.067  loss_sem_seg: 2.153  loss_center: 0.716  loss_offset: 0.9359  time: 0.3791  data_time: 0.0263  lr: 0.0018964  max_mem: 8976M
[12/10 05:08:09 d2.utils.events]:  eta: 0:57:41  iter: 839  total_loss: 4.304  loss_sem_seg: 2.321  loss_center: 0.861  loss_offset: 0.9812  time: 0.3790  data_time: 0.0263  lr: 0.0019388  max_mem: 8976M
[12/10 05:08:17 d2.utils.events]:  eta: 0:57:33  iter: 859  total_loss: 4.129  loss_sem_seg: 2.212  loss_center: 0.814  loss_offset: 1.086  time: 0.3790  data_time: 0.0274  lr: 0.0019811  max_mem: 8976M
[12/10 05:08:24 d2.utils.events]:  eta: 0:57:26  iter: 879  total_loss: 4.249  loss_sem_seg: 2.395  loss_center: 0.4929  loss_offset: 1.203  time: 0.3790  data_time: 0.0278  lr: 0.0020231  max_mem: 8976M
[12/10 05:08:32 d2.utils.events]:  eta: 0:57:19  iter: 899  total_loss: 4.391  loss_sem_seg: 2.537  loss_center: 0.7595  loss_offset: 1.092  time: 0.3790  data_time: 0.0279  lr: 0.002065  max_mem: 8976M
[12/10 05:08:40 d2.utils.events]:  eta: 0:57:12  iter: 919  total_loss: 4.503  loss_sem_seg: 2.455  loss_center: 0.7234  loss_offset: 1.115  time: 0.3791  data_time: 0.0277  lr: 0.0021068  max_mem: 8976M
[12/10 05:08:47 d2.utils.events]:  eta: 0:57:04  iter: 939  total_loss: 4.29  loss_sem_seg: 2.359  loss_center: 0.6542  loss_offset: 1.223  time: 0.3791  data_time: 0.0282  lr: 0.0021483  max_mem: 8976M
[12/10 05:08:55 d2.utils.events]:  eta: 0:56:58  iter: 959  total_loss: 4.332  loss_sem_seg: 2.349  loss_center: 0.8376  loss_offset: 1.175  time: 0.3791  data_time: 0.0276  lr: 0.0021896  max_mem: 8976M
[12/10 05:09:03 d2.utils.events]:  eta: 0:56:51  iter: 979  total_loss: 4.109  loss_sem_seg: 2.157  loss_center: 0.741  loss_offset: 1.094  time: 0.3792  data_time: 0.0302  lr: 0.0022308  max_mem: 8976M
[12/10 05:09:10 d2.utils.events]:  eta: 0:56:42  iter: 999  total_loss: 3.847  loss_sem_seg: 2.092  loss_center: 0.7779  loss_offset: 1.057  time: 0.3792  data_time: 0.0266  lr: 0.0022718  max_mem: 8976M
[12/10 05:09:18 d2.utils.events]:  eta: 0:56:35  iter: 1019  total_loss: 3.918  loss_sem_seg: 2.171  loss_center: 0.7762  loss_offset: 1.083  time: 0.3792  data_time: 0.0303  lr: 0.0022695  max_mem: 8976M
[12/10 05:09:25 d2.utils.events]:  eta: 0:56:28  iter: 1039  total_loss: 4.372  loss_sem_seg: 2.299  loss_center: 0.742  loss_offset: 1.164  time: 0.3792  data_time: 0.0275  lr: 0.002265  max_mem: 8976M
[12/10 05:09:33 d2.utils.events]:  eta: 0:56:19  iter: 1059  total_loss: 4.077  loss_sem_seg: 2.201  loss_center: 0.639  loss_offset: 1.076  time: 0.3791  data_time: 0.0258  lr: 0.0022604  max_mem: 8976M
[12/10 05:09:41 d2.utils.events]:  eta: 0:56:12  iter: 1079  total_loss: 4.17  loss_sem_seg: 2.293  loss_center: 0.7801  loss_offset: 1.075  time: 0.3791  data_time: 0.0281  lr: 0.0022559  max_mem: 8976M
[12/10 05:09:48 d2.utils.events]:  eta: 0:56:04  iter: 1099  total_loss: 4.088  loss_sem_seg: 2.286  loss_center: 0.5972  loss_offset: 1.074  time: 0.3792  data_time: 0.0280  lr: 0.0022513  max_mem: 8976M
[12/10 05:09:56 d2.utils.events]:  eta: 0:55:56  iter: 1119  total_loss: 4.156  loss_sem_seg: 2.22  loss_center: 0.7764  loss_offset: 1.146  time: 0.3791  data_time: 0.0268  lr: 0.0022468  max_mem: 8976M
[12/10 05:10:03 d2.utils.events]:  eta: 0:55:48  iter: 1139  total_loss: 4  loss_sem_seg: 2.32  loss_center: 0.6478  loss_offset: 1.114  time: 0.3791  data_time: 0.0276  lr: 0.0022422  max_mem: 8976M
[12/10 05:10:11 d2.utils.events]:  eta: 0:55:40  iter: 1159  total_loss: 4.018  loss_sem_seg: 2.331  loss_center: 0.6427  loss_offset: 1.046  time: 0.3791  data_time: 0.0286  lr: 0.0022376  max_mem: 8976M
[12/10 05:10:18 d2.utils.events]:  eta: 0:55:31  iter: 1179  total_loss: 3.954  loss_sem_seg: 2.109  loss_center: 0.7512  loss_offset: 1.054  time: 0.3790  data_time: 0.0252  lr: 0.0022331  max_mem: 8976M
[12/10 05:10:26 d2.utils.events]:  eta: 0:55:23  iter: 1199  total_loss: 3.974  loss_sem_seg: 2.009  loss_center: 0.6286  loss_offset: 1.104  time: 0.3790  data_time: 0.0265  lr: 0.0022285  max_mem: 8976M
[12/10 05:10:34 d2.utils.events]:  eta: 0:55:16  iter: 1219  total_loss: 4.086  loss_sem_seg: 2.276  loss_center: 0.7147  loss_offset: 0.9704  time: 0.3790  data_time: 0.0270  lr: 0.002224  max_mem: 8976M
[12/10 05:10:41 d2.utils.events]:  eta: 0:55:08  iter: 1239  total_loss: 3.898  loss_sem_seg: 2.129  loss_center: 0.5303  loss_offset: 1.068  time: 0.3790  data_time: 0.0281  lr: 0.0022194  max_mem: 8976M
[12/10 05:10:49 d2.utils.events]:  eta: 0:55:00  iter: 1259  total_loss: 3.842  loss_sem_seg: 2.166  loss_center: 0.7326  loss_offset: 1.131  time: 0.3789  data_time: 0.0259  lr: 0.0022149  max_mem: 8976M
[12/10 05:10:56 d2.utils.events]:  eta: 0:54:53  iter: 1279  total_loss: 3.825  loss_sem_seg: 2.074  loss_center: 0.7604  loss_offset: 1.007  time: 0.3789  data_time: 0.0281  lr: 0.0022103  max_mem: 8976M
[12/10 05:11:04 d2.utils.events]:  eta: 0:54:45  iter: 1299  total_loss: 4.03  loss_sem_seg: 2.051  loss_center: 0.6491  loss_offset: 1.087  time: 0.3788  data_time: 0.0259  lr: 0.0022057  max_mem: 8976M
[12/10 05:11:11 d2.utils.events]:  eta: 0:54:37  iter: 1319  total_loss: 4.062  loss_sem_seg: 2.332  loss_center: 0.5017  loss_offset: 1.14  time: 0.3788  data_time: 0.0271  lr: 0.0022012  max_mem: 8976M
[12/10 05:11:19 d2.utils.events]:  eta: 0:54:30  iter: 1339  total_loss: 4.078  loss_sem_seg: 2.181  loss_center: 0.6271  loss_offset: 1.018  time: 0.3788  data_time: 0.0263  lr: 0.0021966  max_mem: 8976M
[12/10 05:11:26 d2.utils.events]:  eta: 0:54:22  iter: 1359  total_loss: 3.956  loss_sem_seg: 2.113  loss_center: 0.6577  loss_offset: 0.9309  time: 0.3788  data_time: 0.0261  lr: 0.002192  max_mem: 8976M
[12/10 05:11:34 d2.utils.events]:  eta: 0:54:15  iter: 1379  total_loss: 4.22  loss_sem_seg: 2.482  loss_center: 0.7536  loss_offset: 1.097  time: 0.3788  data_time: 0.0269  lr: 0.0021875  max_mem: 8976M
[12/10 05:11:42 d2.utils.events]:  eta: 0:54:07  iter: 1399  total_loss: 3.975  loss_sem_seg: 2.28  loss_center: 0.6003  loss_offset: 0.9838  time: 0.3788  data_time: 0.0250  lr: 0.0021829  max_mem: 8976M
[12/10 05:11:49 d2.utils.events]:  eta: 0:53:59  iter: 1419  total_loss: 4.047  loss_sem_seg: 2.262  loss_center: 0.5718  loss_offset: 1.069  time: 0.3787  data_time: 0.0274  lr: 0.0021783  max_mem: 8976M
[12/10 05:11:57 d2.utils.events]:  eta: 0:53:52  iter: 1439  total_loss: 4.129  loss_sem_seg: 2.44  loss_center: 0.7093  loss_offset: 0.9606  time: 0.3787  data_time: 0.0285  lr: 0.0021738  max_mem: 8976M
[12/10 05:12:04 d2.utils.events]:  eta: 0:53:44  iter: 1459  total_loss: 4.045  loss_sem_seg: 2.196  loss_center: 0.5032  loss_offset: 1.131  time: 0.3787  data_time: 0.0278  lr: 0.0021692  max_mem: 8976M
[12/10 05:12:12 d2.utils.events]:  eta: 0:53:36  iter: 1479  total_loss: 4.313  loss_sem_seg: 2.281  loss_center: 0.6999  loss_offset: 1.113  time: 0.3787  data_time: 0.0260  lr: 0.0021646  max_mem: 8976M
[12/10 05:12:19 d2.utils.events]:  eta: 0:53:29  iter: 1499  total_loss: 3.879  loss_sem_seg: 2.207  loss_center: 0.6793  loss_offset: 1.091  time: 0.3787  data_time: 0.0265  lr: 0.00216  max_mem: 8976M
[12/10 05:12:27 d2.utils.events]:  eta: 0:53:21  iter: 1519  total_loss: 3.716  loss_sem_seg: 2.015  loss_center: 0.7423  loss_offset: 0.9167  time: 0.3786  data_time: 0.0273  lr: 0.0021555  max_mem: 8976M
[12/10 05:12:34 d2.utils.events]:  eta: 0:53:12  iter: 1539  total_loss: 3.901  loss_sem_seg: 1.96  loss_center: 0.7874  loss_offset: 0.984  time: 0.3785  data_time: 0.0253  lr: 0.0021509  max_mem: 8976M
[12/10 05:12:42 d2.utils.events]:  eta: 0:53:04  iter: 1559  total_loss: 3.889  loss_sem_seg: 2.078  loss_center: 0.7484  loss_offset: 1.066  time: 0.3785  data_time: 0.0281  lr: 0.0021463  max_mem: 8976M
[12/10 05:12:49 d2.utils.events]:  eta: 0:52:56  iter: 1579  total_loss: 3.89  loss_sem_seg: 2.136  loss_center: 0.6559  loss_offset: 1.078  time: 0.3785  data_time: 0.0262  lr: 0.0021417  max_mem: 8976M
[12/10 05:12:57 d2.utils.events]:  eta: 0:52:48  iter: 1599  total_loss: 3.91  loss_sem_seg: 2.286  loss_center: 0.5416  loss_offset: 1.105  time: 0.3785  data_time: 0.0273  lr: 0.0021372  max_mem: 8976M
[12/10 05:13:04 d2.utils.events]:  eta: 0:52:40  iter: 1619  total_loss: 4.095  loss_sem_seg: 2.09  loss_center: 0.7638  loss_offset: 1.097  time: 0.3784  data_time: 0.0253  lr: 0.0021326  max_mem: 8976M
[12/10 05:13:12 d2.utils.events]:  eta: 0:52:33  iter: 1639  total_loss: 3.932  loss_sem_seg: 2.141  loss_center: 0.6935  loss_offset: 1.096  time: 0.3784  data_time: 0.0256  lr: 0.002128  max_mem: 8976M
[12/10 05:13:19 d2.utils.events]:  eta: 0:52:25  iter: 1659  total_loss: 3.775  loss_sem_seg: 1.979  loss_center: 0.6754  loss_offset: 0.9518  time: 0.3784  data_time: 0.0272  lr: 0.0021234  max_mem: 8976M
[12/10 05:13:27 d2.utils.events]:  eta: 0:52:18  iter: 1679  total_loss: 4.006  loss_sem_seg: 2.279  loss_center: 0.6236  loss_offset: 1.054  time: 0.3783  data_time: 0.0256  lr: 0.0021188  max_mem: 8976M
[12/10 05:13:35 d2.utils.events]:  eta: 0:52:10  iter: 1699  total_loss: 3.651  loss_sem_seg: 2.132  loss_center: 0.602  loss_offset: 1.018  time: 0.3784  data_time: 0.0275  lr: 0.0021143  max_mem: 8976M
[12/10 05:13:42 d2.utils.events]:  eta: 0:52:02  iter: 1719  total_loss: 3.976  loss_sem_seg: 2.243  loss_center: 0.5598  loss_offset: 1.016  time: 0.3783  data_time: 0.0249  lr: 0.0021097  max_mem: 8976M
[12/10 05:13:50 d2.utils.events]:  eta: 0:51:52  iter: 1739  total_loss: 3.733  loss_sem_seg: 1.975  loss_center: 0.739  loss_offset: 0.9972  time: 0.3783  data_time: 0.0263  lr: 0.0021051  max_mem: 8976M
[12/10 05:13:57 d2.utils.events]:  eta: 0:51:46  iter: 1759  total_loss: 3.754  loss_sem_seg: 2.199  loss_center: 0.7848  loss_offset: 0.982  time: 0.3783  data_time: 0.0262  lr: 0.0021005  max_mem: 8976M
[12/10 05:14:05 d2.utils.events]:  eta: 0:51:39  iter: 1779  total_loss: 3.823  loss_sem_seg: 2.162  loss_center: 0.6167  loss_offset: 0.9192  time: 0.3782  data_time: 0.0267  lr: 0.0020959  max_mem: 8976M
[12/10 05:14:12 d2.utils.events]:  eta: 0:51:30  iter: 1799  total_loss: 3.621  loss_sem_seg: 1.944  loss_center: 0.6146  loss_offset: 0.9524  time: 0.3782  data_time: 0.0266  lr: 0.0020913  max_mem: 8976M
[12/10 05:14:20 d2.utils.events]:  eta: 0:51:24  iter: 1819  total_loss: 4.21  loss_sem_seg: 2.252  loss_center: 0.7375  loss_offset: 1.084  time: 0.3782  data_time: 0.0267  lr: 0.0020867  max_mem: 8976M
[12/10 05:14:27 d2.utils.events]:  eta: 0:51:15  iter: 1839  total_loss: 3.793  loss_sem_seg: 2.009  loss_center: 0.691  loss_offset: 0.9769  time: 0.3782  data_time: 0.0258  lr: 0.0020821  max_mem: 8976M
[12/10 05:14:35 d2.utils.events]:  eta: 0:51:07  iter: 1859  total_loss: 3.556  loss_sem_seg: 1.92  loss_center: 0.6682  loss_offset: 0.8738  time: 0.3781  data_time: 0.0263  lr: 0.0020775  max_mem: 8976M
[12/10 05:14:42 d2.utils.events]:  eta: 0:50:58  iter: 1879  total_loss: 3.728  loss_sem_seg: 1.939  loss_center: 0.5441  loss_offset: 1.038  time: 0.3781  data_time: 0.0262  lr: 0.0020729  max_mem: 8976M
[12/10 05:14:50 d2.utils.events]:  eta: 0:50:50  iter: 1899  total_loss: 3.782  loss_sem_seg: 1.94  loss_center: 0.7311  loss_offset: 1.008  time: 0.3781  data_time: 0.0268  lr: 0.0020684  max_mem: 8976M
[12/10 05:14:57 d2.utils.events]:  eta: 0:50:40  iter: 1919  total_loss: 3.861  loss_sem_seg: 2.081  loss_center: 0.8363  loss_offset: 0.9949  time: 0.3780  data_time: 0.0240  lr: 0.0020638  max_mem: 8976M
[12/10 05:15:05 d2.utils.events]:  eta: 0:50:32  iter: 1939  total_loss: 4.062  loss_sem_seg: 2.263  loss_center: 0.6108  loss_offset: 1.098  time: 0.3780  data_time: 0.0266  lr: 0.0020592  max_mem: 8976M
[12/10 05:15:12 d2.utils.events]:  eta: 0:50:24  iter: 1959  total_loss: 3.957  loss_sem_seg: 2.235  loss_center: 0.5891  loss_offset: 1.032  time: 0.3780  data_time: 0.0249  lr: 0.0020546  max_mem: 8976M
[12/10 05:15:20 d2.utils.events]:  eta: 0:50:15  iter: 1979  total_loss: 3.762  loss_sem_seg: 2.134  loss_center: 0.5596  loss_offset: 1.065  time: 0.3780  data_time: 0.0258  lr: 0.00205  max_mem: 8976M
[12/10 05:15:27 d2.utils.events]:  eta: 0:50:08  iter: 1999  total_loss: 4.018  loss_sem_seg: 2.028  loss_center: 0.6732  loss_offset: 1.126  time: 0.3779  data_time: 0.0258  lr: 0.0020454  max_mem: 8976M
[12/10 05:15:35 d2.utils.events]:  eta: 0:49:59  iter: 2019  total_loss: 3.946  loss_sem_seg: 2.228  loss_center: 0.6295  loss_offset: 1.025  time: 0.3779  data_time: 0.0255  lr: 0.0020408  max_mem: 8976M
[12/10 05:15:42 d2.utils.events]:  eta: 0:49:52  iter: 2039  total_loss: 3.784  loss_sem_seg: 2.067  loss_center: 0.7183  loss_offset: 0.9542  time: 0.3779  data_time: 0.0272  lr: 0.0020362  max_mem: 8976M
[12/10 05:15:50 d2.utils.events]:  eta: 0:49:45  iter: 2059  total_loss: 3.617  loss_sem_seg: 1.914  loss_center: 0.8198  loss_offset: 0.9488  time: 0.3778  data_time: 0.0244  lr: 0.0020316  max_mem: 8976M
[12/10 05:15:57 d2.utils.events]:  eta: 0:49:37  iter: 2079  total_loss: 3.679  loss_sem_seg: 1.814  loss_center: 0.7288  loss_offset: 0.8925  time: 0.3778  data_time: 0.0242  lr: 0.0020269  max_mem: 8976M
[12/10 05:16:05 d2.utils.events]:  eta: 0:49:29  iter: 2099  total_loss: 3.745  loss_sem_seg: 2.014  loss_center: 0.7553  loss_offset: 1.052  time: 0.3778  data_time: 0.0274  lr: 0.0020223  max_mem: 8976M
[12/10 05:16:13 d2.utils.events]:  eta: 0:49:22  iter: 2119  total_loss: 3.869  loss_sem_seg: 2.088  loss_center: 0.8722  loss_offset: 0.9722  time: 0.3778  data_time: 0.0274  lr: 0.0020177  max_mem: 8976M
[12/10 05:16:20 d2.utils.events]:  eta: 0:49:14  iter: 2139  total_loss: 3.73  loss_sem_seg: 2.021  loss_center: 0.628  loss_offset: 0.9158  time: 0.3778  data_time: 0.0259  lr: 0.0020131  max_mem: 8976M
[12/10 05:16:28 d2.utils.events]:  eta: 0:49:07  iter: 2159  total_loss: 3.84  loss_sem_seg: 2.103  loss_center: 0.8113  loss_offset: 1.04  time: 0.3778  data_time: 0.0255  lr: 0.0020085  max_mem: 8976M
[12/10 05:16:35 d2.utils.events]:  eta: 0:48:59  iter: 2179  total_loss: 3.589  loss_sem_seg: 1.889  loss_center: 0.5832  loss_offset: 0.9918  time: 0.3778  data_time: 0.0268  lr: 0.0020039  max_mem: 8976M
[12/10 05:16:43 d2.utils.events]:  eta: 0:48:52  iter: 2199  total_loss: 4.044  loss_sem_seg: 2.064  loss_center: 0.659  loss_offset: 0.995  time: 0.3777  data_time: 0.0249  lr: 0.0019993  max_mem: 8976M
[12/10 05:16:50 d2.utils.events]:  eta: 0:48:44  iter: 2219  total_loss: 3.819  loss_sem_seg: 2.015  loss_center: 0.7386  loss_offset: 1.003  time: 0.3777  data_time: 0.0258  lr: 0.0019947  max_mem: 8976M
[12/10 05:16:58 d2.utils.events]:  eta: 0:48:36  iter: 2239  total_loss: 3.663  loss_sem_seg: 2.033  loss_center: 0.6158  loss_offset: 0.9587  time: 0.3777  data_time: 0.0263  lr: 0.0019901  max_mem: 8976M
[12/10 05:17:05 d2.utils.events]:  eta: 0:48:29  iter: 2259  total_loss: 4.072  loss_sem_seg: 2.168  loss_center: 0.6927  loss_offset: 1.014  time: 0.3777  data_time: 0.0266  lr: 0.0019854  max_mem: 8976M
[12/10 05:17:13 d2.utils.events]:  eta: 0:48:21  iter: 2279  total_loss: 3.869  loss_sem_seg: 1.927  loss_center: 0.5946  loss_offset: 1.045  time: 0.3777  data_time: 0.0254  lr: 0.0019808  max_mem: 8976M
[12/10 05:17:20 d2.utils.events]:  eta: 0:48:14  iter: 2299  total_loss: 3.777  loss_sem_seg: 1.97  loss_center: 0.7459  loss_offset: 0.9049  time: 0.3777  data_time: 0.0270  lr: 0.0019762  max_mem: 8976M
[12/10 05:17:28 d2.utils.events]:  eta: 0:48:06  iter: 2319  total_loss: 3.695  loss_sem_seg: 1.821  loss_center: 0.7263  loss_offset: 0.9706  time: 0.3777  data_time: 0.0272  lr: 0.0019716  max_mem: 8976M
[12/10 05:17:35 d2.utils.events]:  eta: 0:47:57  iter: 2339  total_loss: 3.586  loss_sem_seg: 1.799  loss_center: 0.655  loss_offset: 0.9571  time: 0.3776  data_time: 0.0268  lr: 0.001967  max_mem: 8976M
[12/10 05:17:43 d2.utils.events]:  eta: 0:47:50  iter: 2359  total_loss: 3.989  loss_sem_seg: 2.041  loss_center: 0.6422  loss_offset: 0.9863  time: 0.3776  data_time: 0.0263  lr: 0.0019623  max_mem: 8976M
[12/10 05:17:50 d2.utils.events]:  eta: 0:47:41  iter: 2379  total_loss: 3.912  loss_sem_seg: 1.997  loss_center: 0.6421  loss_offset: 1.003  time: 0.3776  data_time: 0.0264  lr: 0.0019577  max_mem: 8976M
[12/10 05:17:58 d2.utils.events]:  eta: 0:47:35  iter: 2399  total_loss: 4.022  loss_sem_seg: 2.221  loss_center: 0.6072  loss_offset: 1.029  time: 0.3776  data_time: 0.0260  lr: 0.0019531  max_mem: 8976M
[12/10 05:18:06 d2.utils.events]:  eta: 0:47:27  iter: 2419  total_loss: 3.435  loss_sem_seg: 1.761  loss_center: 0.5971  loss_offset: 0.9694  time: 0.3776  data_time: 0.0269  lr: 0.0019485  max_mem: 8976M
[12/10 05:18:13 d2.utils.events]:  eta: 0:47:19  iter: 2439  total_loss: 3.703  loss_sem_seg: 1.859  loss_center: 0.6985  loss_offset: 0.9692  time: 0.3776  data_time: 0.0258  lr: 0.0019438  max_mem: 8976M
[12/10 05:18:21 d2.utils.events]:  eta: 0:47:11  iter: 2459  total_loss: 3.687  loss_sem_seg: 1.855  loss_center: 0.7856  loss_offset: 0.9867  time: 0.3776  data_time: 0.0266  lr: 0.0019392  max_mem: 8976M
[12/10 05:18:28 d2.utils.events]:  eta: 0:47:04  iter: 2479  total_loss: 3.874  loss_sem_seg: 2.129  loss_center: 0.5618  loss_offset: 1.053  time: 0.3776  data_time: 0.0253  lr: 0.0019346  max_mem: 8976M
[12/10 05:18:36 d2.utils.events]:  eta: 0:46:56  iter: 2499  total_loss: 3.785  loss_sem_seg: 1.952  loss_center: 0.6496  loss_offset: 0.9883  time: 0.3775  data_time: 0.0257  lr: 0.00193  max_mem: 8976M
[12/10 05:18:43 d2.utils.events]:  eta: 0:46:48  iter: 2519  total_loss: 3.795  loss_sem_seg: 2.028  loss_center: 0.7058  loss_offset: 1.001  time: 0.3775  data_time: 0.0260  lr: 0.0019253  max_mem: 8976M
[12/10 05:18:51 d2.utils.events]:  eta: 0:46:41  iter: 2539  total_loss: 3.617  loss_sem_seg: 1.964  loss_center: 0.696  loss_offset: 0.9818  time: 0.3775  data_time: 0.0265  lr: 0.0019207  max_mem: 8976M
[12/10 05:18:58 d2.utils.events]:  eta: 0:46:33  iter: 2559  total_loss: 3.761  loss_sem_seg: 2.093  loss_center: 0.6204  loss_offset: 0.956  time: 0.3775  data_time: 0.0278  lr: 0.0019161  max_mem: 8976M
[12/10 05:19:06 d2.utils.events]:  eta: 0:46:26  iter: 2579  total_loss: 3.629  loss_sem_seg: 1.958  loss_center: 0.608  loss_offset: 0.9304  time: 0.3775  data_time: 0.0279  lr: 0.0019114  max_mem: 8976M
[12/10 05:19:13 d2.utils.events]:  eta: 0:46:18  iter: 2599  total_loss: 3.695  loss_sem_seg: 1.97  loss_center: 0.5824  loss_offset: 0.893  time: 0.3775  data_time: 0.0283  lr: 0.0019068  max_mem: 8976M
[12/10 05:19:21 d2.utils.events]:  eta: 0:46:11  iter: 2619  total_loss: 3.85  loss_sem_seg: 2.049  loss_center: 0.7287  loss_offset: 1.068  time: 0.3775  data_time: 0.0258  lr: 0.0019021  max_mem: 8976M
[12/10 05:19:28 d2.utils.events]:  eta: 0:46:03  iter: 2639  total_loss: 3.442  loss_sem_seg: 1.879  loss_center: 0.5625  loss_offset: 1.058  time: 0.3775  data_time: 0.0251  lr: 0.0018975  max_mem: 8976M
[12/10 05:19:36 d2.utils.events]:  eta: 0:45:55  iter: 2659  total_loss: 3.494  loss_sem_seg: 1.824  loss_center: 0.7017  loss_offset: 0.9851  time: 0.3775  data_time: 0.0271  lr: 0.0018929  max_mem: 8976M
[12/10 05:19:44 d2.utils.events]:  eta: 0:45:48  iter: 2679  total_loss: 3.971  loss_sem_seg: 2.022  loss_center: 0.5699  loss_offset: 1.041  time: 0.3775  data_time: 0.0261  lr: 0.0018882  max_mem: 8976M
[12/10 05:19:51 d2.utils.events]:  eta: 0:45:41  iter: 2699  total_loss: 3.703  loss_sem_seg: 2.18  loss_center: 0.5632  loss_offset: 1.024  time: 0.3775  data_time: 0.0280  lr: 0.0018836  max_mem: 8976M
[12/10 05:19:59 d2.utils.events]:  eta: 0:45:34  iter: 2719  total_loss: 3.759  loss_sem_seg: 2.015  loss_center: 0.6945  loss_offset: 0.9512  time: 0.3775  data_time: 0.0260  lr: 0.0018789  max_mem: 8976M
[12/10 05:20:06 d2.utils.events]:  eta: 0:45:27  iter: 2739  total_loss: 3.83  loss_sem_seg: 1.908  loss_center: 0.6427  loss_offset: 0.9045  time: 0.3775  data_time: 0.0263  lr: 0.0018743  max_mem: 8976M
[12/10 05:20:14 d2.utils.events]:  eta: 0:45:19  iter: 2759  total_loss: 3.906  loss_sem_seg: 1.885  loss_center: 0.9413  loss_offset: 0.9608  time: 0.3775  data_time: 0.0257  lr: 0.0018696  max_mem: 8976M
[12/10 05:20:21 d2.utils.events]:  eta: 0:45:11  iter: 2779  total_loss: 3.845  loss_sem_seg: 2.004  loss_center: 0.6502  loss_offset: 0.9571  time: 0.3775  data_time: 0.0275  lr: 0.001865  max_mem: 8976M
[12/10 05:20:29 d2.utils.events]:  eta: 0:45:04  iter: 2799  total_loss: 3.502  loss_sem_seg: 1.871  loss_center: 0.6213  loss_offset: 0.8618  time: 0.3775  data_time: 0.0264  lr: 0.0018603  max_mem: 8976M
[12/10 05:20:36 d2.utils.events]:  eta: 0:44:56  iter: 2819  total_loss: 3.458  loss_sem_seg: 1.95  loss_center: 0.7088  loss_offset: 0.8876  time: 0.3774  data_time: 0.0257  lr: 0.0018557  max_mem: 8976M
[12/10 05:20:44 d2.utils.events]:  eta: 0:44:49  iter: 2839  total_loss: 3.265  loss_sem_seg: 1.878  loss_center: 0.515  loss_offset: 0.8239  time: 0.3774  data_time: 0.0269  lr: 0.001851  max_mem: 8976M
[12/10 05:20:51 d2.utils.events]:  eta: 0:44:42  iter: 2859  total_loss: 3.454  loss_sem_seg: 1.845  loss_center: 0.6972  loss_offset: 1.041  time: 0.3774  data_time: 0.0271  lr: 0.0018464  max_mem: 8976M
[12/10 05:20:59 d2.utils.events]:  eta: 0:44:34  iter: 2879  total_loss: 3.913  loss_sem_seg: 1.959  loss_center: 0.7044  loss_offset: 1.017  time: 0.3774  data_time: 0.0246  lr: 0.0018417  max_mem: 8976M
[12/10 05:21:06 d2.utils.events]:  eta: 0:44:27  iter: 2899  total_loss: 3.76  loss_sem_seg: 2.031  loss_center: 0.7317  loss_offset: 0.9587  time: 0.3774  data_time: 0.0259  lr: 0.0018371  max_mem: 8976M
[12/10 05:21:14 d2.utils.events]:  eta: 0:44:19  iter: 2919  total_loss: 3.949  loss_sem_seg: 2.14  loss_center: 0.6762  loss_offset: 0.9317  time: 0.3774  data_time: 0.0261  lr: 0.0018324  max_mem: 8976M
[12/10 05:21:21 d2.utils.events]:  eta: 0:44:11  iter: 2939  total_loss: 3.387  loss_sem_seg: 1.894  loss_center: 0.743  loss_offset: 0.9625  time: 0.3774  data_time: 0.0259  lr: 0.0018278  max_mem: 8976M
[12/10 05:21:29 d2.utils.events]:  eta: 0:44:04  iter: 2959  total_loss: 3.53  loss_sem_seg: 2.029  loss_center: 0.6836  loss_offset: 0.8903  time: 0.3774  data_time: 0.0257  lr: 0.0018231  max_mem: 8976M
[12/10 05:21:37 d2.utils.events]:  eta: 0:43:56  iter: 2979  total_loss: 3.349  loss_sem_seg: 1.663  loss_center: 0.6821  loss_offset: 0.8949  time: 0.3773  data_time: 0.0261  lr: 0.0018184  max_mem: 8976M
[12/10 05:21:44 d2.utils.events]:  eta: 0:43:48  iter: 2999  total_loss: 3.485  loss_sem_seg: 1.688  loss_center: 0.6544  loss_offset: 1.015  time: 0.3773  data_time: 0.0250  lr: 0.0018138  max_mem: 8976M
[12/10 05:21:52 d2.utils.events]:  eta: 0:43:40  iter: 3019  total_loss: 3.53  loss_sem_seg: 1.81  loss_center: 0.6748  loss_offset: 1.006  time: 0.3773  data_time: 0.0258  lr: 0.0018091  max_mem: 8976M
[12/10 05:21:59 d2.utils.events]:  eta: 0:43:33  iter: 3039  total_loss: 3.262  loss_sem_seg: 1.751  loss_center: 0.5654  loss_offset: 0.9771  time: 0.3773  data_time: 0.0264  lr: 0.0018044  max_mem: 8976M
[12/10 05:22:07 d2.utils.events]:  eta: 0:43:25  iter: 3059  total_loss: 3.663  loss_sem_seg: 1.913  loss_center: 0.7208  loss_offset: 0.9452  time: 0.3773  data_time: 0.0264  lr: 0.0017998  max_mem: 8976M
[12/10 05:22:14 d2.utils.events]:  eta: 0:43:18  iter: 3079  total_loss: 3.568  loss_sem_seg: 1.932  loss_center: 0.611  loss_offset: 0.9688  time: 0.3773  data_time: 0.0264  lr: 0.0017951  max_mem: 8976M
[12/10 05:22:22 d2.utils.events]:  eta: 0:43:10  iter: 3099  total_loss: 3.487  loss_sem_seg: 1.932  loss_center: 0.7342  loss_offset: 0.8865  time: 0.3773  data_time: 0.0270  lr: 0.0017904  max_mem: 8976M
[12/10 05:22:29 d2.utils.events]:  eta: 0:43:03  iter: 3119  total_loss: 3.808  loss_sem_seg: 1.965  loss_center: 0.63  loss_offset: 0.9381  time: 0.3773  data_time: 0.0271  lr: 0.0017858  max_mem: 8976M
[12/10 05:22:37 d2.utils.events]:  eta: 0:42:55  iter: 3139  total_loss: 3.838  loss_sem_seg: 2.023  loss_center: 0.6081  loss_offset: 0.9731  time: 0.3773  data_time: 0.0240  lr: 0.0017811  max_mem: 8976M
[12/10 05:22:44 d2.utils.events]:  eta: 0:42:47  iter: 3159  total_loss: 3.486  loss_sem_seg: 1.956  loss_center: 0.5833  loss_offset: 0.9272  time: 0.3772  data_time: 0.0268  lr: 0.0017764  max_mem: 8976M
[12/10 05:22:52 d2.utils.events]:  eta: 0:42:40  iter: 3179  total_loss: 3.348  loss_sem_seg: 1.932  loss_center: 0.4898  loss_offset: 0.959  time: 0.3773  data_time: 0.0258  lr: 0.0017718  max_mem: 8976M
[12/10 05:22:59 d2.utils.events]:  eta: 0:42:32  iter: 3199  total_loss: 3.767  loss_sem_seg: 2.031  loss_center: 0.7037  loss_offset: 1.066  time: 0.3773  data_time: 0.0267  lr: 0.0017671  max_mem: 8976M
[12/10 05:23:07 d2.utils.events]:  eta: 0:42:25  iter: 3219  total_loss: 3.611  loss_sem_seg: 1.862  loss_center: 0.7046  loss_offset: 0.8508  time: 0.3773  data_time: 0.0273  lr: 0.0017624  max_mem: 8976M
[12/10 05:23:15 d2.utils.events]:  eta: 0:42:18  iter: 3239  total_loss: 3.794  loss_sem_seg: 2.171  loss_center: 0.689  loss_offset: 0.918  time: 0.3773  data_time: 0.0265  lr: 0.0017577  max_mem: 8976M
[12/10 05:23:22 d2.utils.events]:  eta: 0:42:10  iter: 3259  total_loss: 3.455  loss_sem_seg: 1.735  loss_center: 0.6733  loss_offset: 0.8111  time: 0.3772  data_time: 0.0248  lr: 0.001753  max_mem: 8976M
[12/10 05:23:30 d2.utils.events]:  eta: 0:42:03  iter: 3279  total_loss: 3.123  loss_sem_seg: 1.677  loss_center: 0.5809  loss_offset: 0.8297  time: 0.3772  data_time: 0.0260  lr: 0.0017484  max_mem: 8976M
[12/10 05:23:37 d2.utils.events]:  eta: 0:41:55  iter: 3299  total_loss: 3.362  loss_sem_seg: 1.728  loss_center: 0.6132  loss_offset: 0.8911  time: 0.3772  data_time: 0.0260  lr: 0.0017437  max_mem: 8976M
[12/10 05:23:45 d2.utils.events]:  eta: 0:41:48  iter: 3319  total_loss: 3.482  loss_sem_seg: 1.761  loss_center: 0.6228  loss_offset: 0.7854  time: 0.3772  data_time: 0.0274  lr: 0.001739  max_mem: 8976M
[12/10 05:23:52 d2.utils.events]:  eta: 0:41:41  iter: 3339  total_loss: 3.611  loss_sem_seg: 1.893  loss_center: 0.6912  loss_offset: 0.9708  time: 0.3772  data_time: 0.0254  lr: 0.0017343  max_mem: 8976M
[12/10 05:24:00 d2.utils.events]:  eta: 0:41:33  iter: 3359  total_loss: 3.501  loss_sem_seg: 1.939  loss_center: 0.6206  loss_offset: 0.932  time: 0.3772  data_time: 0.0264  lr: 0.0017296  max_mem: 8976M
[12/10 05:24:07 d2.utils.events]:  eta: 0:41:26  iter: 3379  total_loss: 3.672  loss_sem_seg: 1.964  loss_center: 0.7263  loss_offset: 0.8845  time: 0.3772  data_time: 0.0266  lr: 0.0017249  max_mem: 8976M
[12/10 05:24:15 d2.utils.events]:  eta: 0:41:18  iter: 3399  total_loss: 3.367  loss_sem_seg: 1.749  loss_center: 0.5784  loss_offset: 1.015  time: 0.3772  data_time: 0.0262  lr: 0.0017202  max_mem: 8976M
[12/10 05:24:22 d2.utils.events]:  eta: 0:41:11  iter: 3419  total_loss: 3.612  loss_sem_seg: 1.927  loss_center: 0.7422  loss_offset: 0.9384  time: 0.3772  data_time: 0.0248  lr: 0.0017155  max_mem: 8976M
[12/10 05:24:30 d2.utils.events]:  eta: 0:41:03  iter: 3439  total_loss: 3.579  loss_sem_seg: 1.792  loss_center: 0.7416  loss_offset: 0.9451  time: 0.3772  data_time: 0.0280  lr: 0.0017109  max_mem: 8976M
[12/10 05:24:37 d2.utils.events]:  eta: 0:40:56  iter: 3459  total_loss: 3.348  loss_sem_seg: 1.649  loss_center: 0.6922  loss_offset: 0.856  time: 0.3772  data_time: 0.0259  lr: 0.0017062  max_mem: 8976M
[12/10 05:24:45 d2.utils.events]:  eta: 0:40:48  iter: 3479  total_loss: 3.526  loss_sem_seg: 1.842  loss_center: 0.7179  loss_offset: 0.918  time: 0.3772  data_time: 0.0272  lr: 0.0017015  max_mem: 8976M
[12/10 05:24:52 d2.utils.events]:  eta: 0:40:41  iter: 3499  total_loss: 3.437  loss_sem_seg: 1.902  loss_center: 0.5992  loss_offset: 0.8843  time: 0.3772  data_time: 0.0245  lr: 0.0016968  max_mem: 8976M
[12/10 05:25:00 d2.utils.events]:  eta: 0:40:33  iter: 3519  total_loss: 3.304  loss_sem_seg: 1.772  loss_center: 0.5731  loss_offset: 0.8521  time: 0.3771  data_time: 0.0266  lr: 0.0016921  max_mem: 8976M
[12/10 05:25:07 d2.utils.events]:  eta: 0:40:26  iter: 3539  total_loss: 3.497  loss_sem_seg: 1.913  loss_center: 0.6112  loss_offset: 1.066  time: 0.3771  data_time: 0.0271  lr: 0.0016874  max_mem: 8976M
[12/10 05:25:15 d2.utils.events]:  eta: 0:40:18  iter: 3559  total_loss: 3.382  loss_sem_seg: 1.831  loss_center: 0.5579  loss_offset: 0.9951  time: 0.3771  data_time: 0.0265  lr: 0.0016827  max_mem: 8976M
[12/10 05:25:22 d2.utils.events]:  eta: 0:40:11  iter: 3579  total_loss: 3.557  loss_sem_seg: 1.959  loss_center: 0.5547  loss_offset: 0.9234  time: 0.3771  data_time: 0.0258  lr: 0.001678  max_mem: 8976M
[12/10 05:25:30 d2.utils.events]:  eta: 0:40:04  iter: 3599  total_loss: 3.636  loss_sem_seg: 2.006  loss_center: 0.5745  loss_offset: 0.8739  time: 0.3771  data_time: 0.0265  lr: 0.0016733  max_mem: 8976M
[12/10 05:25:38 d2.utils.events]:  eta: 0:39:56  iter: 3619  total_loss: 3.605  loss_sem_seg: 1.827  loss_center: 0.5896  loss_offset: 0.9464  time: 0.3771  data_time: 0.0269  lr: 0.0016686  max_mem: 8976M
[12/10 05:25:45 d2.utils.events]:  eta: 0:39:49  iter: 3639  total_loss: 3.329  loss_sem_seg: 1.758  loss_center: 0.8184  loss_offset: 0.8143  time: 0.3771  data_time: 0.0249  lr: 0.0016638  max_mem: 8976M
[12/10 05:25:53 d2.utils.events]:  eta: 0:39:42  iter: 3659  total_loss: 3.52  loss_sem_seg: 1.942  loss_center: 0.6688  loss_offset: 1  time: 0.3771  data_time: 0.0257  lr: 0.0016591  max_mem: 8976M
[12/10 05:26:00 d2.utils.events]:  eta: 0:39:33  iter: 3679  total_loss: 3.299  loss_sem_seg: 1.832  loss_center: 0.5122  loss_offset: 1.114  time: 0.3771  data_time: 0.0263  lr: 0.0016544  max_mem: 8976M
[12/10 05:26:08 d2.utils.events]:  eta: 0:39:25  iter: 3699  total_loss: 3.051  loss_sem_seg: 1.622  loss_center: 0.566  loss_offset: 0.8618  time: 0.3771  data_time: 0.0247  lr: 0.0016497  max_mem: 8976M
[12/10 05:26:15 d2.utils.events]:  eta: 0:39:17  iter: 3719  total_loss: 3.404  loss_sem_seg: 1.719  loss_center: 0.5924  loss_offset: 0.8758  time: 0.3770  data_time: 0.0251  lr: 0.001645  max_mem: 8976M
[12/10 05:26:23 d2.utils.events]:  eta: 0:39:10  iter: 3739  total_loss: 3.219  loss_sem_seg: 1.65  loss_center: 0.651  loss_offset: 0.9587  time: 0.3770  data_time: 0.0263  lr: 0.0016403  max_mem: 8976M
[12/10 05:26:30 d2.utils.events]:  eta: 0:39:03  iter: 3759  total_loss: 3.331  loss_sem_seg: 1.649  loss_center: 0.6135  loss_offset: 0.8258  time: 0.3770  data_time: 0.0280  lr: 0.0016356  max_mem: 8976M
[12/10 05:26:38 d2.utils.events]:  eta: 0:38:55  iter: 3779  total_loss: 3.223  loss_sem_seg: 1.734  loss_center: 0.5668  loss_offset: 0.8728  time: 0.3770  data_time: 0.0275  lr: 0.0016309  max_mem: 8976M
[12/10 05:26:45 d2.utils.events]:  eta: 0:38:47  iter: 3799  total_loss: 3.283  loss_sem_seg: 1.641  loss_center: 0.5364  loss_offset: 0.9215  time: 0.3770  data_time: 0.0253  lr: 0.0016261  max_mem: 8976M
[12/10 05:26:53 d2.utils.events]:  eta: 0:38:40  iter: 3819  total_loss: 3.856  loss_sem_seg: 1.948  loss_center: 0.7161  loss_offset: 0.9624  time: 0.3770  data_time: 0.0254  lr: 0.0016214  max_mem: 8976M
[12/10 05:27:00 d2.utils.events]:  eta: 0:38:33  iter: 3839  total_loss: 3.527  loss_sem_seg: 1.925  loss_center: 0.6268  loss_offset: 0.9277  time: 0.3770  data_time: 0.0270  lr: 0.0016167  max_mem: 8976M
[12/10 05:27:08 d2.utils.events]:  eta: 0:38:25  iter: 3859  total_loss: 3.59  loss_sem_seg: 2.099  loss_center: 0.6498  loss_offset: 0.8365  time: 0.3770  data_time: 0.0251  lr: 0.001612  max_mem: 8976M
[12/10 05:27:15 d2.utils.events]:  eta: 0:38:17  iter: 3879  total_loss: 3.274  loss_sem_seg: 1.802  loss_center: 0.6686  loss_offset: 0.793  time: 0.3770  data_time: 0.0275  lr: 0.0016072  max_mem: 8976M
[12/10 05:27:23 d2.utils.events]:  eta: 0:38:10  iter: 3899  total_loss: 3.238  loss_sem_seg: 1.704  loss_center: 0.643  loss_offset: 0.7798  time: 0.3770  data_time: 0.0270  lr: 0.0016025  max_mem: 8976M
[12/10 05:27:30 d2.utils.events]:  eta: 0:38:03  iter: 3919  total_loss: 3.426  loss_sem_seg: 1.905  loss_center: 0.6449  loss_offset: 1.018  time: 0.3770  data_time: 0.0267  lr: 0.0015978  max_mem: 8976M
[12/10 05:27:38 d2.utils.events]:  eta: 0:37:55  iter: 3939  total_loss: 3.542  loss_sem_seg: 1.662  loss_center: 0.6584  loss_offset: 0.8715  time: 0.3770  data_time: 0.0262  lr: 0.0015931  max_mem: 8976M
[12/10 05:27:45 d2.utils.events]:  eta: 0:37:48  iter: 3959  total_loss: 3.377  loss_sem_seg: 1.837  loss_center: 0.6492  loss_offset: 0.9176  time: 0.3770  data_time: 0.0260  lr: 0.0015883  max_mem: 8976M
[12/10 05:27:53 d2.utils.events]:  eta: 0:37:40  iter: 3979  total_loss: 3.221  loss_sem_seg: 1.731  loss_center: 0.6225  loss_offset: 0.7845  time: 0.3770  data_time: 0.0293  lr: 0.0015836  max_mem: 8976M
[12/10 05:28:01 d2.utils.events]:  eta: 0:37:33  iter: 3999  total_loss: 3.281  loss_sem_seg: 1.811  loss_center: 0.6533  loss_offset: 0.8703  time: 0.3770  data_time: 0.0244  lr: 0.0015789  max_mem: 8976M
[12/10 05:28:08 d2.utils.events]:  eta: 0:37:26  iter: 4019  total_loss: 3.524  loss_sem_seg: 1.843  loss_center: 0.5903  loss_offset: 0.8706  time: 0.3770  data_time: 0.0273  lr: 0.0015741  max_mem: 8976M
[12/10 05:28:16 d2.utils.events]:  eta: 0:37:19  iter: 4039  total_loss: 3.156  loss_sem_seg: 1.631  loss_center: 0.7167  loss_offset: 0.8307  time: 0.3770  data_time: 0.0286  lr: 0.0015694  max_mem: 8976M
[12/10 05:28:23 d2.utils.events]:  eta: 0:37:11  iter: 4059  total_loss: 3.482  loss_sem_seg: 1.742  loss_center: 0.6442  loss_offset: 0.8722  time: 0.3770  data_time: 0.0251  lr: 0.0015646  max_mem: 8976M
[12/10 05:28:31 d2.utils.events]:  eta: 0:37:03  iter: 4079  total_loss: 3.368  loss_sem_seg: 1.736  loss_center: 0.627  loss_offset: 0.8494  time: 0.3770  data_time: 0.0258  lr: 0.0015599  max_mem: 8976M
[12/10 05:28:38 d2.utils.events]:  eta: 0:36:56  iter: 4099  total_loss: 3.327  loss_sem_seg: 1.655  loss_center: 0.7833  loss_offset: 0.8477  time: 0.3770  data_time: 0.0259  lr: 0.0015552  max_mem: 8976M
[12/10 05:28:46 d2.utils.events]:  eta: 0:36:48  iter: 4119  total_loss: 3.496  loss_sem_seg: 1.551  loss_center: 0.7672  loss_offset: 0.9025  time: 0.3770  data_time: 0.0262  lr: 0.0015504  max_mem: 8976M
[12/10 05:28:53 d2.utils.events]:  eta: 0:36:42  iter: 4139  total_loss: 3.697  loss_sem_seg: 2.055  loss_center: 0.6079  loss_offset: 1.096  time: 0.3770  data_time: 0.0264  lr: 0.0015457  max_mem: 8976M
[12/10 05:29:01 d2.utils.events]:  eta: 0:36:34  iter: 4159  total_loss: 3.537  loss_sem_seg: 1.967  loss_center: 0.575  loss_offset: 0.8905  time: 0.3769  data_time: 0.0258  lr: 0.0015409  max_mem: 8976M
[12/10 05:29:08 d2.utils.events]:  eta: 0:36:26  iter: 4179  total_loss: 3.29  loss_sem_seg: 1.701  loss_center: 0.632  loss_offset: 0.8918  time: 0.3769  data_time: 0.0269  lr: 0.0015362  max_mem: 8976M
[12/10 05:29:16 d2.utils.events]:  eta: 0:36:18  iter: 4199  total_loss: 3.249  loss_sem_seg: 1.801  loss_center: 0.6975  loss_offset: 0.8498  time: 0.3769  data_time: 0.0266  lr: 0.0015314  max_mem: 8976M
[12/10 05:29:23 d2.utils.events]:  eta: 0:36:11  iter: 4219  total_loss: 3.521  loss_sem_seg: 1.961  loss_center: 0.6746  loss_offset: 0.976  time: 0.3769  data_time: 0.0262  lr: 0.0015267  max_mem: 8976M
[12/10 05:29:31 d2.utils.events]:  eta: 0:36:02  iter: 4239  total_loss: 3.632  loss_sem_seg: 1.851  loss_center: 0.6423  loss_offset: 0.9081  time: 0.3769  data_time: 0.0263  lr: 0.0015219  max_mem: 8976M
[12/10 05:29:38 d2.utils.events]:  eta: 0:35:54  iter: 4259  total_loss: 3.414  loss_sem_seg: 1.845  loss_center: 0.6556  loss_offset: 0.851  time: 0.3769  data_time: 0.0258  lr: 0.0015172  max_mem: 8976M
[12/10 05:29:46 d2.utils.events]:  eta: 0:35:47  iter: 4279  total_loss: 3.205  loss_sem_seg: 1.618  loss_center: 0.5639  loss_offset: 0.8617  time: 0.3769  data_time: 0.0266  lr: 0.0015124  max_mem: 8976M
[12/10 05:29:54 d2.utils.events]:  eta: 0:35:40  iter: 4299  total_loss: 3.412  loss_sem_seg: 1.925  loss_center: 0.5607  loss_offset: 0.8698  time: 0.3769  data_time: 0.0273  lr: 0.0015076  max_mem: 8976M
[12/10 05:30:01 d2.utils.events]:  eta: 0:35:33  iter: 4319  total_loss: 3.758  loss_sem_seg: 2.165  loss_center: 0.5418  loss_offset: 1.009  time: 0.3769  data_time: 0.0266  lr: 0.0015029  max_mem: 8976M
[12/10 05:30:09 d2.utils.events]:  eta: 0:35:25  iter: 4339  total_loss: 3.057  loss_sem_seg: 1.573  loss_center: 0.7432  loss_offset: 0.8308  time: 0.3769  data_time: 0.0254  lr: 0.0014981  max_mem: 8976M
[12/10 05:30:16 d2.utils.events]:  eta: 0:35:18  iter: 4359  total_loss: 3.581  loss_sem_seg: 1.905  loss_center: 0.5772  loss_offset: 0.9199  time: 0.3769  data_time: 0.0257  lr: 0.0014933  max_mem: 8976M
[12/10 05:30:24 d2.utils.events]:  eta: 0:35:10  iter: 4379  total_loss: 3.379  loss_sem_seg: 1.709  loss_center: 0.7309  loss_offset: 0.8359  time: 0.3769  data_time: 0.0259  lr: 0.0014886  max_mem: 8976M
[12/10 05:30:31 d2.utils.events]:  eta: 0:35:02  iter: 4399  total_loss: 3.476  loss_sem_seg: 1.782  loss_center: 0.7073  loss_offset: 0.8571  time: 0.3769  data_time: 0.0269  lr: 0.0014838  max_mem: 8976M
[12/10 05:30:39 d2.utils.events]:  eta: 0:34:55  iter: 4419  total_loss: 3.346  loss_sem_seg: 1.764  loss_center: 0.5922  loss_offset: 0.8654  time: 0.3769  data_time: 0.0263  lr: 0.001479  max_mem: 8976M
[12/10 05:30:46 d2.utils.events]:  eta: 0:34:47  iter: 4439  total_loss: 3.084  loss_sem_seg: 1.707  loss_center: 0.6145  loss_offset: 0.8413  time: 0.3769  data_time: 0.0262  lr: 0.0014743  max_mem: 8976M
[12/10 05:30:54 d2.utils.events]:  eta: 0:34:40  iter: 4459  total_loss: 3.155  loss_sem_seg: 1.693  loss_center: 0.6852  loss_offset: 0.8415  time: 0.3769  data_time: 0.0260  lr: 0.0014695  max_mem: 8976M
[12/10 05:31:01 d2.utils.events]:  eta: 0:34:32  iter: 4479  total_loss: 3.408  loss_sem_seg: 1.812  loss_center: 0.5934  loss_offset: 0.9092  time: 0.3769  data_time: 0.0262  lr: 0.0014647  max_mem: 8976M
[12/10 05:31:09 d2.utils.events]:  eta: 0:34:25  iter: 4499  total_loss: 2.995  loss_sem_seg: 1.569  loss_center: 0.4624  loss_offset: 0.9375  time: 0.3769  data_time: 0.0251  lr: 0.0014599  max_mem: 8976M
[12/10 05:31:16 d2.utils.events]:  eta: 0:34:17  iter: 4519  total_loss: 3.242  loss_sem_seg: 1.685  loss_center: 0.6477  loss_offset: 0.857  time: 0.3769  data_time: 0.0258  lr: 0.0014552  max_mem: 8976M
[12/10 05:31:24 d2.utils.events]:  eta: 0:34:10  iter: 4539  total_loss: 3.309  loss_sem_seg: 1.725  loss_center: 0.7504  loss_offset: 0.9234  time: 0.3769  data_time: 0.0251  lr: 0.0014504  max_mem: 8976M
[12/10 05:31:31 d2.utils.events]:  eta: 0:34:02  iter: 4559  total_loss: 3.497  loss_sem_seg: 1.908  loss_center: 0.4469  loss_offset: 0.8994  time: 0.3769  data_time: 0.0273  lr: 0.0014456  max_mem: 8976M
[12/10 05:31:39 d2.utils.events]:  eta: 0:33:53  iter: 4579  total_loss: 3.216  loss_sem_seg: 1.652  loss_center: 0.5556  loss_offset: 0.8959  time: 0.3769  data_time: 0.0250  lr: 0.0014408  max_mem: 8976M
[12/10 05:31:46 d2.utils.events]:  eta: 0:33:45  iter: 4599  total_loss: 3.342  loss_sem_seg: 1.652  loss_center: 0.6207  loss_offset: 1.053  time: 0.3769  data_time: 0.0278  lr: 0.001436  max_mem: 8976M
[12/10 05:31:54 d2.utils.events]:  eta: 0:33:38  iter: 4619  total_loss: 3.28  loss_sem_seg: 1.703  loss_center: 0.7469  loss_offset: 0.8164  time: 0.3768  data_time: 0.0264  lr: 0.0014313  max_mem: 8976M
[12/10 05:32:01 d2.utils.events]:  eta: 0:33:30  iter: 4639  total_loss: 3.472  loss_sem_seg: 1.702  loss_center: 0.6005  loss_offset: 0.8681  time: 0.3768  data_time: 0.0260  lr: 0.0014265  max_mem: 8976M
[12/10 05:32:09 d2.utils.events]:  eta: 0:33:22  iter: 4659  total_loss: 3.179  loss_sem_seg: 1.719  loss_center: 0.5171  loss_offset: 0.8314  time: 0.3768  data_time: 0.0284  lr: 0.0014217  max_mem: 8976M
[12/10 05:32:17 d2.utils.events]:  eta: 0:33:15  iter: 4679  total_loss: 3.211  loss_sem_seg: 1.687  loss_center: 0.6591  loss_offset: 0.9205  time: 0.3768  data_time: 0.0249  lr: 0.0014169  max_mem: 8976M
[12/10 05:32:24 d2.utils.events]:  eta: 0:33:09  iter: 4699  total_loss: 3.423  loss_sem_seg: 1.858  loss_center: 0.6023  loss_offset: 0.8552  time: 0.3768  data_time: 0.0263  lr: 0.0014121  max_mem: 8976M
[12/10 05:32:32 d2.utils.events]:  eta: 0:33:01  iter: 4719  total_loss: 3.587  loss_sem_seg: 1.902  loss_center: 0.7167  loss_offset: 0.8847  time: 0.3768  data_time: 0.0270  lr: 0.0014073  max_mem: 8976M
[12/10 05:32:39 d2.utils.events]:  eta: 0:32:53  iter: 4739  total_loss: 3.146  loss_sem_seg: 1.575  loss_center: 0.6703  loss_offset: 0.8355  time: 0.3768  data_time: 0.0262  lr: 0.0014025  max_mem: 8976M
[12/10 05:32:47 d2.utils.events]:  eta: 0:32:45  iter: 4759  total_loss: 3.456  loss_sem_seg: 1.542  loss_center: 0.7243  loss_offset: 0.9411  time: 0.3768  data_time: 0.0257  lr: 0.0013977  max_mem: 8976M
[12/10 05:32:54 d2.utils.events]:  eta: 0:32:38  iter: 4779  total_loss: 3.232  loss_sem_seg: 1.681  loss_center: 0.5308  loss_offset: 0.9244  time: 0.3768  data_time: 0.0257  lr: 0.0013929  max_mem: 8976M
[12/10 05:33:02 d2.utils.events]:  eta: 0:32:31  iter: 4799  total_loss: 3.461  loss_sem_seg: 1.834  loss_center: 0.5849  loss_offset: 0.8932  time: 0.3768  data_time: 0.0271  lr: 0.0013881  max_mem: 8976M
[12/10 05:33:09 d2.utils.events]:  eta: 0:32:23  iter: 4819  total_loss: 3.295  loss_sem_seg: 1.725  loss_center: 0.6154  loss_offset: 0.9213  time: 0.3768  data_time: 0.0265  lr: 0.0013833  max_mem: 8976M
[12/10 05:33:17 d2.utils.events]:  eta: 0:32:16  iter: 4839  total_loss: 3.219  loss_sem_seg: 1.739  loss_center: 0.5127  loss_offset: 0.808  time: 0.3768  data_time: 0.0267  lr: 0.0013785  max_mem: 8976M
[12/10 05:33:24 d2.utils.events]:  eta: 0:32:08  iter: 4859  total_loss: 3.255  loss_sem_seg: 1.623  loss_center: 0.8349  loss_offset: 0.9184  time: 0.3768  data_time: 0.0248  lr: 0.0013737  max_mem: 8976M
[12/10 05:33:32 d2.utils.events]:  eta: 0:32:00  iter: 4879  total_loss: 3.406  loss_sem_seg: 1.768  loss_center: 0.6832  loss_offset: 0.907  time: 0.3768  data_time: 0.0268  lr: 0.0013689  max_mem: 8976M
[12/10 05:33:39 d2.utils.events]:  eta: 0:31:53  iter: 4899  total_loss: 3.139  loss_sem_seg: 1.621  loss_center: 0.6975  loss_offset: 0.8446  time: 0.3768  data_time: 0.0243  lr: 0.001364  max_mem: 8976M
[12/10 05:33:47 d2.utils.events]:  eta: 0:31:45  iter: 4919  total_loss: 3.123  loss_sem_seg: 1.605  loss_center: 0.7066  loss_offset: 0.7731  time: 0.3768  data_time: 0.0271  lr: 0.0013592  max_mem: 8976M
[12/10 05:33:54 d2.utils.events]:  eta: 0:31:37  iter: 4939  total_loss: 3.19  loss_sem_seg: 1.687  loss_center: 0.7335  loss_offset: 0.7612  time: 0.3768  data_time: 0.0252  lr: 0.0013544  max_mem: 8976M
[12/10 05:34:02 d2.utils.events]:  eta: 0:31:30  iter: 4959  total_loss: 3.268  loss_sem_seg: 1.704  loss_center: 0.5667  loss_offset: 0.962  time: 0.3768  data_time: 0.0254  lr: 0.0013496  max_mem: 8976M
[12/10 05:34:09 d2.utils.events]:  eta: 0:31:22  iter: 4979  total_loss: 3.333  loss_sem_seg: 1.849  loss_center: 0.6116  loss_offset: 0.9187  time: 0.3767  data_time: 0.0270  lr: 0.0013448  max_mem: 8976M
[12/10 05:34:17 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0004999.pth
[12/10 05:34:18 d2.utils.events]:  eta: 0:31:14  iter: 4999  total_loss: 3.214  loss_sem_seg: 1.745  loss_center: 0.7159  loss_offset: 0.8041  time: 0.3767  data_time: 0.0251  lr: 0.00134  max_mem: 8976M
[12/10 05:34:26 d2.utils.events]:  eta: 0:31:07  iter: 5019  total_loss: 3.399  loss_sem_seg: 1.641  loss_center: 0.5438  loss_offset: 0.8707  time: 0.3767  data_time: 0.0261  lr: 0.0013351  max_mem: 8976M
[12/10 05:34:33 d2.utils.events]:  eta: 0:30:59  iter: 5039  total_loss: 3.276  loss_sem_seg: 1.778  loss_center: 0.7293  loss_offset: 0.8198  time: 0.3767  data_time: 0.0256  lr: 0.0013303  max_mem: 8976M
[12/10 05:34:41 d2.utils.events]:  eta: 0:30:51  iter: 5059  total_loss: 3.51  loss_sem_seg: 1.568  loss_center: 0.6605  loss_offset: 0.9378  time: 0.3767  data_time: 0.0281  lr: 0.0013255  max_mem: 8976M
[12/10 05:34:48 d2.utils.events]:  eta: 0:30:44  iter: 5079  total_loss: 3.404  loss_sem_seg: 1.96  loss_center: 0.7035  loss_offset: 0.7563  time: 0.3767  data_time: 0.0237  lr: 0.0013207  max_mem: 8976M
[12/10 05:34:56 d2.utils.events]:  eta: 0:30:36  iter: 5099  total_loss: 3.335  loss_sem_seg: 1.778  loss_center: 0.7062  loss_offset: 0.906  time: 0.3767  data_time: 0.0260  lr: 0.0013158  max_mem: 8976M
[12/10 05:35:03 d2.utils.events]:  eta: 0:30:29  iter: 5119  total_loss: 3.422  loss_sem_seg: 1.792  loss_center: 0.6378  loss_offset: 0.9046  time: 0.3767  data_time: 0.0263  lr: 0.001311  max_mem: 8976M
[12/10 05:35:11 d2.utils.events]:  eta: 0:30:21  iter: 5139  total_loss: 3.475  loss_sem_seg: 1.748  loss_center: 0.6852  loss_offset: 0.8362  time: 0.3767  data_time: 0.0263  lr: 0.0013062  max_mem: 8976M
[12/10 05:35:18 d2.utils.events]:  eta: 0:30:14  iter: 5159  total_loss: 3.094  loss_sem_seg: 1.527  loss_center: 0.584  loss_offset: 0.9017  time: 0.3767  data_time: 0.0282  lr: 0.0013013  max_mem: 8976M
[12/10 05:35:26 d2.utils.events]:  eta: 0:30:07  iter: 5179  total_loss: 3.179  loss_sem_seg: 1.508  loss_center: 0.5788  loss_offset: 0.8756  time: 0.3767  data_time: 0.0267  lr: 0.0012965  max_mem: 8976M
[12/10 05:35:33 d2.utils.events]:  eta: 0:29:59  iter: 5199  total_loss: 3.543  loss_sem_seg: 1.817  loss_center: 0.6793  loss_offset: 0.6919  time: 0.3767  data_time: 0.0257  lr: 0.0012916  max_mem: 8976M
[12/10 05:35:41 d2.utils.events]:  eta: 0:29:51  iter: 5219  total_loss: 2.933  loss_sem_seg: 1.575  loss_center: 0.6066  loss_offset: 0.9138  time: 0.3767  data_time: 0.0260  lr: 0.0012868  max_mem: 8976M
[12/10 05:35:48 d2.utils.events]:  eta: 0:29:44  iter: 5239  total_loss: 3.017  loss_sem_seg: 1.429  loss_center: 0.6493  loss_offset: 0.8843  time: 0.3767  data_time: 0.0271  lr: 0.0012819  max_mem: 8976M
[12/10 05:35:56 d2.utils.events]:  eta: 0:29:36  iter: 5259  total_loss: 3.112  loss_sem_seg: 1.655  loss_center: 0.5256  loss_offset: 0.8868  time: 0.3767  data_time: 0.0274  lr: 0.0012771  max_mem: 8976M
[12/10 05:36:03 d2.utils.events]:  eta: 0:29:29  iter: 5279  total_loss: 3.133  loss_sem_seg: 1.49  loss_center: 0.6731  loss_offset: 0.7791  time: 0.3767  data_time: 0.0245  lr: 0.0012722  max_mem: 8976M
[12/10 05:36:11 d2.utils.events]:  eta: 0:29:21  iter: 5299  total_loss: 3.088  loss_sem_seg: 1.822  loss_center: 0.6363  loss_offset: 0.8326  time: 0.3767  data_time: 0.0272  lr: 0.0012674  max_mem: 8976M
[12/10 05:36:18 d2.utils.events]:  eta: 0:29:13  iter: 5319  total_loss: 3.538  loss_sem_seg: 1.742  loss_center: 0.7244  loss_offset: 0.8908  time: 0.3767  data_time: 0.0271  lr: 0.0012625  max_mem: 8976M
[12/10 05:36:26 d2.utils.events]:  eta: 0:29:06  iter: 5339  total_loss: 3.338  loss_sem_seg: 1.724  loss_center: 0.5132  loss_offset: 0.9556  time: 0.3767  data_time: 0.0251  lr: 0.0012577  max_mem: 8976M
[12/10 05:36:34 d2.utils.events]:  eta: 0:28:58  iter: 5359  total_loss: 3.48  loss_sem_seg: 1.534  loss_center: 0.7612  loss_offset: 0.8724  time: 0.3767  data_time: 0.0279  lr: 0.0012528  max_mem: 8976M
[12/10 05:36:41 d2.utils.events]:  eta: 0:28:51  iter: 5379  total_loss: 2.966  loss_sem_seg: 1.541  loss_center: 0.5985  loss_offset: 0.8071  time: 0.3767  data_time: 0.0273  lr: 0.001248  max_mem: 8976M
[12/10 05:36:49 d2.utils.events]:  eta: 0:28:43  iter: 5399  total_loss: 3.309  loss_sem_seg: 1.685  loss_center: 0.6944  loss_offset: 0.766  time: 0.3767  data_time: 0.0252  lr: 0.0012431  max_mem: 8976M
[12/10 05:36:56 d2.utils.events]:  eta: 0:28:36  iter: 5419  total_loss: 3.265  loss_sem_seg: 1.819  loss_center: 0.5753  loss_offset: 0.7525  time: 0.3767  data_time: 0.0263  lr: 0.0012382  max_mem: 8976M
[12/10 05:37:04 d2.utils.events]:  eta: 0:28:28  iter: 5439  total_loss: 2.973  loss_sem_seg: 1.633  loss_center: 0.6181  loss_offset: 0.8315  time: 0.3766  data_time: 0.0262  lr: 0.0012334  max_mem: 8976M
[12/10 05:37:11 d2.utils.events]:  eta: 0:28:21  iter: 5459  total_loss: 3.401  loss_sem_seg: 1.867  loss_center: 0.6719  loss_offset: 0.8902  time: 0.3766  data_time: 0.0255  lr: 0.0012285  max_mem: 8976M
[12/10 05:37:19 d2.utils.events]:  eta: 0:28:13  iter: 5479  total_loss: 3.228  loss_sem_seg: 1.743  loss_center: 0.5688  loss_offset: 0.8006  time: 0.3766  data_time: 0.0268  lr: 0.0012236  max_mem: 8976M
[12/10 05:37:26 d2.utils.events]:  eta: 0:28:06  iter: 5499  total_loss: 3.335  loss_sem_seg: 1.731  loss_center: 0.5512  loss_offset: 0.8458  time: 0.3766  data_time: 0.0248  lr: 0.0012188  max_mem: 8976M
[12/10 05:37:34 d2.utils.events]:  eta: 0:27:58  iter: 5519  total_loss: 3.085  loss_sem_seg: 1.437  loss_center: 0.5907  loss_offset: 0.8655  time: 0.3766  data_time: 0.0269  lr: 0.0012139  max_mem: 8976M
[12/10 05:37:41 d2.utils.events]:  eta: 0:27:51  iter: 5539  total_loss: 3.291  loss_sem_seg: 1.447  loss_center: 0.5471  loss_offset: 0.9084  time: 0.3766  data_time: 0.0262  lr: 0.001209  max_mem: 8976M
[12/10 05:37:49 d2.utils.events]:  eta: 0:27:43  iter: 5559  total_loss: 3.069  loss_sem_seg: 1.549  loss_center: 0.6027  loss_offset: 0.8841  time: 0.3766  data_time: 0.0265  lr: 0.0012041  max_mem: 8976M
[12/10 05:37:56 d2.utils.events]:  eta: 0:27:36  iter: 5579  total_loss: 3.172  loss_sem_seg: 1.778  loss_center: 0.5783  loss_offset: 0.8686  time: 0.3766  data_time: 0.0270  lr: 0.0011992  max_mem: 8976M
[12/10 05:38:04 d2.utils.events]:  eta: 0:27:28  iter: 5599  total_loss: 3.152  loss_sem_seg: 1.719  loss_center: 0.5639  loss_offset: 0.707  time: 0.3766  data_time: 0.0261  lr: 0.0011944  max_mem: 8976M
[12/10 05:38:11 d2.utils.events]:  eta: 0:27:21  iter: 5619  total_loss: 3.382  loss_sem_seg: 1.796  loss_center: 0.6058  loss_offset: 0.7928  time: 0.3766  data_time: 0.0259  lr: 0.0011895  max_mem: 8976M
[12/10 05:38:19 d2.utils.events]:  eta: 0:27:14  iter: 5639  total_loss: 3.026  loss_sem_seg: 1.685  loss_center: 0.6103  loss_offset: 0.8476  time: 0.3766  data_time: 0.0259  lr: 0.0011846  max_mem: 8976M
[12/10 05:38:26 d2.utils.events]:  eta: 0:27:06  iter: 5659  total_loss: 3.283  loss_sem_seg: 1.826  loss_center: 0.6053  loss_offset: 0.8524  time: 0.3766  data_time: 0.0268  lr: 0.0011797  max_mem: 8976M
[12/10 05:38:34 d2.utils.events]:  eta: 0:26:59  iter: 5679  total_loss: 3.217  loss_sem_seg: 1.797  loss_center: 0.6288  loss_offset: 0.792  time: 0.3766  data_time: 0.0270  lr: 0.0011748  max_mem: 8976M
[12/10 05:38:41 d2.utils.events]:  eta: 0:26:51  iter: 5699  total_loss: 3.108  loss_sem_seg: 1.665  loss_center: 0.5963  loss_offset: 0.8368  time: 0.3766  data_time: 0.0269  lr: 0.0011699  max_mem: 8976M
[12/10 05:38:49 d2.utils.events]:  eta: 0:26:44  iter: 5719  total_loss: 2.974  loss_sem_seg: 1.536  loss_center: 0.6341  loss_offset: 0.7883  time: 0.3766  data_time: 0.0259  lr: 0.001165  max_mem: 8976M
[12/10 05:38:56 d2.utils.events]:  eta: 0:26:36  iter: 5739  total_loss: 3.119  loss_sem_seg: 1.57  loss_center: 0.6492  loss_offset: 0.86  time: 0.3766  data_time: 0.0256  lr: 0.0011601  max_mem: 8976M
[12/10 05:39:04 d2.utils.events]:  eta: 0:26:28  iter: 5759  total_loss: 3.127  loss_sem_seg: 1.597  loss_center: 0.6426  loss_offset: 0.7575  time: 0.3766  data_time: 0.0250  lr: 0.0011552  max_mem: 8976M
[12/10 05:39:11 d2.utils.events]:  eta: 0:26:21  iter: 5779  total_loss: 2.836  loss_sem_seg: 1.473  loss_center: 0.5729  loss_offset: 0.7812  time: 0.3766  data_time: 0.0260  lr: 0.0011503  max_mem: 8976M
[12/10 05:39:19 d2.utils.events]:  eta: 0:26:13  iter: 5799  total_loss: 3.457  loss_sem_seg: 1.752  loss_center: 0.7631  loss_offset: 0.7207  time: 0.3766  data_time: 0.0295  lr: 0.0011454  max_mem: 8976M
[12/10 05:39:26 d2.utils.events]:  eta: 0:26:06  iter: 5819  total_loss: 3.226  loss_sem_seg: 1.499  loss_center: 0.7465  loss_offset: 0.8477  time: 0.3766  data_time: 0.0256  lr: 0.0011405  max_mem: 8976M
[12/10 05:39:34 d2.utils.events]:  eta: 0:25:58  iter: 5839  total_loss: 3.33  loss_sem_seg: 1.83  loss_center: 0.5038  loss_offset: 0.8268  time: 0.3766  data_time: 0.0276  lr: 0.0011356  max_mem: 8976M
[12/10 05:39:41 d2.utils.events]:  eta: 0:25:51  iter: 5859  total_loss: 3.392  loss_sem_seg: 1.84  loss_center: 0.6883  loss_offset: 0.8973  time: 0.3766  data_time: 0.0265  lr: 0.0011307  max_mem: 8976M
[12/10 05:39:49 d2.utils.events]:  eta: 0:25:44  iter: 5879  total_loss: 3.114  loss_sem_seg: 1.569  loss_center: 0.6062  loss_offset: 0.8318  time: 0.3766  data_time: 0.0267  lr: 0.0011258  max_mem: 8976M
[12/10 05:39:57 d2.utils.events]:  eta: 0:25:36  iter: 5899  total_loss: 3.035  loss_sem_seg: 1.67  loss_center: 0.5918  loss_offset: 0.7929  time: 0.3766  data_time: 0.0284  lr: 0.0011208  max_mem: 8976M
[12/10 05:40:04 d2.utils.events]:  eta: 0:25:28  iter: 5919  total_loss: 3.221  loss_sem_seg: 1.631  loss_center: 0.508  loss_offset: 0.9266  time: 0.3765  data_time: 0.0250  lr: 0.0011159  max_mem: 8976M
[12/10 05:40:12 d2.utils.events]:  eta: 0:25:21  iter: 5939  total_loss: 3.514  loss_sem_seg: 1.813  loss_center: 0.6467  loss_offset: 0.917  time: 0.3765  data_time: 0.0268  lr: 0.001111  max_mem: 8976M
[12/10 05:40:19 d2.utils.events]:  eta: 0:25:14  iter: 5959  total_loss: 3.13  loss_sem_seg: 1.692  loss_center: 0.6507  loss_offset: 0.8416  time: 0.3765  data_time: 0.0254  lr: 0.0011061  max_mem: 8976M
[12/10 05:40:27 d2.utils.events]:  eta: 0:25:07  iter: 5979  total_loss: 3.35  loss_sem_seg: 1.546  loss_center: 0.6708  loss_offset: 0.8927  time: 0.3765  data_time: 0.0259  lr: 0.0011011  max_mem: 8976M
[12/10 05:40:34 d2.utils.events]:  eta: 0:24:59  iter: 5999  total_loss: 3.254  loss_sem_seg: 1.727  loss_center: 0.5189  loss_offset: 0.9382  time: 0.3765  data_time: 0.0260  lr: 0.0010962  max_mem: 8976M
[12/10 05:40:42 d2.utils.events]:  eta: 0:24:52  iter: 6019  total_loss: 3.193  loss_sem_seg: 1.689  loss_center: 0.5468  loss_offset: 0.7849  time: 0.3765  data_time: 0.0250  lr: 0.0010913  max_mem: 8976M
[12/10 05:40:49 d2.utils.events]:  eta: 0:24:44  iter: 6039  total_loss: 3.077  loss_sem_seg: 1.661  loss_center: 0.6644  loss_offset: 0.7989  time: 0.3765  data_time: 0.0252  lr: 0.0010863  max_mem: 8976M
[12/10 05:40:57 d2.utils.events]:  eta: 0:24:37  iter: 6059  total_loss: 3.049  loss_sem_seg: 1.617  loss_center: 0.6538  loss_offset: 0.7532  time: 0.3765  data_time: 0.0272  lr: 0.0010814  max_mem: 8976M
[12/10 05:41:04 d2.utils.events]:  eta: 0:24:29  iter: 6079  total_loss: 3.262  loss_sem_seg: 1.698  loss_center: 0.6958  loss_offset: 0.7664  time: 0.3765  data_time: 0.0255  lr: 0.0010765  max_mem: 8976M
[12/10 05:41:12 d2.utils.events]:  eta: 0:24:22  iter: 6099  total_loss: 3.105  loss_sem_seg: 1.602  loss_center: 0.6125  loss_offset: 0.7864  time: 0.3765  data_time: 0.0271  lr: 0.0010715  max_mem: 8976M
[12/10 05:41:19 d2.utils.events]:  eta: 0:24:14  iter: 6119  total_loss: 2.996  loss_sem_seg: 1.672  loss_center: 0.6769  loss_offset: 0.6951  time: 0.3765  data_time: 0.0271  lr: 0.0010666  max_mem: 8976M
[12/10 05:41:27 d2.utils.events]:  eta: 0:24:07  iter: 6139  total_loss: 3.126  loss_sem_seg: 1.611  loss_center: 0.8434  loss_offset: 0.9071  time: 0.3765  data_time: 0.0253  lr: 0.0010616  max_mem: 8976M
[12/10 05:41:34 d2.utils.events]:  eta: 0:23:59  iter: 6159  total_loss: 3.207  loss_sem_seg: 1.79  loss_center: 0.549  loss_offset: 0.815  time: 0.3765  data_time: 0.0268  lr: 0.0010567  max_mem: 8976M
[12/10 05:41:42 d2.utils.events]:  eta: 0:23:51  iter: 6179  total_loss: 3.041  loss_sem_seg: 1.538  loss_center: 0.6164  loss_offset: 0.7469  time: 0.3765  data_time: 0.0264  lr: 0.0010517  max_mem: 8976M
[12/10 05:41:49 d2.utils.events]:  eta: 0:23:44  iter: 6199  total_loss: 2.947  loss_sem_seg: 1.64  loss_center: 0.6015  loss_offset: 0.751  time: 0.3765  data_time: 0.0270  lr: 0.0010468  max_mem: 8976M
[12/10 05:41:57 d2.utils.events]:  eta: 0:23:37  iter: 6219  total_loss: 3.123  loss_sem_seg: 1.646  loss_center: 0.5633  loss_offset: 0.7155  time: 0.3765  data_time: 0.0264  lr: 0.0010418  max_mem: 8976M
[12/10 05:42:04 d2.utils.events]:  eta: 0:23:29  iter: 6239  total_loss: 3.271  loss_sem_seg: 1.707  loss_center: 0.5809  loss_offset: 0.8984  time: 0.3765  data_time: 0.0268  lr: 0.0010368  max_mem: 8976M
[12/10 05:42:12 d2.utils.events]:  eta: 0:23:22  iter: 6259  total_loss: 3.161  loss_sem_seg: 1.629  loss_center: 0.7415  loss_offset: 0.7803  time: 0.3765  data_time: 0.0263  lr: 0.0010319  max_mem: 8976M
[12/10 05:42:19 d2.utils.events]:  eta: 0:23:14  iter: 6279  total_loss: 3.144  loss_sem_seg: 1.661  loss_center: 0.6243  loss_offset: 0.9719  time: 0.3765  data_time: 0.0273  lr: 0.0010269  max_mem: 8976M
[12/10 05:42:27 d2.utils.events]:  eta: 0:23:07  iter: 6299  total_loss: 3.055  loss_sem_seg: 1.515  loss_center: 0.6208  loss_offset: 0.7376  time: 0.3765  data_time: 0.0255  lr: 0.0010219  max_mem: 8976M
[12/10 05:42:35 d2.utils.events]:  eta: 0:23:00  iter: 6319  total_loss: 3.275  loss_sem_seg: 1.642  loss_center: 0.6799  loss_offset: 0.8104  time: 0.3765  data_time: 0.0269  lr: 0.001017  max_mem: 8976M
[12/10 05:42:42 d2.utils.events]:  eta: 0:22:52  iter: 6339  total_loss: 3.075  loss_sem_seg: 1.464  loss_center: 0.5462  loss_offset: 0.7785  time: 0.3765  data_time: 0.0259  lr: 0.001012  max_mem: 8976M
[12/10 05:42:50 d2.utils.events]:  eta: 0:22:45  iter: 6359  total_loss: 3.226  loss_sem_seg: 1.757  loss_center: 0.7528  loss_offset: 0.7767  time: 0.3765  data_time: 0.0269  lr: 0.001007  max_mem: 8976M
[12/10 05:42:57 d2.utils.events]:  eta: 0:22:37  iter: 6379  total_loss: 2.763  loss_sem_seg: 1.597  loss_center: 0.4981  loss_offset: 0.7402  time: 0.3765  data_time: 0.0267  lr: 0.001002  max_mem: 8976M
[12/10 05:43:05 d2.utils.events]:  eta: 0:22:30  iter: 6399  total_loss: 3.03  loss_sem_seg: 1.624  loss_center: 0.6232  loss_offset: 0.8879  time: 0.3765  data_time: 0.0270  lr: 0.00099706  max_mem: 8976M
[12/10 05:43:12 d2.utils.events]:  eta: 0:22:22  iter: 6419  total_loss: 3.064  loss_sem_seg: 1.503  loss_center: 0.4643  loss_offset: 0.8606  time: 0.3765  data_time: 0.0251  lr: 0.00099207  max_mem: 8976M
[12/10 05:43:20 d2.utils.events]:  eta: 0:22:15  iter: 6439  total_loss: 3.123  loss_sem_seg: 1.625  loss_center: 0.6401  loss_offset: 0.8237  time: 0.3765  data_time: 0.0262  lr: 0.00098709  max_mem: 8976M
[12/10 05:43:27 d2.utils.events]:  eta: 0:22:07  iter: 6459  total_loss: 3.206  loss_sem_seg: 1.672  loss_center: 0.6445  loss_offset: 0.8911  time: 0.3765  data_time: 0.0264  lr: 0.00098209  max_mem: 8976M
[12/10 05:43:35 d2.utils.events]:  eta: 0:22:00  iter: 6479  total_loss: 3.015  loss_sem_seg: 1.537  loss_center: 0.66  loss_offset: 0.7734  time: 0.3765  data_time: 0.0259  lr: 0.0009771  max_mem: 8976M
[12/10 05:43:42 d2.utils.events]:  eta: 0:21:52  iter: 6499  total_loss: 3.125  loss_sem_seg: 1.537  loss_center: 0.6877  loss_offset: 0.7679  time: 0.3765  data_time: 0.0261  lr: 0.0009721  max_mem: 8976M
[12/10 05:43:50 d2.utils.events]:  eta: 0:21:45  iter: 6519  total_loss: 2.747  loss_sem_seg: 1.519  loss_center: 0.5589  loss_offset: 0.7585  time: 0.3765  data_time: 0.0267  lr: 0.00096711  max_mem: 8976M
[12/10 05:43:57 d2.utils.events]:  eta: 0:21:37  iter: 6539  total_loss: 3.283  loss_sem_seg: 1.562  loss_center: 0.7947  loss_offset: 0.8189  time: 0.3765  data_time: 0.0258  lr: 0.0009621  max_mem: 8976M
[12/10 05:44:05 d2.utils.events]:  eta: 0:21:30  iter: 6559  total_loss: 3.074  loss_sem_seg: 1.518  loss_center: 0.6532  loss_offset: 0.7518  time: 0.3765  data_time: 0.0268  lr: 0.0009571  max_mem: 8976M
[12/10 05:44:12 d2.utils.events]:  eta: 0:21:22  iter: 6579  total_loss: 3.154  loss_sem_seg: 1.527  loss_center: 0.6508  loss_offset: 0.8158  time: 0.3765  data_time: 0.0250  lr: 0.00095209  max_mem: 8976M
[12/10 05:44:20 d2.utils.events]:  eta: 0:21:15  iter: 6599  total_loss: 3.188  loss_sem_seg: 1.652  loss_center: 0.6842  loss_offset: 0.8243  time: 0.3765  data_time: 0.0269  lr: 0.00094708  max_mem: 8976M
[12/10 05:44:28 d2.utils.events]:  eta: 0:21:07  iter: 6619  total_loss: 3.071  loss_sem_seg: 1.571  loss_center: 0.794  loss_offset: 0.8093  time: 0.3765  data_time: 0.0260  lr: 0.00094206  max_mem: 8976M
[12/10 05:44:35 d2.utils.events]:  eta: 0:21:00  iter: 6639  total_loss: 2.968  loss_sem_seg: 1.468  loss_center: 0.5335  loss_offset: 0.79  time: 0.3765  data_time: 0.0271  lr: 0.00093705  max_mem: 8976M
[12/10 05:44:43 d2.utils.events]:  eta: 0:20:53  iter: 6659  total_loss: 3.373  loss_sem_seg: 1.812  loss_center: 0.6201  loss_offset: 0.9023  time: 0.3765  data_time: 0.0280  lr: 0.00093203  max_mem: 8976M
[12/10 05:44:50 d2.utils.events]:  eta: 0:20:45  iter: 6679  total_loss: 3.155  loss_sem_seg: 1.495  loss_center: 0.715  loss_offset: 0.726  time: 0.3765  data_time: 0.0266  lr: 0.000927  max_mem: 8976M
[12/10 05:44:58 d2.utils.events]:  eta: 0:20:38  iter: 6699  total_loss: 3.424  loss_sem_seg: 1.779  loss_center: 0.7442  loss_offset: 0.8486  time: 0.3765  data_time: 0.0258  lr: 0.00092198  max_mem: 8976M
[12/10 05:45:05 d2.utils.events]:  eta: 0:20:30  iter: 6719  total_loss: 3.192  loss_sem_seg: 1.674  loss_center: 0.5427  loss_offset: 0.7717  time: 0.3765  data_time: 0.0262  lr: 0.00091695  max_mem: 8976M
[12/10 05:45:13 d2.utils.events]:  eta: 0:20:23  iter: 6739  total_loss: 3.221  loss_sem_seg: 1.639  loss_center: 0.7063  loss_offset: 0.8745  time: 0.3765  data_time: 0.0268  lr: 0.00091192  max_mem: 8976M
[12/10 05:45:20 d2.utils.events]:  eta: 0:20:15  iter: 6759  total_loss: 2.949  loss_sem_seg: 1.617  loss_center: 0.5718  loss_offset: 0.7622  time: 0.3765  data_time: 0.0264  lr: 0.00090688  max_mem: 8976M
[12/10 05:45:28 d2.utils.events]:  eta: 0:20:08  iter: 6779  total_loss: 2.641  loss_sem_seg: 1.262  loss_center: 0.6199  loss_offset: 0.7596  time: 0.3765  data_time: 0.0249  lr: 0.00090184  max_mem: 8976M
[12/10 05:45:35 d2.utils.events]:  eta: 0:20:00  iter: 6799  total_loss: 3.173  loss_sem_seg: 1.663  loss_center: 0.5711  loss_offset: 0.8926  time: 0.3765  data_time: 0.0255  lr: 0.0008968  max_mem: 8976M
[12/10 05:45:43 d2.utils.events]:  eta: 0:19:53  iter: 6819  total_loss: 3.012  loss_sem_seg: 1.492  loss_center: 0.6898  loss_offset: 0.767  time: 0.3765  data_time: 0.0272  lr: 0.00089176  max_mem: 8976M
[12/10 05:45:50 d2.utils.events]:  eta: 0:19:45  iter: 6839  total_loss: 2.948  loss_sem_seg: 1.478  loss_center: 0.7324  loss_offset: 0.775  time: 0.3765  data_time: 0.0254  lr: 0.00088671  max_mem: 8976M
[12/10 05:45:58 d2.utils.events]:  eta: 0:19:38  iter: 6859  total_loss: 3.129  loss_sem_seg: 1.732  loss_center: 0.6212  loss_offset: 0.8109  time: 0.3765  data_time: 0.0269  lr: 0.00088166  max_mem: 8976M
[12/10 05:46:06 d2.utils.events]:  eta: 0:19:30  iter: 6879  total_loss: 3.056  loss_sem_seg: 1.607  loss_center: 0.6616  loss_offset: 0.7883  time: 0.3765  data_time: 0.0275  lr: 0.00087661  max_mem: 8976M
[12/10 05:46:13 d2.utils.events]:  eta: 0:19:23  iter: 6899  total_loss: 2.829  loss_sem_seg: 1.455  loss_center: 0.6299  loss_offset: 0.7565  time: 0.3765  data_time: 0.0266  lr: 0.00087155  max_mem: 8976M
[12/10 05:46:21 d2.utils.events]:  eta: 0:19:15  iter: 6919  total_loss: 2.949  loss_sem_seg: 1.447  loss_center: 0.6338  loss_offset: 0.6994  time: 0.3765  data_time: 0.0259  lr: 0.00086649  max_mem: 8976M
[12/10 05:46:28 d2.utils.events]:  eta: 0:19:08  iter: 6939  total_loss: 3.201  loss_sem_seg: 1.663  loss_center: 0.5125  loss_offset: 1.033  time: 0.3765  data_time: 0.0256  lr: 0.00086142  max_mem: 8976M
[12/10 05:46:36 d2.utils.events]:  eta: 0:19:00  iter: 6959  total_loss: 3.102  loss_sem_seg: 1.791  loss_center: 0.5407  loss_offset: 0.7484  time: 0.3765  data_time: 0.0264  lr: 0.00085636  max_mem: 8976M
[12/10 05:46:43 d2.utils.events]:  eta: 0:18:53  iter: 6979  total_loss: 3.135  loss_sem_seg: 1.588  loss_center: 0.5932  loss_offset: 0.8596  time: 0.3765  data_time: 0.0256  lr: 0.00085129  max_mem: 8976M
[12/10 05:46:51 d2.utils.events]:  eta: 0:18:45  iter: 6999  total_loss: 2.755  loss_sem_seg: 1.53  loss_center: 0.5071  loss_offset: 0.7935  time: 0.3765  data_time: 0.0270  lr: 0.00084621  max_mem: 8976M
[12/10 05:46:58 d2.utils.events]:  eta: 0:18:38  iter: 7019  total_loss: 3.012  loss_sem_seg: 1.467  loss_center: 0.7694  loss_offset: 0.7863  time: 0.3765  data_time: 0.0247  lr: 0.00084114  max_mem: 8976M
[12/10 05:47:06 d2.utils.events]:  eta: 0:18:30  iter: 7039  total_loss: 2.914  loss_sem_seg: 1.435  loss_center: 0.6441  loss_offset: 0.6749  time: 0.3765  data_time: 0.0248  lr: 0.00083605  max_mem: 8976M
[12/10 05:47:13 d2.utils.events]:  eta: 0:18:23  iter: 7059  total_loss: 2.889  loss_sem_seg: 1.58  loss_center: 0.4864  loss_offset: 0.7492  time: 0.3764  data_time: 0.0244  lr: 0.00083097  max_mem: 8976M
[12/10 05:47:21 d2.utils.events]:  eta: 0:18:15  iter: 7079  total_loss: 2.977  loss_sem_seg: 1.619  loss_center: 0.7393  loss_offset: 0.7832  time: 0.3765  data_time: 0.0289  lr: 0.00082588  max_mem: 8976M
[12/10 05:47:28 d2.utils.events]:  eta: 0:18:08  iter: 7099  total_loss: 2.884  loss_sem_seg: 1.467  loss_center: 0.663  loss_offset: 0.6549  time: 0.3764  data_time: 0.0261  lr: 0.00082079  max_mem: 8976M
[12/10 05:47:36 d2.utils.events]:  eta: 0:18:01  iter: 7119  total_loss: 2.882  loss_sem_seg: 1.528  loss_center: 0.5766  loss_offset: 0.7414  time: 0.3765  data_time: 0.0282  lr: 0.0008157  max_mem: 8976M
[12/10 05:47:43 d2.utils.events]:  eta: 0:17:53  iter: 7139  total_loss: 3.218  loss_sem_seg: 1.627  loss_center: 0.5859  loss_offset: 0.8445  time: 0.3764  data_time: 0.0249  lr: 0.0008106  max_mem: 8976M
[12/10 05:47:51 d2.utils.events]:  eta: 0:17:46  iter: 7159  total_loss: 3.064  loss_sem_seg: 1.577  loss_center: 0.692  loss_offset: 0.7973  time: 0.3764  data_time: 0.0262  lr: 0.0008055  max_mem: 8976M
[12/10 05:47:58 d2.utils.events]:  eta: 0:17:38  iter: 7179  total_loss: 2.799  loss_sem_seg: 1.471  loss_center: 0.4992  loss_offset: 0.7782  time: 0.3764  data_time: 0.0235  lr: 0.00080039  max_mem: 8976M
[12/10 05:48:06 d2.utils.events]:  eta: 0:17:31  iter: 7199  total_loss: 2.885  loss_sem_seg: 1.396  loss_center: 0.5864  loss_offset: 0.7261  time: 0.3764  data_time: 0.0266  lr: 0.00079528  max_mem: 8976M
[12/10 05:48:13 d2.utils.events]:  eta: 0:17:23  iter: 7219  total_loss: 2.854  loss_sem_seg: 1.534  loss_center: 0.6073  loss_offset: 0.7595  time: 0.3764  data_time: 0.0278  lr: 0.00079017  max_mem: 8976M
[12/10 05:48:21 d2.utils.events]:  eta: 0:17:16  iter: 7239  total_loss: 2.769  loss_sem_seg: 1.4  loss_center: 0.6252  loss_offset: 0.7319  time: 0.3764  data_time: 0.0258  lr: 0.00078505  max_mem: 8976M
[12/10 05:48:28 d2.utils.events]:  eta: 0:17:08  iter: 7259  total_loss: 3.142  loss_sem_seg: 1.641  loss_center: 0.7068  loss_offset: 0.7128  time: 0.3764  data_time: 0.0256  lr: 0.00077993  max_mem: 8976M
[12/10 05:48:36 d2.utils.events]:  eta: 0:17:01  iter: 7279  total_loss: 3.36  loss_sem_seg: 1.781  loss_center: 0.8514  loss_offset: 0.6883  time: 0.3764  data_time: 0.0258  lr: 0.00077481  max_mem: 8976M
[12/10 05:48:43 d2.utils.events]:  eta: 0:16:53  iter: 7299  total_loss: 2.954  loss_sem_seg: 1.58  loss_center: 0.4625  loss_offset: 0.7126  time: 0.3764  data_time: 0.0254  lr: 0.00076968  max_mem: 8976M
[12/10 05:48:51 d2.utils.events]:  eta: 0:16:46  iter: 7319  total_loss: 3.272  loss_sem_seg: 1.866  loss_center: 0.6114  loss_offset: 0.7551  time: 0.3764  data_time: 0.0268  lr: 0.00076455  max_mem: 8976M
[12/10 05:48:59 d2.utils.events]:  eta: 0:16:38  iter: 7339  total_loss: 2.83  loss_sem_seg: 1.332  loss_center: 0.5263  loss_offset: 0.7175  time: 0.3764  data_time: 0.0270  lr: 0.00075942  max_mem: 8976M
[12/10 05:49:06 d2.utils.events]:  eta: 0:16:30  iter: 7359  total_loss: 2.896  loss_sem_seg: 1.501  loss_center: 0.7545  loss_offset: 0.7365  time: 0.3764  data_time: 0.0275  lr: 0.00075428  max_mem: 8976M
[12/10 05:49:14 d2.utils.events]:  eta: 0:16:23  iter: 7379  total_loss: 3.005  loss_sem_seg: 1.452  loss_center: 0.574  loss_offset: 0.821  time: 0.3764  data_time: 0.0257  lr: 0.00074914  max_mem: 8976M
[12/10 05:49:21 d2.utils.events]:  eta: 0:16:15  iter: 7399  total_loss: 2.876  loss_sem_seg: 1.481  loss_center: 0.464  loss_offset: 0.8797  time: 0.3764  data_time: 0.0264  lr: 0.00074399  max_mem: 8976M
[12/10 05:49:29 d2.utils.events]:  eta: 0:16:08  iter: 7419  total_loss: 2.738  loss_sem_seg: 1.316  loss_center: 0.733  loss_offset: 0.7377  time: 0.3764  data_time: 0.0264  lr: 0.00073884  max_mem: 8976M
[12/10 05:49:36 d2.utils.events]:  eta: 0:16:01  iter: 7439  total_loss: 3.27  loss_sem_seg: 1.583  loss_center: 0.664  loss_offset: 0.8795  time: 0.3764  data_time: 0.0265  lr: 0.00073368  max_mem: 8976M
[12/10 05:49:44 d2.utils.events]:  eta: 0:15:53  iter: 7459  total_loss: 3.048  loss_sem_seg: 1.688  loss_center: 0.5098  loss_offset: 0.7361  time: 0.3764  data_time: 0.0262  lr: 0.00072852  max_mem: 8976M
[12/10 05:49:51 d2.utils.events]:  eta: 0:15:46  iter: 7479  total_loss: 3.162  loss_sem_seg: 1.697  loss_center: 0.6755  loss_offset: 0.7705  time: 0.3764  data_time: 0.0261  lr: 0.00072336  max_mem: 8976M
[12/10 05:49:59 d2.utils.events]:  eta: 0:15:38  iter: 7499  total_loss: 2.894  loss_sem_seg: 1.539  loss_center: 0.4648  loss_offset: 0.8558  time: 0.3764  data_time: 0.0246  lr: 0.00071819  max_mem: 8976M
[12/10 05:50:06 d2.utils.events]:  eta: 0:15:31  iter: 7519  total_loss: 2.867  loss_sem_seg: 1.604  loss_center: 0.5194  loss_offset: 0.7244  time: 0.3764  data_time: 0.0280  lr: 0.00071302  max_mem: 8976M
[12/10 05:50:14 d2.utils.events]:  eta: 0:15:23  iter: 7539  total_loss: 3.05  loss_sem_seg: 1.55  loss_center: 0.565  loss_offset: 0.8938  time: 0.3764  data_time: 0.0249  lr: 0.00070785  max_mem: 8976M
[12/10 05:50:21 d2.utils.events]:  eta: 0:15:16  iter: 7559  total_loss: 2.884  loss_sem_seg: 1.451  loss_center: 0.6029  loss_offset: 0.7792  time: 0.3764  data_time: 0.0267  lr: 0.00070267  max_mem: 8976M
[12/10 05:50:29 d2.utils.events]:  eta: 0:15:08  iter: 7579  total_loss: 2.993  loss_sem_seg: 1.545  loss_center: 0.5715  loss_offset: 0.7301  time: 0.3764  data_time: 0.0266  lr: 0.00069749  max_mem: 8976M
[12/10 05:50:37 d2.utils.events]:  eta: 0:15:01  iter: 7599  total_loss: 2.959  loss_sem_seg: 1.577  loss_center: 0.5787  loss_offset: 0.7826  time: 0.3764  data_time: 0.0257  lr: 0.0006923  max_mem: 8976M
[12/10 05:50:44 d2.utils.events]:  eta: 0:14:53  iter: 7619  total_loss: 3.146  loss_sem_seg: 1.714  loss_center: 0.6402  loss_offset: 0.8137  time: 0.3764  data_time: 0.0255  lr: 0.00068711  max_mem: 8976M
[12/10 05:50:51 d2.utils.events]:  eta: 0:14:45  iter: 7639  total_loss: 3.053  loss_sem_seg: 1.624  loss_center: 0.5108  loss_offset: 0.8557  time: 0.3764  data_time: 0.0245  lr: 0.00068191  max_mem: 8976M
[12/10 05:50:59 d2.utils.events]:  eta: 0:14:38  iter: 7659  total_loss: 3.039  loss_sem_seg: 1.781  loss_center: 0.5665  loss_offset: 0.8161  time: 0.3764  data_time: 0.0274  lr: 0.00067671  max_mem: 8976M
[12/10 05:51:07 d2.utils.events]:  eta: 0:14:30  iter: 7679  total_loss: 3.01  loss_sem_seg: 1.545  loss_center: 0.614  loss_offset: 0.7519  time: 0.3764  data_time: 0.0236  lr: 0.0006715  max_mem: 8976M
[12/10 05:51:14 d2.utils.events]:  eta: 0:14:22  iter: 7699  total_loss: 2.924  loss_sem_seg: 1.736  loss_center: 0.572  loss_offset: 0.7463  time: 0.3764  data_time: 0.0247  lr: 0.00066629  max_mem: 8976M
[12/10 05:51:21 d2.utils.events]:  eta: 0:14:15  iter: 7719  total_loss: 3.038  loss_sem_seg: 1.594  loss_center: 0.6642  loss_offset: 0.8011  time: 0.3764  data_time: 0.0268  lr: 0.00066108  max_mem: 8976M
[12/10 05:51:29 d2.utils.events]:  eta: 0:14:07  iter: 7739  total_loss: 3.179  loss_sem_seg: 1.534  loss_center: 0.6221  loss_offset: 0.7766  time: 0.3764  data_time: 0.0276  lr: 0.00065586  max_mem: 8976M
[12/10 05:51:37 d2.utils.events]:  eta: 0:14:00  iter: 7759  total_loss: 2.832  loss_sem_seg: 1.37  loss_center: 0.6659  loss_offset: 0.7732  time: 0.3764  data_time: 0.0258  lr: 0.00065064  max_mem: 8976M
[12/10 05:51:44 d2.utils.events]:  eta: 0:13:52  iter: 7779  total_loss: 2.929  loss_sem_seg: 1.716  loss_center: 0.484  loss_offset: 0.8064  time: 0.3764  data_time: 0.0259  lr: 0.00064541  max_mem: 8976M
[12/10 05:51:52 d2.utils.events]:  eta: 0:13:45  iter: 7799  total_loss: 3.112  loss_sem_seg: 1.456  loss_center: 0.7129  loss_offset: 0.7874  time: 0.3764  data_time: 0.0261  lr: 0.00064017  max_mem: 8976M
[12/10 05:51:59 d2.utils.events]:  eta: 0:13:37  iter: 7819  total_loss: 3.028  loss_sem_seg: 1.526  loss_center: 0.616  loss_offset: 0.7899  time: 0.3764  data_time: 0.0262  lr: 0.00063494  max_mem: 8976M
[12/10 05:52:07 d2.utils.events]:  eta: 0:13:30  iter: 7839  total_loss: 2.936  loss_sem_seg: 1.435  loss_center: 0.6273  loss_offset: 0.762  time: 0.3764  data_time: 0.0290  lr: 0.00062969  max_mem: 8976M
[12/10 05:52:14 d2.utils.events]:  eta: 0:13:23  iter: 7859  total_loss: 2.848  loss_sem_seg: 1.419  loss_center: 0.508  loss_offset: 0.7846  time: 0.3764  data_time: 0.0264  lr: 0.00062445  max_mem: 8976M
[12/10 05:52:22 d2.utils.events]:  eta: 0:13:15  iter: 7879  total_loss: 3.11  loss_sem_seg: 1.658  loss_center: 0.5362  loss_offset: 0.8043  time: 0.3764  data_time: 0.0292  lr: 0.00061919  max_mem: 8976M
[12/10 05:52:29 d2.utils.events]:  eta: 0:13:08  iter: 7899  total_loss: 2.864  loss_sem_seg: 1.515  loss_center: 0.593  loss_offset: 0.722  time: 0.3764  data_time: 0.0279  lr: 0.00061394  max_mem: 8976M
[12/10 05:52:37 d2.utils.events]:  eta: 0:13:00  iter: 7919  total_loss: 2.969  loss_sem_seg: 1.58  loss_center: 0.6207  loss_offset: 0.8495  time: 0.3764  data_time: 0.0273  lr: 0.00060867  max_mem: 8976M
[12/10 05:52:45 d2.utils.events]:  eta: 0:12:53  iter: 7939  total_loss: 2.942  loss_sem_seg: 1.582  loss_center: 0.4927  loss_offset: 0.8019  time: 0.3764  data_time: 0.0274  lr: 0.00060341  max_mem: 8976M
[12/10 05:52:52 d2.utils.events]:  eta: 0:12:45  iter: 7959  total_loss: 2.832  loss_sem_seg: 1.468  loss_center: 0.568  loss_offset: 0.7153  time: 0.3764  data_time: 0.0271  lr: 0.00059813  max_mem: 8976M
[12/10 05:53:00 d2.utils.events]:  eta: 0:12:38  iter: 7979  total_loss: 2.814  loss_sem_seg: 1.381  loss_center: 0.5974  loss_offset: 0.7616  time: 0.3764  data_time: 0.0274  lr: 0.00059286  max_mem: 8976M
[12/10 05:53:07 d2.utils.events]:  eta: 0:12:31  iter: 7999  total_loss: 2.924  loss_sem_seg: 1.425  loss_center: 0.6218  loss_offset: 0.7225  time: 0.3764  data_time: 0.0280  lr: 0.00058757  max_mem: 8976M
[12/10 05:53:15 d2.utils.events]:  eta: 0:12:23  iter: 8019  total_loss: 2.857  loss_sem_seg: 1.485  loss_center: 0.5678  loss_offset: 0.7434  time: 0.3764  data_time: 0.0283  lr: 0.00058229  max_mem: 8976M
[12/10 05:53:23 d2.utils.events]:  eta: 0:12:16  iter: 8039  total_loss: 2.897  loss_sem_seg: 1.395  loss_center: 0.6635  loss_offset: 0.733  time: 0.3764  data_time: 0.0276  lr: 0.00057699  max_mem: 8976M
[12/10 05:53:30 d2.utils.events]:  eta: 0:12:09  iter: 8059  total_loss: 2.946  loss_sem_seg: 1.563  loss_center: 0.6297  loss_offset: 0.771  time: 0.3765  data_time: 0.0265  lr: 0.00057169  max_mem: 8976M
[12/10 05:53:38 d2.utils.events]:  eta: 0:12:01  iter: 8079  total_loss: 2.747  loss_sem_seg: 1.39  loss_center: 0.6712  loss_offset: 0.7146  time: 0.3765  data_time: 0.0289  lr: 0.00056639  max_mem: 8976M
[12/10 05:53:45 d2.utils.events]:  eta: 0:11:54  iter: 8099  total_loss: 2.918  loss_sem_seg: 1.555  loss_center: 0.6228  loss_offset: 0.7523  time: 0.3765  data_time: 0.0278  lr: 0.00056108  max_mem: 8976M
[12/10 05:53:53 d2.utils.events]:  eta: 0:11:46  iter: 8119  total_loss: 2.94  loss_sem_seg: 1.489  loss_center: 0.6018  loss_offset: 0.8482  time: 0.3765  data_time: 0.0305  lr: 0.00055576  max_mem: 8976M
[12/10 05:54:01 d2.utils.events]:  eta: 0:11:39  iter: 8139  total_loss: 3.106  loss_sem_seg: 1.636  loss_center: 0.5441  loss_offset: 0.7669  time: 0.3765  data_time: 0.0285  lr: 0.00055044  max_mem: 8976M
[12/10 05:54:08 d2.utils.events]:  eta: 0:11:31  iter: 8159  total_loss: 3.086  loss_sem_seg: 1.534  loss_center: 0.6442  loss_offset: 0.7971  time: 0.3765  data_time: 0.0293  lr: 0.00054512  max_mem: 8976M
[12/10 05:54:16 d2.utils.events]:  eta: 0:11:24  iter: 8179  total_loss: 2.801  loss_sem_seg: 1.424  loss_center: 0.5468  loss_offset: 0.8454  time: 0.3765  data_time: 0.0264  lr: 0.00053978  max_mem: 8976M
[12/10 05:54:23 d2.utils.events]:  eta: 0:11:17  iter: 8199  total_loss: 2.819  loss_sem_seg: 1.766  loss_center: 0.4254  loss_offset: 0.7215  time: 0.3765  data_time: 0.0272  lr: 0.00053444  max_mem: 8976M
[12/10 05:54:31 d2.utils.events]:  eta: 0:11:09  iter: 8219  total_loss: 2.938  loss_sem_seg: 1.611  loss_center: 0.5475  loss_offset: 0.7762  time: 0.3765  data_time: 0.0259  lr: 0.0005291  max_mem: 8976M
[12/10 05:54:39 d2.utils.events]:  eta: 0:11:02  iter: 8239  total_loss: 3.189  loss_sem_seg: 1.865  loss_center: 0.6404  loss_offset: 0.783  time: 0.3765  data_time: 0.0285  lr: 0.00052375  max_mem: 8976M
[12/10 05:54:46 d2.utils.events]:  eta: 0:10:55  iter: 8259  total_loss: 3.202  loss_sem_seg: 1.755  loss_center: 0.6875  loss_offset: 0.7571  time: 0.3765  data_time: 0.0280  lr: 0.00051839  max_mem: 8976M
[12/10 05:54:54 d2.utils.events]:  eta: 0:10:47  iter: 8279  total_loss: 3.043  loss_sem_seg: 1.561  loss_center: 0.5967  loss_offset: 0.6981  time: 0.3765  data_time: 0.0269  lr: 0.00051303  max_mem: 8976M
[12/10 05:55:02 d2.utils.events]:  eta: 0:10:40  iter: 8299  total_loss: 3.072  loss_sem_seg: 1.521  loss_center: 0.6778  loss_offset: 0.822  time: 0.3766  data_time: 0.0293  lr: 0.00050766  max_mem: 8976M
[12/10 05:55:09 d2.utils.events]:  eta: 0:10:32  iter: 8319  total_loss: 2.846  loss_sem_seg: 1.443  loss_center: 0.6126  loss_offset: 0.7032  time: 0.3766  data_time: 0.0255  lr: 0.00050229  max_mem: 8976M
[12/10 05:55:17 d2.utils.events]:  eta: 0:10:25  iter: 8339  total_loss: 2.939  loss_sem_seg: 1.526  loss_center: 0.6126  loss_offset: 0.7126  time: 0.3766  data_time: 0.0273  lr: 0.0004969  max_mem: 8976M
[12/10 05:55:24 d2.utils.events]:  eta: 0:10:17  iter: 8359  total_loss: 2.628  loss_sem_seg: 1.235  loss_center: 0.6954  loss_offset: 0.7732  time: 0.3766  data_time: 0.0272  lr: 0.00049152  max_mem: 8976M
[12/10 05:55:32 d2.utils.events]:  eta: 0:10:10  iter: 8379  total_loss: 2.968  loss_sem_seg: 1.387  loss_center: 0.7354  loss_offset: 0.7356  time: 0.3766  data_time: 0.0280  lr: 0.00048612  max_mem: 8976M
[12/10 05:55:39 d2.utils.events]:  eta: 0:10:02  iter: 8399  total_loss: 2.998  loss_sem_seg: 1.671  loss_center: 0.6048  loss_offset: 0.7701  time: 0.3766  data_time: 0.0266  lr: 0.00048072  max_mem: 8976M
[12/10 05:55:47 d2.utils.events]:  eta: 0:09:55  iter: 8419  total_loss: 2.823  loss_sem_seg: 1.435  loss_center: 0.7538  loss_offset: 0.7159  time: 0.3766  data_time: 0.0265  lr: 0.00047531  max_mem: 8976M
[12/10 05:55:55 d2.utils.events]:  eta: 0:09:47  iter: 8439  total_loss: 3.208  loss_sem_seg: 1.578  loss_center: 0.8312  loss_offset: 0.7434  time: 0.3766  data_time: 0.0277  lr: 0.0004699  max_mem: 8976M
[12/10 05:56:02 d2.utils.events]:  eta: 0:09:40  iter: 8459  total_loss: 2.926  loss_sem_seg: 1.6  loss_center: 0.5981  loss_offset: 0.801  time: 0.3766  data_time: 0.0270  lr: 0.00046448  max_mem: 8976M
[12/10 05:56:10 d2.utils.events]:  eta: 0:09:32  iter: 8479  total_loss: 2.792  loss_sem_seg: 1.559  loss_center: 0.5487  loss_offset: 0.7686  time: 0.3766  data_time: 0.0266  lr: 0.00045905  max_mem: 8976M
[12/10 05:56:17 d2.utils.events]:  eta: 0:09:25  iter: 8499  total_loss: 2.965  loss_sem_seg: 1.541  loss_center: 0.6273  loss_offset: 0.8118  time: 0.3766  data_time: 0.0282  lr: 0.00045361  max_mem: 8976M
[12/10 05:56:25 d2.utils.events]:  eta: 0:09:17  iter: 8519  total_loss: 2.948  loss_sem_seg: 1.457  loss_center: 0.6035  loss_offset: 0.8323  time: 0.3766  data_time: 0.0263  lr: 0.00044817  max_mem: 8976M
[12/10 05:56:32 d2.utils.events]:  eta: 0:09:10  iter: 8539  total_loss: 2.926  loss_sem_seg: 1.476  loss_center: 0.6079  loss_offset: 0.7583  time: 0.3766  data_time: 0.0276  lr: 0.00044272  max_mem: 8976M
[12/10 05:56:40 d2.utils.events]:  eta: 0:09:02  iter: 8559  total_loss: 2.846  loss_sem_seg: 1.283  loss_center: 0.6157  loss_offset: 0.861  time: 0.3766  data_time: 0.0272  lr: 0.00043726  max_mem: 8976M
[12/10 05:56:47 d2.utils.events]:  eta: 0:08:55  iter: 8579  total_loss: 2.811  loss_sem_seg: 1.361  loss_center: 0.5421  loss_offset: 0.7038  time: 0.3766  data_time: 0.0274  lr: 0.00043179  max_mem: 8976M
[12/10 05:56:55 d2.utils.events]:  eta: 0:08:47  iter: 8599  total_loss: 2.778  loss_sem_seg: 1.402  loss_center: 0.6129  loss_offset: 0.747  time: 0.3766  data_time: 0.0260  lr: 0.00042632  max_mem: 8976M
[12/10 05:57:02 d2.utils.events]:  eta: 0:08:40  iter: 8619  total_loss: 2.867  loss_sem_seg: 1.472  loss_center: 0.6311  loss_offset: 0.6965  time: 0.3766  data_time: 0.0270  lr: 0.00042084  max_mem: 8976M
[12/10 05:57:10 d2.utils.events]:  eta: 0:08:32  iter: 8639  total_loss: 2.679  loss_sem_seg: 1.433  loss_center: 0.6443  loss_offset: 0.7437  time: 0.3766  data_time: 0.0265  lr: 0.00041535  max_mem: 8976M
[12/10 05:57:18 d2.utils.events]:  eta: 0:08:25  iter: 8659  total_loss: 3.004  loss_sem_seg: 1.652  loss_center: 0.5811  loss_offset: 0.6887  time: 0.3766  data_time: 0.0275  lr: 0.00040985  max_mem: 8976M
[12/10 05:57:25 d2.utils.events]:  eta: 0:08:17  iter: 8679  total_loss: 3.077  loss_sem_seg: 1.675  loss_center: 0.6143  loss_offset: 0.8398  time: 0.3766  data_time: 0.0266  lr: 0.00040435  max_mem: 8976M
[12/10 05:57:33 d2.utils.events]:  eta: 0:08:10  iter: 8699  total_loss: 2.706  loss_sem_seg: 1.462  loss_center: 0.615  loss_offset: 0.6629  time: 0.3766  data_time: 0.0261  lr: 0.00039883  max_mem: 8976M
[12/10 05:57:40 d2.utils.events]:  eta: 0:08:02  iter: 8719  total_loss: 3.015  loss_sem_seg: 1.348  loss_center: 0.6258  loss_offset: 0.8404  time: 0.3766  data_time: 0.0249  lr: 0.00039331  max_mem: 8976M
[12/10 05:57:48 d2.utils.events]:  eta: 0:07:55  iter: 8739  total_loss: 2.7  loss_sem_seg: 1.396  loss_center: 0.5712  loss_offset: 0.8032  time: 0.3766  data_time: 0.0269  lr: 0.00038778  max_mem: 8976M
[12/10 05:57:55 d2.utils.events]:  eta: 0:07:47  iter: 8759  total_loss: 2.844  loss_sem_seg: 1.483  loss_center: 0.6119  loss_offset: 0.701  time: 0.3766  data_time: 0.0274  lr: 0.00038224  max_mem: 8976M
[12/10 05:58:03 d2.utils.events]:  eta: 0:07:40  iter: 8779  total_loss: 2.993  loss_sem_seg: 1.622  loss_center: 0.5538  loss_offset: 0.8099  time: 0.3766  data_time: 0.0251  lr: 0.00037669  max_mem: 8976M
[12/10 05:58:10 d2.utils.events]:  eta: 0:07:32  iter: 8799  total_loss: 2.591  loss_sem_seg: 1.403  loss_center: 0.4564  loss_offset: 0.6549  time: 0.3766  data_time: 0.0260  lr: 0.00037113  max_mem: 8976M
[12/10 05:58:18 d2.utils.events]:  eta: 0:07:24  iter: 8819  total_loss: 2.973  loss_sem_seg: 1.471  loss_center: 0.5434  loss_offset: 0.7848  time: 0.3766  data_time: 0.0268  lr: 0.00036557  max_mem: 8976M
[12/10 05:58:25 d2.utils.events]:  eta: 0:07:17  iter: 8839  total_loss: 3.036  loss_sem_seg: 1.589  loss_center: 0.6946  loss_offset: 0.8218  time: 0.3766  data_time: 0.0280  lr: 0.00035999  max_mem: 8976M
[12/10 05:58:33 d2.utils.events]:  eta: 0:07:09  iter: 8859  total_loss: 2.796  loss_sem_seg: 1.417  loss_center: 0.5458  loss_offset: 0.7754  time: 0.3766  data_time: 0.0270  lr: 0.0003544  max_mem: 8976M
[12/10 05:58:41 d2.utils.events]:  eta: 0:07:02  iter: 8879  total_loss: 2.837  loss_sem_seg: 1.572  loss_center: 0.5226  loss_offset: 0.772  time: 0.3766  data_time: 0.0273  lr: 0.00034881  max_mem: 8976M
[12/10 05:58:48 d2.utils.events]:  eta: 0:06:54  iter: 8899  total_loss: 3.227  loss_sem_seg: 1.708  loss_center: 0.7643  loss_offset: 0.726  time: 0.3766  data_time: 0.0261  lr: 0.0003432  max_mem: 8976M
[12/10 05:58:56 d2.utils.events]:  eta: 0:06:47  iter: 8919  total_loss: 2.731  loss_sem_seg: 1.431  loss_center: 0.5094  loss_offset: 0.6061  time: 0.3766  data_time: 0.0256  lr: 0.00033758  max_mem: 8976M
[12/10 05:59:03 d2.utils.events]:  eta: 0:06:39  iter: 8939  total_loss: 3.309  loss_sem_seg: 1.641  loss_center: 0.6855  loss_offset: 0.8378  time: 0.3766  data_time: 0.0262  lr: 0.00033196  max_mem: 8976M
[12/10 05:59:11 d2.utils.events]:  eta: 0:06:32  iter: 8959  total_loss: 2.871  loss_sem_seg: 1.421  loss_center: 0.5445  loss_offset: 0.7531  time: 0.3766  data_time: 0.0257  lr: 0.00032632  max_mem: 8976M
[12/10 05:59:18 d2.utils.events]:  eta: 0:06:24  iter: 8979  total_loss: 2.868  loss_sem_seg: 1.271  loss_center: 0.5566  loss_offset: 0.8379  time: 0.3766  data_time: 0.0265  lr: 0.00032067  max_mem: 8976M
[12/10 05:59:26 d2.utils.events]:  eta: 0:06:16  iter: 8999  total_loss: 2.849  loss_sem_seg: 1.426  loss_center: 0.5487  loss_offset: 0.808  time: 0.3766  data_time: 0.0276  lr: 0.00031501  max_mem: 8976M
[12/10 05:59:33 d2.utils.events]:  eta: 0:06:09  iter: 9019  total_loss: 2.924  loss_sem_seg: 1.469  loss_center: 0.5486  loss_offset: 0.7263  time: 0.3766  data_time: 0.0273  lr: 0.00030934  max_mem: 8976M
[12/10 05:59:41 d2.utils.events]:  eta: 0:06:01  iter: 9039  total_loss: 2.934  loss_sem_seg: 1.519  loss_center: 0.6002  loss_offset: 0.7703  time: 0.3766  data_time: 0.0268  lr: 0.00030366  max_mem: 8976M
[12/10 05:59:48 d2.utils.events]:  eta: 0:05:54  iter: 9059  total_loss: 2.507  loss_sem_seg: 1.351  loss_center: 0.564  loss_offset: 0.5931  time: 0.3766  data_time: 0.0263  lr: 0.00029797  max_mem: 8976M
[12/10 05:59:56 d2.utils.events]:  eta: 0:05:46  iter: 9079  total_loss: 2.784  loss_sem_seg: 1.297  loss_center: 0.643  loss_offset: 0.6869  time: 0.3766  data_time: 0.0267  lr: 0.00029226  max_mem: 8976M
[12/10 06:00:03 d2.utils.events]:  eta: 0:05:38  iter: 9099  total_loss: 2.826  loss_sem_seg: 1.442  loss_center: 0.5417  loss_offset: 0.7735  time: 0.3766  data_time: 0.0254  lr: 0.00028654  max_mem: 8976M
[12/10 06:00:11 d2.utils.events]:  eta: 0:05:31  iter: 9119  total_loss: 2.945  loss_sem_seg: 1.468  loss_center: 0.7853  loss_offset: 0.7633  time: 0.3766  data_time: 0.0258  lr: 0.00028081  max_mem: 8976M
[12/10 06:00:18 d2.utils.events]:  eta: 0:05:23  iter: 9139  total_loss: 2.762  loss_sem_seg: 1.5  loss_center: 0.5703  loss_offset: 0.7209  time: 0.3766  data_time: 0.0246  lr: 0.00027507  max_mem: 8976M
[12/10 06:00:26 d2.utils.events]:  eta: 0:05:15  iter: 9159  total_loss: 2.825  loss_sem_seg: 1.534  loss_center: 0.6381  loss_offset: 0.7606  time: 0.3766  data_time: 0.0260  lr: 0.00026931  max_mem: 8976M
[12/10 06:00:34 d2.utils.events]:  eta: 0:05:08  iter: 9179  total_loss: 3.042  loss_sem_seg: 1.559  loss_center: 0.6275  loss_offset: 0.6357  time: 0.3766  data_time: 0.0270  lr: 0.00026354  max_mem: 8976M
[12/10 06:00:41 d2.utils.events]:  eta: 0:05:00  iter: 9199  total_loss: 2.908  loss_sem_seg: 1.471  loss_center: 0.6176  loss_offset: 0.7431  time: 0.3766  data_time: 0.0269  lr: 0.00025776  max_mem: 8976M
[12/10 06:00:49 d2.utils.events]:  eta: 0:04:53  iter: 9219  total_loss: 2.801  loss_sem_seg: 1.369  loss_center: 0.5496  loss_offset: 0.6176  time: 0.3766  data_time: 0.0263  lr: 0.00025196  max_mem: 8976M
[12/10 06:00:56 d2.utils.events]:  eta: 0:04:45  iter: 9239  total_loss: 2.742  loss_sem_seg: 1.525  loss_center: 0.5495  loss_offset: 0.6857  time: 0.3766  data_time: 0.0271  lr: 0.00024614  max_mem: 8976M
[12/10 06:01:04 d2.utils.events]:  eta: 0:04:38  iter: 9259  total_loss: 2.856  loss_sem_seg: 1.389  loss_center: 0.6089  loss_offset: 0.708  time: 0.3766  data_time: 0.0271  lr: 0.00024031  max_mem: 8976M
[12/10 06:01:11 d2.utils.events]:  eta: 0:04:30  iter: 9279  total_loss: 2.993  loss_sem_seg: 1.474  loss_center: 0.6001  loss_offset: 0.7752  time: 0.3766  data_time: 0.0262  lr: 0.00023447  max_mem: 8976M
[12/10 06:01:19 d2.utils.events]:  eta: 0:04:23  iter: 9299  total_loss: 2.774  loss_sem_seg: 1.418  loss_center: 0.6644  loss_offset: 0.6973  time: 0.3766  data_time: 0.0254  lr: 0.00022861  max_mem: 8976M
[12/10 06:01:27 d2.utils.events]:  eta: 0:04:15  iter: 9319  total_loss: 3.015  loss_sem_seg: 1.523  loss_center: 0.6076  loss_offset: 0.7947  time: 0.3766  data_time: 0.0278  lr: 0.00022273  max_mem: 8976M
[12/10 06:01:34 d2.utils.events]:  eta: 0:04:08  iter: 9339  total_loss: 2.811  loss_sem_seg: 1.433  loss_center: 0.5212  loss_offset: 0.9265  time: 0.3766  data_time: 0.0255  lr: 0.00021683  max_mem: 8976M
[12/10 06:01:42 d2.utils.events]:  eta: 0:04:00  iter: 9359  total_loss: 2.814  loss_sem_seg: 1.435  loss_center: 0.5294  loss_offset: 0.8014  time: 0.3766  data_time: 0.0264  lr: 0.00021092  max_mem: 8976M
[12/10 06:01:49 d2.utils.events]:  eta: 0:03:52  iter: 9379  total_loss: 2.907  loss_sem_seg: 1.408  loss_center: 0.5417  loss_offset: 0.7834  time: 0.3766  data_time: 0.0266  lr: 0.00020499  max_mem: 8976M
[12/10 06:01:57 d2.utils.events]:  eta: 0:03:45  iter: 9399  total_loss: 2.761  loss_sem_seg: 1.401  loss_center: 0.553  loss_offset: 0.6434  time: 0.3766  data_time: 0.0257  lr: 0.00019903  max_mem: 8976M
[12/10 06:02:04 d2.utils.events]:  eta: 0:03:37  iter: 9419  total_loss: 2.619  loss_sem_seg: 1.264  loss_center: 0.4726  loss_offset: 0.7852  time: 0.3766  data_time: 0.0251  lr: 0.00019306  max_mem: 8976M
[12/10 06:02:12 d2.utils.events]:  eta: 0:03:30  iter: 9439  total_loss: 2.582  loss_sem_seg: 1.281  loss_center: 0.5587  loss_offset: 0.7203  time: 0.3766  data_time: 0.0247  lr: 0.00018707  max_mem: 8976M
[12/10 06:02:19 d2.utils.events]:  eta: 0:03:22  iter: 9459  total_loss: 2.736  loss_sem_seg: 1.403  loss_center: 0.5986  loss_offset: 0.7601  time: 0.3766  data_time: 0.0255  lr: 0.00018106  max_mem: 8976M
[12/10 06:02:27 d2.utils.events]:  eta: 0:03:15  iter: 9479  total_loss: 2.707  loss_sem_seg: 1.366  loss_center: 0.5442  loss_offset: 0.6624  time: 0.3766  data_time: 0.0249  lr: 0.00017502  max_mem: 8976M
[12/10 06:02:34 d2.utils.events]:  eta: 0:03:07  iter: 9499  total_loss: 2.812  loss_sem_seg: 1.517  loss_center: 0.6031  loss_offset: 0.646  time: 0.3766  data_time: 0.0262  lr: 0.00016896  max_mem: 8976M
[12/10 06:02:42 d2.utils.events]:  eta: 0:03:00  iter: 9519  total_loss: 2.819  loss_sem_seg: 1.505  loss_center: 0.5815  loss_offset: 0.7958  time: 0.3766  data_time: 0.0253  lr: 0.00016288  max_mem: 8976M
[12/10 06:02:49 d2.utils.events]:  eta: 0:02:52  iter: 9539  total_loss: 2.797  loss_sem_seg: 1.351  loss_center: 0.5435  loss_offset: 0.8466  time: 0.3766  data_time: 0.0270  lr: 0.00015677  max_mem: 8976M
[12/10 06:02:57 d2.utils.events]:  eta: 0:02:45  iter: 9559  total_loss: 3.074  loss_sem_seg: 1.604  loss_center: 0.5899  loss_offset: 0.7807  time: 0.3766  data_time: 0.0252  lr: 0.00015064  max_mem: 8976M
[12/10 06:03:04 d2.utils.events]:  eta: 0:02:37  iter: 9579  total_loss: 2.845  loss_sem_seg: 1.452  loss_center: 0.632  loss_offset: 0.6935  time: 0.3766  data_time: 0.0251  lr: 0.00014448  max_mem: 8976M
[12/10 06:03:12 d2.utils.events]:  eta: 0:02:30  iter: 9599  total_loss: 2.791  loss_sem_seg: 1.393  loss_center: 0.5967  loss_offset: 0.775  time: 0.3766  data_time: 0.0242  lr: 0.00013828  max_mem: 8976M
[12/10 06:03:19 d2.utils.events]:  eta: 0:02:22  iter: 9619  total_loss: 3.004  loss_sem_seg: 1.478  loss_center: 0.6198  loss_offset: 0.7923  time: 0.3765  data_time: 0.0270  lr: 0.00013206  max_mem: 8976M
[12/10 06:03:27 d2.utils.events]:  eta: 0:02:15  iter: 9639  total_loss: 2.925  loss_sem_seg: 1.415  loss_center: 0.7243  loss_offset: 0.7751  time: 0.3765  data_time: 0.0261  lr: 0.0001258  max_mem: 8976M
[12/10 06:03:34 d2.utils.events]:  eta: 0:02:07  iter: 9659  total_loss: 2.908  loss_sem_seg: 1.481  loss_center: 0.6803  loss_offset: 0.8382  time: 0.3765  data_time: 0.0261  lr: 0.00011951  max_mem: 8976M
[12/10 06:03:42 d2.utils.events]:  eta: 0:02:00  iter: 9679  total_loss: 3.024  loss_sem_seg: 1.51  loss_center: 0.6948  loss_offset: 0.6735  time: 0.3765  data_time: 0.0271  lr: 0.00011319  max_mem: 8976M
[12/10 06:03:49 d2.utils.events]:  eta: 0:01:52  iter: 9699  total_loss: 2.503  loss_sem_seg: 1.378  loss_center: 0.4939  loss_offset: 0.6845  time: 0.3765  data_time: 0.0266  lr: 0.00010682  max_mem: 8976M
[12/10 06:03:57 d2.utils.events]:  eta: 0:01:45  iter: 9719  total_loss: 2.842  loss_sem_seg: 1.378  loss_center: 0.617  loss_offset: 0.7105  time: 0.3765  data_time: 0.0277  lr: 0.00010041  max_mem: 8976M
[12/10 06:04:04 d2.utils.events]:  eta: 0:01:37  iter: 9739  total_loss: 2.993  loss_sem_seg: 1.519  loss_center: 0.7239  loss_offset: 0.7808  time: 0.3765  data_time: 0.0272  lr: 9.3954e-05  max_mem: 8976M
[12/10 06:04:12 d2.utils.events]:  eta: 0:01:30  iter: 9759  total_loss: 2.691  loss_sem_seg: 1.365  loss_center: 0.6501  loss_offset: 0.6917  time: 0.3765  data_time: 0.0259  lr: 8.7449e-05  max_mem: 8976M
[12/10 06:04:19 d2.utils.events]:  eta: 0:01:22  iter: 9779  total_loss: 2.743  loss_sem_seg: 1.432  loss_center: 0.5745  loss_offset: 0.7018  time: 0.3765  data_time: 0.0264  lr: 8.089e-05  max_mem: 8976M
[12/10 06:04:27 d2.utils.events]:  eta: 0:01:15  iter: 9799  total_loss: 2.753  loss_sem_seg: 1.545  loss_center: 0.4712  loss_offset: 0.7583  time: 0.3765  data_time: 0.0265  lr: 7.4271e-05  max_mem: 8976M
[12/10 06:04:34 d2.utils.events]:  eta: 0:01:07  iter: 9819  total_loss: 2.605  loss_sem_seg: 1.319  loss_center: 0.629  loss_offset: 0.7159  time: 0.3765  data_time: 0.0253  lr: 6.7585e-05  max_mem: 8976M
[12/10 06:04:42 d2.utils.events]:  eta: 0:01:00  iter: 9839  total_loss: 3.283  loss_sem_seg: 1.803  loss_center: 0.5345  loss_offset: 0.7338  time: 0.3765  data_time: 0.0268  lr: 6.0825e-05  max_mem: 8976M
[12/10 06:04:50 d2.utils.events]:  eta: 0:00:52  iter: 9859  total_loss: 2.911  loss_sem_seg: 1.526  loss_center: 0.6269  loss_offset: 0.7883  time: 0.3765  data_time: 0.0270  lr: 5.3981e-05  max_mem: 8976M
[12/10 06:04:57 d2.utils.events]:  eta: 0:00:45  iter: 9879  total_loss: 2.803  loss_sem_seg: 1.495  loss_center: 0.5178  loss_offset: 0.6814  time: 0.3765  data_time: 0.0254  lr: 4.7038e-05  max_mem: 8976M
[12/10 06:05:05 d2.utils.events]:  eta: 0:00:37  iter: 9899  total_loss: 2.508  loss_sem_seg: 1.234  loss_center: 0.5415  loss_offset: 0.6559  time: 0.3765  data_time: 0.0259  lr: 3.9979e-05  max_mem: 8976M
[12/10 06:05:12 d2.utils.events]:  eta: 0:00:30  iter: 9919  total_loss: 2.8  loss_sem_seg: 1.452  loss_center: 0.5773  loss_offset: 0.7181  time: 0.3765  data_time: 0.0266  lr: 3.2778e-05  max_mem: 8976M
[12/10 06:05:20 d2.utils.events]:  eta: 0:00:22  iter: 9939  total_loss: 2.363  loss_sem_seg: 1.242  loss_center: 0.5777  loss_offset: 0.6172  time: 0.3765  data_time: 0.0269  lr: 2.5394e-05  max_mem: 8976M
[12/10 06:05:27 d2.utils.events]:  eta: 0:00:15  iter: 9959  total_loss: 2.614  loss_sem_seg: 1.292  loss_center: 0.6696  loss_offset: 0.6441  time: 0.3765  data_time: 0.0257  lr: 1.776e-05  max_mem: 8976M
[12/10 06:05:35 d2.utils.events]:  eta: 0:00:07  iter: 9979  total_loss: 2.554  loss_sem_seg: 1.415  loss_center: 0.4652  loss_offset: 0.6825  time: 0.3765  data_time: 0.0270  lr: 9.7261e-06  max_mem: 8976M
[12/10 06:05:42 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0009999.pth
[12/10 06:05:43 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_final.pth
[12/10 06:05:44 d2.utils.events]:  eta: 0:00:00  iter: 9999  total_loss: 2.632  loss_sem_seg: 1.324  loss_center: 0.5774  loss_offset: 0.5965  time: 0.3765  data_time: 0.0268  lr: 6.2797e-07  max_mem: 8976M
[12/10 06:05:44 d2.engine.hooks]: Overall training speed: 9998 iterations in 1:02:44 (0.3765 s / it)
[12/10 06:05:44 d2.engine.hooks]: Total training time: 1:02:53 (0:00:08 on hooks)
[12/10 06:05:45 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[12/10 06:05:45 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/10 06:05:45 d2.data.common]: Serializing 5000 elements to byte tensors and concatenating them all ...
[12/10 06:05:45 d2.data.common]: Serialized dataset takes 3.40 MiB
/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 10 worker processes in total. Our suggested max number of worker in current system is 8, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  cpuset_checked))
[12/10 06:05:46 d2.evaluation.evaluator]: Start inference on 5000 batches
/usr/local/lib/python3.7/dist-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
[12/10 06:05:48 d2.evaluation.evaluator]: Inference done 11/5000. Dataloading: 0.0008 s/iter. Inference: 0.0548 s/iter. Eval: 0.0391 s/iter. Total: 0.0947 s/iter. ETA=0:07:52
[12/10 06:05:53 d2.evaluation.evaluator]: Inference done 72/5000. Dataloading: 0.0010 s/iter. Inference: 0.0499 s/iter. Eval: 0.0325 s/iter. Total: 0.0834 s/iter. ETA=0:06:51
[12/10 06:05:58 d2.evaluation.evaluator]: Inference done 127/5000. Dataloading: 0.0011 s/iter. Inference: 0.0515 s/iter. Eval: 0.0348 s/iter. Total: 0.0874 s/iter. ETA=0:07:05
[12/10 06:06:03 d2.evaluation.evaluator]: Inference done 182/5000. Dataloading: 0.0011 s/iter. Inference: 0.0520 s/iter. Eval: 0.0355 s/iter. Total: 0.0887 s/iter. ETA=0:07:07
[12/10 06:06:08 d2.evaluation.evaluator]: Inference done 241/5000. Dataloading: 0.0011 s/iter. Inference: 0.0515 s/iter. Eval: 0.0350 s/iter. Total: 0.0877 s/iter. ETA=0:06:57
[12/10 06:06:13 d2.evaluation.evaluator]: Inference done 298/5000. Dataloading: 0.0011 s/iter. Inference: 0.0516 s/iter. Eval: 0.0351 s/iter. Total: 0.0879 s/iter. ETA=0:06:53
[12/10 06:06:18 d2.evaluation.evaluator]: Inference done 355/5000. Dataloading: 0.0011 s/iter. Inference: 0.0517 s/iter. Eval: 0.0351 s/iter. Total: 0.0880 s/iter. ETA=0:06:48
[12/10 06:06:23 d2.evaluation.evaluator]: Inference done 415/5000. Dataloading: 0.0011 s/iter. Inference: 0.0513 s/iter. Eval: 0.0349 s/iter. Total: 0.0874 s/iter. ETA=0:06:40
[12/10 06:06:28 d2.evaluation.evaluator]: Inference done 476/5000. Dataloading: 0.0011 s/iter. Inference: 0.0509 s/iter. Eval: 0.0346 s/iter. Total: 0.0867 s/iter. ETA=0:06:32
[12/10 06:06:33 d2.evaluation.evaluator]: Inference done 533/5000. Dataloading: 0.0011 s/iter. Inference: 0.0509 s/iter. Eval: 0.0347 s/iter. Total: 0.0869 s/iter. ETA=0:06:28
[12/10 06:06:38 d2.evaluation.evaluator]: Inference done 590/5000. Dataloading: 0.0011 s/iter. Inference: 0.0510 s/iter. Eval: 0.0349 s/iter. Total: 0.0871 s/iter. ETA=0:06:24
[12/10 06:06:43 d2.evaluation.evaluator]: Inference done 646/5000. Dataloading: 0.0011 s/iter. Inference: 0.0512 s/iter. Eval: 0.0349 s/iter. Total: 0.0873 s/iter. ETA=0:06:20
[12/10 06:06:48 d2.evaluation.evaluator]: Inference done 702/5000. Dataloading: 0.0011 s/iter. Inference: 0.0512 s/iter. Eval: 0.0350 s/iter. Total: 0.0874 s/iter. ETA=0:06:15
[12/10 06:06:53 d2.evaluation.evaluator]: Inference done 759/5000. Dataloading: 0.0011 s/iter. Inference: 0.0512 s/iter. Eval: 0.0350 s/iter. Total: 0.0875 s/iter. ETA=0:06:11
[12/10 06:06:58 d2.evaluation.evaluator]: Inference done 818/5000. Dataloading: 0.0011 s/iter. Inference: 0.0512 s/iter. Eval: 0.0349 s/iter. Total: 0.0873 s/iter. ETA=0:06:05
[12/10 06:07:03 d2.evaluation.evaluator]: Inference done 875/5000. Dataloading: 0.0011 s/iter. Inference: 0.0513 s/iter. Eval: 0.0349 s/iter. Total: 0.0874 s/iter. ETA=0:06:00
[12/10 06:07:08 d2.evaluation.evaluator]: Inference done 935/5000. Dataloading: 0.0011 s/iter. Inference: 0.0511 s/iter. Eval: 0.0348 s/iter. Total: 0.0871 s/iter. ETA=0:05:54
[12/10 06:07:13 d2.evaluation.evaluator]: Inference done 994/5000. Dataloading: 0.0012 s/iter. Inference: 0.0511 s/iter. Eval: 0.0348 s/iter. Total: 0.0871 s/iter. ETA=0:05:48
[12/10 06:07:18 d2.evaluation.evaluator]: Inference done 1052/5000. Dataloading: 0.0012 s/iter. Inference: 0.0510 s/iter. Eval: 0.0348 s/iter. Total: 0.0870 s/iter. ETA=0:05:43
[12/10 06:07:23 d2.evaluation.evaluator]: Inference done 1111/5000. Dataloading: 0.0012 s/iter. Inference: 0.0510 s/iter. Eval: 0.0347 s/iter. Total: 0.0870 s/iter. ETA=0:05:38
[12/10 06:07:28 d2.evaluation.evaluator]: Inference done 1170/5000. Dataloading: 0.0012 s/iter. Inference: 0.0510 s/iter. Eval: 0.0347 s/iter. Total: 0.0870 s/iter. ETA=0:05:33
[12/10 06:07:33 d2.evaluation.evaluator]: Inference done 1226/5000. Dataloading: 0.0012 s/iter. Inference: 0.0512 s/iter. Eval: 0.0347 s/iter. Total: 0.0871 s/iter. ETA=0:05:28
[12/10 06:07:38 d2.evaluation.evaluator]: Inference done 1282/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0348 s/iter. Total: 0.0872 s/iter. ETA=0:05:24
[12/10 06:07:43 d2.evaluation.evaluator]: Inference done 1339/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0347 s/iter. Total: 0.0873 s/iter. ETA=0:05:19
[12/10 06:07:48 d2.evaluation.evaluator]: Inference done 1396/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0348 s/iter. Total: 0.0873 s/iter. ETA=0:05:14
[12/10 06:07:54 d2.evaluation.evaluator]: Inference done 1454/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0348 s/iter. Total: 0.0873 s/iter. ETA=0:05:09
[12/10 06:07:59 d2.evaluation.evaluator]: Inference done 1508/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0349 s/iter. Total: 0.0875 s/iter. ETA=0:05:05
[12/10 06:08:04 d2.evaluation.evaluator]: Inference done 1563/5000. Dataloading: 0.0012 s/iter. Inference: 0.0515 s/iter. Eval: 0.0350 s/iter. Total: 0.0877 s/iter. ETA=0:05:01
[12/10 06:08:09 d2.evaluation.evaluator]: Inference done 1618/5000. Dataloading: 0.0012 s/iter. Inference: 0.0516 s/iter. Eval: 0.0350 s/iter. Total: 0.0878 s/iter. ETA=0:04:56
[12/10 06:08:14 d2.evaluation.evaluator]: Inference done 1675/5000. Dataloading: 0.0012 s/iter. Inference: 0.0516 s/iter. Eval: 0.0350 s/iter. Total: 0.0878 s/iter. ETA=0:04:52
[12/10 06:08:19 d2.evaluation.evaluator]: Inference done 1733/5000. Dataloading: 0.0012 s/iter. Inference: 0.0516 s/iter. Eval: 0.0351 s/iter. Total: 0.0878 s/iter. ETA=0:04:46
[12/10 06:08:24 d2.evaluation.evaluator]: Inference done 1790/5000. Dataloading: 0.0012 s/iter. Inference: 0.0515 s/iter. Eval: 0.0351 s/iter. Total: 0.0878 s/iter. ETA=0:04:41
[12/10 06:08:29 d2.evaluation.evaluator]: Inference done 1848/5000. Dataloading: 0.0012 s/iter. Inference: 0.0515 s/iter. Eval: 0.0351 s/iter. Total: 0.0878 s/iter. ETA=0:04:36
[12/10 06:08:34 d2.evaluation.evaluator]: Inference done 1904/5000. Dataloading: 0.0012 s/iter. Inference: 0.0516 s/iter. Eval: 0.0351 s/iter. Total: 0.0879 s/iter. ETA=0:04:32
[12/10 06:08:39 d2.evaluation.evaluator]: Inference done 1965/5000. Dataloading: 0.0012 s/iter. Inference: 0.0515 s/iter. Eval: 0.0350 s/iter. Total: 0.0877 s/iter. ETA=0:04:26
[12/10 06:08:44 d2.evaluation.evaluator]: Inference done 2021/5000. Dataloading: 0.0012 s/iter. Inference: 0.0515 s/iter. Eval: 0.0351 s/iter. Total: 0.0878 s/iter. ETA=0:04:21
[12/10 06:08:49 d2.evaluation.evaluator]: Inference done 2079/5000. Dataloading: 0.0012 s/iter. Inference: 0.0515 s/iter. Eval: 0.0351 s/iter. Total: 0.0878 s/iter. ETA=0:04:16
[12/10 06:08:54 d2.evaluation.evaluator]: Inference done 2138/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0350 s/iter. Total: 0.0877 s/iter. ETA=0:04:11
[12/10 06:08:59 d2.evaluation.evaluator]: Inference done 2197/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0350 s/iter. Total: 0.0876 s/iter. ETA=0:04:05
[12/10 06:09:04 d2.evaluation.evaluator]: Inference done 2253/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0350 s/iter. Total: 0.0877 s/iter. ETA=0:04:00
[12/10 06:09:09 d2.evaluation.evaluator]: Inference done 2312/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0350 s/iter. Total: 0.0876 s/iter. ETA=0:03:55
[12/10 06:09:14 d2.evaluation.evaluator]: Inference done 2374/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0349 s/iter. Total: 0.0875 s/iter. ETA=0:03:49
[12/10 06:09:19 d2.evaluation.evaluator]: Inference done 2429/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0350 s/iter. Total: 0.0876 s/iter. ETA=0:03:45
[12/10 06:09:24 d2.evaluation.evaluator]: Inference done 2487/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0350 s/iter. Total: 0.0876 s/iter. ETA=0:03:40
[12/10 06:09:29 d2.evaluation.evaluator]: Inference done 2544/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0350 s/iter. Total: 0.0876 s/iter. ETA=0:03:35
[12/10 06:09:34 d2.evaluation.evaluator]: Inference done 2600/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0350 s/iter. Total: 0.0876 s/iter. ETA=0:03:30
[12/10 06:09:39 d2.evaluation.evaluator]: Inference done 2655/5000. Dataloading: 0.0012 s/iter. Inference: 0.0515 s/iter. Eval: 0.0350 s/iter. Total: 0.0877 s/iter. ETA=0:03:25
[12/10 06:09:44 d2.evaluation.evaluator]: Inference done 2716/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0349 s/iter. Total: 0.0876 s/iter. ETA=0:03:20
[12/10 06:09:49 d2.evaluation.evaluator]: Inference done 2775/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0349 s/iter. Total: 0.0875 s/iter. ETA=0:03:14
[12/10 06:09:54 d2.evaluation.evaluator]: Inference done 2833/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0349 s/iter. Total: 0.0875 s/iter. ETA=0:03:09
[12/10 06:10:00 d2.evaluation.evaluator]: Inference done 2892/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0349 s/iter. Total: 0.0875 s/iter. ETA=0:03:04
[12/10 06:10:05 d2.evaluation.evaluator]: Inference done 2949/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0349 s/iter. Total: 0.0875 s/iter. ETA=0:02:59
[12/10 06:10:10 d2.evaluation.evaluator]: Inference done 3008/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0349 s/iter. Total: 0.0874 s/iter. ETA=0:02:54
[12/10 06:10:15 d2.evaluation.evaluator]: Inference done 3069/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0348 s/iter. Total: 0.0873 s/iter. ETA=0:02:48
[12/10 06:10:20 d2.evaluation.evaluator]: Inference done 3127/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0348 s/iter. Total: 0.0873 s/iter. ETA=0:02:43
[12/10 06:10:25 d2.evaluation.evaluator]: Inference done 3183/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0348 s/iter. Total: 0.0874 s/iter. ETA=0:02:38
[12/10 06:10:30 d2.evaluation.evaluator]: Inference done 3238/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0349 s/iter. Total: 0.0875 s/iter. ETA=0:02:34
[12/10 06:10:35 d2.evaluation.evaluator]: Inference done 3296/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0349 s/iter. Total: 0.0875 s/iter. ETA=0:02:29
[12/10 06:10:40 d2.evaluation.evaluator]: Inference done 3352/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0349 s/iter. Total: 0.0875 s/iter. ETA=0:02:24
[12/10 06:10:45 d2.evaluation.evaluator]: Inference done 3409/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0349 s/iter. Total: 0.0875 s/iter. ETA=0:02:19
[12/10 06:10:50 d2.evaluation.evaluator]: Inference done 3465/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0349 s/iter. Total: 0.0876 s/iter. ETA=0:02:14
[12/10 06:10:55 d2.evaluation.evaluator]: Inference done 3524/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0349 s/iter. Total: 0.0875 s/iter. ETA=0:02:09
[12/10 06:11:00 d2.evaluation.evaluator]: Inference done 3580/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0349 s/iter. Total: 0.0876 s/iter. ETA=0:02:04
[12/10 06:11:05 d2.evaluation.evaluator]: Inference done 3638/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0349 s/iter. Total: 0.0876 s/iter. ETA=0:01:59
[12/10 06:11:10 d2.evaluation.evaluator]: Inference done 3698/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0349 s/iter. Total: 0.0875 s/iter. ETA=0:01:53
[12/10 06:11:15 d2.evaluation.evaluator]: Inference done 3756/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0349 s/iter. Total: 0.0875 s/iter. ETA=0:01:48
[12/10 06:11:20 d2.evaluation.evaluator]: Inference done 3812/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0349 s/iter. Total: 0.0875 s/iter. ETA=0:01:44
[12/10 06:11:25 d2.evaluation.evaluator]: Inference done 3874/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0349 s/iter. Total: 0.0875 s/iter. ETA=0:01:38
[12/10 06:11:30 d2.evaluation.evaluator]: Inference done 3934/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0349 s/iter. Total: 0.0874 s/iter. ETA=0:01:33
[12/10 06:11:36 d2.evaluation.evaluator]: Inference done 3994/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0348 s/iter. Total: 0.0874 s/iter. ETA=0:01:27
[12/10 06:11:41 d2.evaluation.evaluator]: Inference done 4050/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0349 s/iter. Total: 0.0874 s/iter. ETA=0:01:23
[12/10 06:11:46 d2.evaluation.evaluator]: Inference done 4107/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0349 s/iter. Total: 0.0874 s/iter. ETA=0:01:18
[12/10 06:11:51 d2.evaluation.evaluator]: Inference done 4163/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0349 s/iter. Total: 0.0875 s/iter. ETA=0:01:13
[12/10 06:11:56 d2.evaluation.evaluator]: Inference done 4220/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0349 s/iter. Total: 0.0875 s/iter. ETA=0:01:08
[12/10 06:12:01 d2.evaluation.evaluator]: Inference done 4277/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0349 s/iter. Total: 0.0875 s/iter. ETA=0:01:03
[12/10 06:12:06 d2.evaluation.evaluator]: Inference done 4332/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0350 s/iter. Total: 0.0876 s/iter. ETA=0:00:58
[12/10 06:12:11 d2.evaluation.evaluator]: Inference done 4389/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0350 s/iter. Total: 0.0876 s/iter. ETA=0:00:53
[12/10 06:12:16 d2.evaluation.evaluator]: Inference done 4445/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0350 s/iter. Total: 0.0876 s/iter. ETA=0:00:48
[12/10 06:12:21 d2.evaluation.evaluator]: Inference done 4499/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0350 s/iter. Total: 0.0877 s/iter. ETA=0:00:43
[12/10 06:12:26 d2.evaluation.evaluator]: Inference done 4556/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0350 s/iter. Total: 0.0877 s/iter. ETA=0:00:38
[12/10 06:12:31 d2.evaluation.evaluator]: Inference done 4613/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0350 s/iter. Total: 0.0877 s/iter. ETA=0:00:33
[12/10 06:12:36 d2.evaluation.evaluator]: Inference done 4669/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0351 s/iter. Total: 0.0877 s/iter. ETA=0:00:29
[12/10 06:12:41 d2.evaluation.evaluator]: Inference done 4726/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0351 s/iter. Total: 0.0877 s/iter. ETA=0:00:24
[12/10 06:12:46 d2.evaluation.evaluator]: Inference done 4786/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0350 s/iter. Total: 0.0877 s/iter. ETA=0:00:18
[12/10 06:12:51 d2.evaluation.evaluator]: Inference done 4841/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0351 s/iter. Total: 0.0877 s/iter. ETA=0:00:13
[12/10 06:12:56 d2.evaluation.evaluator]: Inference done 4900/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0351 s/iter. Total: 0.0877 s/iter. ETA=0:00:08
[12/10 06:13:01 d2.evaluation.evaluator]: Inference done 4955/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0351 s/iter. Total: 0.0877 s/iter. ETA=0:00:03
[12/10 06:13:05 d2.evaluation.evaluator]: Total inference time: 0:07:18.462772 (0.087780 s / iter per device, on 1 devices)
[12/10 06:13:05 d2.evaluation.evaluator]: Total inference pure compute time: 0:04:16 (0.051425 s / iter per device, on 1 devices)
[12/10 06:13:05 d2.evaluation.panoptic_evaluation]: Writing all panoptic predictions to /tmp/panoptic_evalk2hu_0iz ...
[12/10 06:13:29 d2.evaluation.panoptic_evaluation]: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 7.473  | 45.652 | 10.089 |      133      |
| Things | 5.731  | 47.283 | 7.823  |      80       |
| Stuff  | 10.102 | 43.191 | 13.509 |      53       |
[12/10 06:13:30 d2.evaluation.coco_evaluation]: Preparing results for COCO format ...
[12/10 06:13:30 d2.evaluation.coco_evaluation]: Saving results to ./output/inference/coco_instances_results.json
[12/10 06:13:30 d2.evaluation.coco_evaluation]: Evaluating predictions with unofficial COCO API...
Loading and preparing results...
DONE (t=0.03s)
creating index...
index created!
[12/10 06:13:30 d2.evaluation.fast_eval_api]: Evaluate annotation type *bbox*
[12/10 06:13:38 d2.evaluation.fast_eval_api]: COCOeval_opt.evaluate() finished in 7.87 seconds.
[12/10 06:13:38 d2.evaluation.fast_eval_api]: Accumulating evaluation results...
[12/10 06:13:39 d2.evaluation.fast_eval_api]: COCOeval_opt.accumulate() finished in 0.64 seconds.
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.017
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.037
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.015
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.001
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.012
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.031
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.031
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.043
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.044
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.002
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.025
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.077
[12/10 06:13:39 d2.evaluation.coco_evaluation]: Evaluation results for bbox: 
|  AP   |  AP50  |  AP75  |  APs  |  APm  |  APl  |
|:-----:|:------:|:------:|:-----:|:-----:|:-----:|
| 1.745 | 3.691  | 1.490  | 0.129 | 1.201 | 3.089 |
[12/10 06:13:39 d2.evaluation.coco_evaluation]: Per-category bbox AP: 
| category      | AP    | category     | AP     | category       | AP     |
|:--------------|:------|:-------------|:-------|:---------------|:-------|
| person        | 7.824 | bicycle      | 0.123  | car            | 3.176  |
| motorcycle    | 1.934 | airplane     | 0.927  | bus            | 11.679 |
| train         | 7.992 | truck        | 0.405  | boat           | 0.160  |
| traffic light | 0.699 | fire hydrant | 0.149  | stop sign      | 8.917  |
| parking meter | 0.000 | bench        | 0.143  | bird           | 0.000  |
| cat           | 3.640 | dog          | 0.293  | horse          | 1.655  |
| sheep         | 1.289 | cow          | 1.775  | elephant       | 8.733  |
| bear          | 9.796 | zebra        | 16.663 | giraffe        | 10.125 |
| backpack      | 0.000 | umbrella     | 0.450  | handbag        | 0.000  |
| tie           | 0.000 | suitcase     | 0.990  | frisbee        | 2.470  |
| skis          | 0.051 | snowboard    | 0.000  | sports ball    | 1.030  |
| kite          | 3.472 | baseball bat | 0.000  | baseball glove | 0.000  |
| skateboard    | 0.050 | surfboard    | 0.986  | tennis racket  | 1.285  |
| bottle        | 0.335 | wine glass   | 0.000  | cup            | 0.721  |
| fork          | 0.000 | knife        | 0.000  | spoon          | 0.000  |
| bowl          | 0.203 | banana       | 0.044  | apple          | 0.000  |
| sandwich      | 0.000 | orange       | 1.429  | broccoli       | 0.113  |
| carrot        | 0.336 | hot dog      | 0.000  | pizza          | 2.451  |
| donut         | 0.000 | cake         | 0.000  | chair          | 0.351  |
| couch         | 2.629 | potted plant | 0.076  | bed            | 4.453  |
| dining table  | 1.384 | toilet       | 6.275  | tv             | 3.915  |
| laptop        | 0.811 | mouse        | 0.000  | remote         | 0.000  |
| keyboard      | 0.047 | cell phone   | 0.007  | microwave      | 0.000  |
| oven          | 0.123 | toaster      | 0.000  | sink           | 0.985  |
| refrigerator  | 1.072 | book         | 0.026  | clock          | 2.450  |
| vase          | 0.066 | scissors     | 0.000  | teddy bear     | 0.414  |
| hair drier    | 0.000 | toothbrush   | 0.000  |                |        |
Loading and preparing results...
DONE (t=0.47s)
creating index...
index created!
[12/10 06:13:40 d2.evaluation.fast_eval_api]: Evaluate annotation type *segm*
[12/10 06:13:49 d2.evaluation.fast_eval_api]: COCOeval_opt.evaluate() finished in 9.03 seconds.
[12/10 06:13:49 d2.evaluation.fast_eval_api]: Accumulating evaluation results...
[12/10 06:13:50 d2.evaluation.fast_eval_api]: COCOeval_opt.accumulate() finished in 0.69 seconds.
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.019
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.038
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.017
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.001
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.012
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.043
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.029
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.037
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.037
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.002
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.022
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.066
[12/10 06:13:52 d2.evaluation.coco_evaluation]: Evaluation results for segm: 
|  AP   |  AP50  |  AP75  |  APs  |  APm  |  APl  |
|:-----:|:------:|:------:|:-----:|:-----:|:-----:|
| 1.886 | 3.847  | 1.662  | 0.090 | 1.161 | 4.271 |
[12/10 06:13:52 d2.evaluation.coco_evaluation]: Per-category segm AP: 
| category      | AP     | category     | AP     | category       | AP     |
|:--------------|:-------|:-------------|:-------|:---------------|:-------|
| person        | 5.179  | bicycle      | 0.029  | car            | 3.172  |
| motorcycle    | 1.287  | airplane     | 0.983  | bus            | 13.777 |
| train         | 9.478  | truck        | 0.383  | boat           | 0.089  |
| traffic light | 0.558  | fire hydrant | 0.099  | stop sign      | 20.543 |
| parking meter | 0.000  | bench        | 0.043  | bird           | 0.000  |
| cat           | 3.280  | dog          | 0.274  | horse          | 0.981  |
| sheep         | 1.407  | cow          | 2.129  | elephant       | 8.642  |
| bear          | 12.111 | zebra        | 16.620 | giraffe        | 6.514  |
| backpack      | 0.000  | umbrella     | 0.916  | handbag        | 0.000  |
| tie           | 0.000  | suitcase     | 0.891  | frisbee        | 2.056  |
| skis          | 0.000  | snowboard    | 0.000  | sports ball    | 0.970  |
| kite          | 2.599  | baseball bat | 0.000  | baseball glove | 0.000  |
| skateboard    | 0.000  | surfboard    | 0.954  | tennis racket  | 3.080  |
| bottle        | 0.564  | wine glass   | 0.000  | cup            | 0.965  |
| fork          | 0.000  | knife        | 0.000  | spoon          | 0.000  |
| bowl          | 0.422  | banana       | 0.058  | apple          | 0.154  |
| sandwich      | 0.149  | orange       | 1.951  | broccoli       | 0.042  |
| carrot        | 0.228  | hot dog      | 0.000  | pizza          | 1.658  |
| donut         | 0.000  | cake         | 0.000  | chair          | 0.703  |
| couch         | 1.312  | potted plant | 0.052  | bed            | 2.760  |
| dining table  | 0.182  | toilet       | 8.876  | tv             | 3.967  |
| laptop        | 1.195  | mouse        | 0.000  | remote         | 0.000  |
| keyboard      | 0.702  | cell phone   | 0.000  | microwave      | 0.000  |
| oven          | 0.079  | toaster      | 0.000  | sink           | 1.894  |
| refrigerator  | 0.013  | book         | 0.026  | clock          | 3.795  |
| vase          | 0.000  | scissors     | 0.000  | teddy bear     | 0.088  |
| hair drier    | 0.000  | toothbrush   | 0.000  |                |        |
[12/10 06:13:54 d2.engine.defaults]: Evaluation results for coco_2017_val_panoptic in csv format:
[12/10 06:13:54 d2.evaluation.testing]: copypaste: Task: panoptic_seg
[12/10 06:13:54 d2.evaluation.testing]: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[12/10 06:13:54 d2.evaluation.testing]: copypaste: 7.4731,45.6519,10.0892,5.7314,47.2826,7.8232,10.1021,43.1906,13.5094
[12/10 06:13:54 d2.evaluation.testing]: copypaste: Task: bbox
[12/10 06:13:54 d2.evaluation.testing]: copypaste: AP,AP50,AP75,APs,APm,APl
[12/10 06:13:54 d2.evaluation.testing]: copypaste: 1.7449,3.6910,1.4899,0.1287,1.2007,3.0892
[12/10 06:13:54 d2.evaluation.testing]: copypaste: Task: segm
[12/10 06:13:54 d2.evaluation.testing]: copypaste: AP,AP50,AP75,APs,APm,APl
[12/10 06:13:54 d2.evaluation.testing]: copypaste: 1.8860,3.8475,1.6623,0.0896,1.1606,4.2708