env: DETECTRON2_DATASETS=/content/datasets
Command Line Args: Namespace(config_file='./detectron2/projects/Panoptic-DeepLab/configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.RESNETS.NORM', 'BN', 'MODEL.INS_EMBED_HEAD.NORM', 'BN', 'MODEL.SEM_SEG_HEAD.NORM', 'BN', 'SOLVER.MAX_ITER', '10000', 'SOLVER.IMS_PER_BATCH', '5', 'SOLVER.BASE_LR', '0.0025', 'MODEL.BACKBONE.FREEZE_AT', '2'], resume=False)
Loading config ./detectron2/projects/Panoptic-DeepLab/configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv.yaml with yaml.unsafe_load. Your machine may be at risk if the file contains malicious content.
[12/10 06:18:10 detectron2]: Rank of current process: 0. World size: 1
[12/10 06:18:10 detectron2]: Environment info:
----------------------  ----------------------------------------------------------------
sys.platform            linux
Python                  3.7.12 (default, Jan 15 2022, 18:48:18) [GCC 7.5.0]
numpy                   1.21.5
detectron2              0.6 @/content/detectron2/detectron2
Compiler                GCC 7.5
CUDA compiler           CUDA 11.1
detectron2 arch flags   7.0
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.10.0+cu111 @/usr/local/lib/python3.7/dist-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0                   Tesla V100-SXM2-16GB (arch=7.0)
Driver version          460.32.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.1.2
torchvision             0.11.1+cu111 @/usr/local/lib/python3.7/dist-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.5.post20221122
iopath                  0.1.9
cv2                     4.1.2
----------------------  ----------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[12/10 06:18:10 detectron2]: Command line arguments: Namespace(config_file='./detectron2/projects/Panoptic-DeepLab/configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv.yaml', dist_url='tcp://127.0.0.1:49152', eval_only=False, machine_rank=0, num_gpus=1, num_machines=1, opts=['MODEL.RESNETS.NORM', 'BN', 'MODEL.INS_EMBED_HEAD.NORM', 'BN', 'MODEL.SEM_SEG_HEAD.NORM', 'BN', 'SOLVER.MAX_ITER', '10000', 'SOLVER.IMS_PER_BATCH', '5', 'SOLVER.BASE_LR', '0.0025', 'MODEL.BACKBONE.FREEZE_AT', '2'], resume=False)
[12/10 06:18:10 detectron2]: Contents of args.config_file=./detectron2/projects/Panoptic-DeepLab/configs/COCO-PanopticSegmentation/panoptic_deeplab_R_52_os16_mg124_poly_200k_bs64_crop_640_640_coco_dsconv.yaml:
_BASE_: ../Cityscapes-PanopticSegmentation/Base-PanopticDeepLab-OS16.yaml
MODEL:
  WEIGHTS: "detectron2://DeepLab/R-52.pkl"
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  BACKBONE:
    NAME: "build_resnet_deeplab_backbone"
  RESNETS:
    DEPTH: 50
    NORM: "SyncBN"
    RES5_MULTI_GRID: [1, 2, 4]
    STEM_TYPE: "deeplab"
    STEM_OUT_CHANNELS: 128
    STRIDE_IN_1X1: False
  SEM_SEG_HEAD:
    NUM_CLASSES: 133
    LOSS_TOP_K: 1.0
    USE_DEPTHWISE_SEPARABLE_CONV: True
  PANOPTIC_DEEPLAB:
    STUFF_AREA: 4096
    NMS_KERNEL: 41
    SIZE_DIVISIBILITY: 640
    USE_DEPTHWISE_SEPARABLE_CONV: True
DATASETS:
  TRAIN: ("coco_2017_train_panoptic",)
  TEST: ("coco_2017_val_panoptic",)
SOLVER:
  BASE_LR: 0.0005
  MAX_ITER: 200000
  IMS_PER_BATCH: 64
INPUT:
  FORMAT: "RGB"
  GAUSSIAN_SIGMA: 8
  MIN_SIZE_TRAIN: !!python/object/apply:eval ["[int(x * 0.1 * 640) for x in range(5, 16)]"]
  MIN_SIZE_TRAIN_SAMPLING: "choice"
  MIN_SIZE_TEST: 640
  MAX_SIZE_TRAIN: 960
  MAX_SIZE_TEST: 640
  CROP:
    ENABLED: True
    TYPE: "absolute"
    SIZE: (640, 640)

[12/10 06:18:10 detectron2]: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 10
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - coco_2017_val_panoptic
  TRAIN:
  - coco_2017_train_panoptic
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: true
    SINGLE_CATEGORY_MAX_AREA: 1.0
    SIZE:
    - 640
    - 640
    TYPE: absolute
  FORMAT: RGB
  GAUSSIAN_SIGMA: 8
  IGNORE_CROWD_IN_SEMANTIC: false
  IGNORE_STUFF_IN_OFFSET: true
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 640
  MAX_SIZE_TRAIN: 960
  MIN_SIZE_TEST: 640
  MIN_SIZE_TRAIN:
  - 320
  - 384
  - 448
  - 512
  - 576
  - 640
  - 704
  - 768
  - 832
  - 896
  - 960
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
  SMALL_INSTANCE_AREA: 4096
  SMALL_INSTANCE_WEIGHT: 3
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 2
    NAME: build_resnet_deeplab_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  INS_EMBED_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    CENTER_LOSS_WEIGHT: 200.0
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    HEAD_CHANNELS: 32
    IN_FEATURES:
    - res2
    - res3
    - res5
    NAME: PanopticDeepLabInsEmbedHead
    NORM: BN
    OFFSET_LOSS_WEIGHT: 0.01
    PROJECT_CHANNELS:
    - 32
    - 64
    PROJECT_FEATURES:
    - res2
    - res3
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: PanopticDeepLab
  PANOPTIC_DEEPLAB:
    BENCHMARK_NETWORK_SPEED: false
    CENTER_THRESHOLD: 0.1
    NMS_KERNEL: 41
    PREDICT_INSTANCES: true
    SIZE_DIVISIBILITY: 640
    STUFF_AREA: 4096
    TOP_K_INSTANCE: 200
    USE_DEPTHWISE_SEPARABLE_CONV: true
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: BN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res2
    - res3
    - res5
    RES2_OUT_CHANNELS: 256
    RES4_DILATION: 1
    RES5_DILATION: 2
    RES5_MULTI_GRID:
    - 1
    - 2
    - 4
    STEM_OUT_CHANNELS: 128
    STEM_TYPE: deeplab
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id001
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS:
    - 10.0
    - 10.0
    - 5.0
    - 5.0
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 80
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    ASPP_CHANNELS: 256
    ASPP_DILATIONS:
    - 6
    - 12
    - 18
    ASPP_DROPOUT: 0.1
    COMMON_STRIDE: 4
    CONVS_DIM: 256
    HEAD_CHANNELS: 256
    IGNORE_VALUE: 255
    IN_FEATURES:
    - res2
    - res3
    - res5
    LOSS_TOP_K: 1.0
    LOSS_TYPE: hard_pixel_mining
    LOSS_WEIGHT: 1.0
    NAME: PanopticDeepLabSemSegHead
    NORM: BN
    NUM_CLASSES: 133
    PROJECT_CHANNELS:
    - 32
    - 64
    PROJECT_FEATURES:
    - res2
    - res3
    USE_DEPTHWISE_SEPARABLE_CONV: true
  WEIGHTS: detectron2://DeepLab/R-52.pkl
OUTPUT_DIR: ./output
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.0025
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 5
  LR_SCHEDULER_NAME: WarmupPolyLR
  MAX_ITER: 10000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  OPTIMIZER: ADAM
  POLY_LR_CONSTANT_ENDING: 0.0
  POLY_LR_POWER: 0.9
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 30000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0
  WEIGHT_DECAY_BIAS: 0.0
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: false
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/10 06:18:11 detectron2]: Full config saved to ./output/config.yaml
[12/10 06:18:11 d2.utils.env]: Using a generated random seed 11167370
[12/10 06:18:15 d2.engine.defaults]: Model:
PanopticDeepLab(
  (backbone): ResNet(
    (stem): DeepLabStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
      )
      (conv2): Conv2d(
        64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
      )
      (conv3): Conv2d(
        64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): FrozenBatchNorm2d(num_features=128, eps=1e-05)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
        (conv1): Conv2d(
          128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=64, eps=1e-05)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): FrozenBatchNorm2d(num_features=256, eps=1e-05)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(8, 8), dilation=(8, 8), bias=False
          (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (sem_seg_head): PanopticDeepLabSemSegHead(
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            288, 288, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=288, bias=False
            (norm): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            288, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AvgPool2d(kernel_size=(40, 40), stride=1, padding=0)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        256, 256, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=256, bias=False
        (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (predictor): Conv2d(256, 133, kernel_size=(1, 1), stride=(1, 1))
    (loss): DeepLabCE(
      (criterion): CrossEntropyLoss()
    )
  )
  (ins_embed_head): PanopticDeepLabInsEmbedHead(
    (decoder): ModuleDict(
      (res2): ModuleDict(
        (project_conv): Conv2d(
          256, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            160, 160, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=160, bias=False
            (norm): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res3): ModuleDict(
        (project_conv): Conv2d(
          512, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (fuse_conv): DepthwiseSeparableConv2d(
          (depthwise): Conv2d(
            320, 320, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=320, bias=False
            (norm): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (pointwise): Conv2d(
            320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (res5): ModuleDict(
        (project_conv): ASPP(
          (convs): ModuleList(
            (0): Conv2d(
              2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
              (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(6, 6), dilation=(6, 6), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(12, 12), dilation=(12, 12), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): DepthwiseSeparableConv2d(
              (depthwise): Conv2d(
                2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(18, 18), dilation=(18, 18), groups=2048, bias=False
                (norm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
              (pointwise): Conv2d(
                2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
                (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Sequential(
              (0): AvgPool2d(kernel_size=(40, 40), stride=1, padding=0)
              (1): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (project): Conv2d(
            1280, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
            (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (fuse_conv): None
      )
    )
    (center_head): Sequential(
      (0): Conv2d(
        128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): Conv2d(
        128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
        (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (center_predictor): Conv2d(32, 1, kernel_size=(1, 1), stride=(1, 1))
    (offset_head): DepthwiseSeparableConv2d(
      (depthwise): Conv2d(
        128, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=128, bias=False
        (norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (pointwise): Conv2d(
        128, 32, kernel_size=(1, 1), stride=(1, 1), bias=False
        (norm): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (offset_predictor): Conv2d(32, 2, kernel_size=(1, 1), stride=(1, 1))
    (center_loss): MSELoss()
    (offset_loss): L1Loss()
  )
)
[12/10 06:18:15 d2.projects.panoptic_deeplab.dataset_mapper]: Augmentations used in training: [ResizeShortestEdge(short_edge_length=(320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960), max_size=960, sample_style='choice'), RandomCrop(crop_type='absolute', crop_size=[640, 640]), RandomFlip()]
[12/10 06:18:22 d2.data.build]: Using training sampler TrainingSampler
[12/10 06:18:22 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/10 06:18:22 d2.data.common]: Serializing 118287 elements to byte tensors and concatenating them all ...
[12/10 06:18:23 d2.data.common]: Serialized dataset takes 80.32 MiB
/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 10 worker processes in total. Our suggested max number of worker in current system is 8, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  cpuset_checked))
[12/10 06:18:26 fvcore.common.checkpoint]: [Checkpointer] Loading from detectron2://DeepLab/R-52.pkl ...
[12/10 06:18:26 fvcore.common.checkpoint]: Reading a file from 'torchvision'
[12/10 06:18:26 d2.checkpoint.c2_model_loading]: Following weights matched with submodule backbone:
| Names in Model    | Names in Checkpoint                                                                                        | Shapes                                             |
|:------------------|:-----------------------------------------------------------------------------------------------------------|:---------------------------------------------------|
| res2.0.conv1.*    | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,128,1,1)               |
| res2.0.conv2.*    | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,64,3,3)                |
| res2.0.conv3.*    | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,64,1,1)           |
| res2.0.shortcut.* | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                          | (256,) (256,) (256,) (256,) (256,128,1,1)          |
| res2.1.conv1.*    | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,256,1,1)               |
| res2.1.conv2.*    | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,64,3,3)                |
| res2.1.conv3.*    | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,64,1,1)           |
| res2.2.conv1.*    | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,256,1,1)               |
| res2.2.conv2.*    | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (64,) (64,) (64,) (64,) (64,64,3,3)                |
| res2.2.conv3.*    | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                             | (256,) (256,) (256,) (256,) (256,64,1,1)           |
| res3.0.conv1.*    | res3.0.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,256,1,1)       |
| res3.0.conv2.*    | res3.0.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,128,3,3)       |
| res3.0.conv3.*    | res3.0.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,128,1,1)       |
| res3.0.shortcut.* | res3.0.shortcut.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) () (512,) (512,) (512,) (512,256,1,1)       |
| res3.1.conv1.*    | res3.1.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,512,1,1)       |
| res3.1.conv2.*    | res3.1.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,128,3,3)       |
| res3.1.conv3.*    | res3.1.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,128,1,1)       |
| res3.2.conv1.*    | res3.2.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,512,1,1)       |
| res3.2.conv2.*    | res3.2.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,128,3,3)       |
| res3.2.conv3.*    | res3.2.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,128,1,1)       |
| res3.3.conv1.*    | res3.3.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,512,1,1)       |
| res3.3.conv2.*    | res3.3.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) () (128,) (128,) (128,) (128,128,3,3)       |
| res3.3.conv3.*    | res3.3.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,128,1,1)       |
| res4.0.conv1.*    | res4.0.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,512,1,1)       |
| res4.0.conv2.*    | res4.0.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.0.conv3.*    | res4.0.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.0.shortcut.* | res4.0.shortcut.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) () (1024,) (1024,) (1024,) (1024,512,1,1)  |
| res4.1.conv1.*    | res4.1.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.1.conv2.*    | res4.1.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.1.conv3.*    | res4.1.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.2.conv1.*    | res4.2.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.2.conv2.*    | res4.2.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.2.conv3.*    | res4.2.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.3.conv1.*    | res4.3.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.3.conv2.*    | res4.3.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.3.conv3.*    | res4.3.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.4.conv1.*    | res4.4.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.4.conv2.*    | res4.4.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.4.conv3.*    | res4.4.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res4.5.conv1.*    | res4.5.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,1024,1,1)      |
| res4.5.conv2.*    | res4.5.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) () (256,) (256,) (256,) (256,256,3,3)       |
| res4.5.conv3.*    | res4.5.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) () (1024,) (1024,) (1024,) (1024,256,1,1)  |
| res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,1024,1,1)      |
| res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,512,3,3)       |
| res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) () (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) () (2048,) (2048,) (2048,) (2048,1024,1,1) |
| res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,2048,1,1)      |
| res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,512,3,3)       |
| res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) () (2048,) (2048,) (2048,) (2048,512,1,1)  |
| res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,2048,1,1)      |
| res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) () (512,) (512,) (512,) (512,512,3,3)       |
| res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.num_batches_tracked,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) () (2048,) (2048,) (2048,) (2048,512,1,1)  |
| stem.conv1.*      | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                               | (64,) (64,) (64,) (64,) (64,3,3,3)                 |
| stem.conv2.*      | stem.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                               | (64,) (64,) (64,) (64,) (64,64,3,3)                |
| stem.conv3.*      | stem.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}                               | (128,) (128,) (128,) (128,) (128,64,3,3)           |
WARNING [12/10 06:18:26 fvcore.common.checkpoint]: Some model parameters or buffers are not found in the checkpoint:
ins_embed_head.center_head.0.norm.{bias, running_mean, running_var, weight}
ins_embed_head.center_head.0.weight
ins_embed_head.center_head.1.norm.{bias, running_mean, running_var, weight}
ins_embed_head.center_head.1.weight
ins_embed_head.center_predictor.{bias, weight}
ins_embed_head.decoder.res2.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res2.fuse_conv.depthwise.weight
ins_embed_head.decoder.res2.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res2.fuse_conv.pointwise.weight
ins_embed_head.decoder.res2.project_conv.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res2.project_conv.weight
ins_embed_head.decoder.res3.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res3.fuse_conv.depthwise.weight
ins_embed_head.decoder.res3.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res3.fuse_conv.pointwise.weight
ins_embed_head.decoder.res3.project_conv.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res3.project_conv.weight
ins_embed_head.decoder.res5.project_conv.convs.0.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.0.weight
ins_embed_head.decoder.res5.project_conv.convs.1.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.1.depthwise.weight
ins_embed_head.decoder.res5.project_conv.convs.1.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.1.pointwise.weight
ins_embed_head.decoder.res5.project_conv.convs.2.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.2.depthwise.weight
ins_embed_head.decoder.res5.project_conv.convs.2.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.2.pointwise.weight
ins_embed_head.decoder.res5.project_conv.convs.3.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.3.depthwise.weight
ins_embed_head.decoder.res5.project_conv.convs.3.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.convs.3.pointwise.weight
ins_embed_head.decoder.res5.project_conv.convs.4.1.{bias, weight}
ins_embed_head.decoder.res5.project_conv.project.norm.{bias, running_mean, running_var, weight}
ins_embed_head.decoder.res5.project_conv.project.weight
ins_embed_head.offset_head.depthwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.offset_head.depthwise.weight
ins_embed_head.offset_head.pointwise.norm.{bias, running_mean, running_var, weight}
ins_embed_head.offset_head.pointwise.weight
ins_embed_head.offset_predictor.{bias, weight}
sem_seg_head.decoder.res2.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res2.fuse_conv.depthwise.weight
sem_seg_head.decoder.res2.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res2.fuse_conv.pointwise.weight
sem_seg_head.decoder.res2.project_conv.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res2.project_conv.weight
sem_seg_head.decoder.res3.fuse_conv.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res3.fuse_conv.depthwise.weight
sem_seg_head.decoder.res3.fuse_conv.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res3.fuse_conv.pointwise.weight
sem_seg_head.decoder.res3.project_conv.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res3.project_conv.weight
sem_seg_head.decoder.res5.project_conv.convs.0.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.0.weight
sem_seg_head.decoder.res5.project_conv.convs.1.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.1.depthwise.weight
sem_seg_head.decoder.res5.project_conv.convs.1.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.1.pointwise.weight
sem_seg_head.decoder.res5.project_conv.convs.2.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.2.depthwise.weight
sem_seg_head.decoder.res5.project_conv.convs.2.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.2.pointwise.weight
sem_seg_head.decoder.res5.project_conv.convs.3.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.3.depthwise.weight
sem_seg_head.decoder.res5.project_conv.convs.3.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.convs.3.pointwise.weight
sem_seg_head.decoder.res5.project_conv.convs.4.1.{bias, weight}
sem_seg_head.decoder.res5.project_conv.project.norm.{bias, running_mean, running_var, weight}
sem_seg_head.decoder.res5.project_conv.project.weight
sem_seg_head.head.depthwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.head.depthwise.weight
sem_seg_head.head.pointwise.norm.{bias, running_mean, running_var, weight}
sem_seg_head.head.pointwise.weight
sem_seg_head.predictor.{bias, weight}
WARNING [12/10 06:18:26 fvcore.common.checkpoint]: The checkpoint state_dict contains keys that are not used by the model:
  res2.0.conv1.norm.num_batches_tracked
  res2.0.conv2.norm.num_batches_tracked
  res2.0.conv3.norm.num_batches_tracked
  res2.0.shortcut.norm.num_batches_tracked
  res2.1.conv1.norm.num_batches_tracked
  res2.1.conv2.norm.num_batches_tracked
  res2.1.conv3.norm.num_batches_tracked
  res2.2.conv1.norm.num_batches_tracked
  res2.2.conv2.norm.num_batches_tracked
  res2.2.conv3.norm.num_batches_tracked
  stem.conv1.norm.num_batches_tracked
  stem.conv2.norm.num_batches_tracked
  stem.conv3.norm.num_batches_tracked
  stem.fc.{bias, weight}
[12/10 06:18:26 d2.engine.train_loop]: Starting training from iteration 0
/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 10 worker processes in total. Our suggested max number of worker in current system is 8, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  cpuset_checked))
[12/10 06:18:35 d2.utils.events]:  eta: 1:01:40  iter: 19  total_loss: 6.215  loss_sem_seg: 3.928  loss_center: 0.7487  loss_offset: 1.547  time: 0.3698  data_time: 0.0713  lr: 4.9867e-05  max_mem: 8976M
[12/10 06:18:42 d2.utils.events]:  eta: 1:01:57  iter: 39  total_loss: 6.006  loss_sem_seg: 3.91  loss_center: 0.7744  loss_offset: 1.597  time: 0.3729  data_time: 0.0259  lr: 9.9552e-05  max_mem: 8976M
[12/10 06:18:50 d2.utils.events]:  eta: 1:01:55  iter: 59  total_loss: 5.988  loss_sem_seg: 3.462  loss_center: 0.6917  loss_offset: 1.692  time: 0.3732  data_time: 0.0250  lr: 0.00014906  max_mem: 8976M
[12/10 06:18:57 d2.utils.events]:  eta: 1:01:51  iter: 79  total_loss: 5.892  loss_sem_seg: 3.561  loss_center: 0.7953  loss_offset: 1.628  time: 0.3740  data_time: 0.0272  lr: 0.00019838  max_mem: 8976M
[12/10 06:19:05 d2.utils.events]:  eta: 1:01:42  iter: 99  total_loss: 5.633  loss_sem_seg: 3.258  loss_center: 0.5123  loss_offset: 1.734  time: 0.3744  data_time: 0.0265  lr: 0.00024753  max_mem: 8976M
[12/10 06:19:13 d2.utils.events]:  eta: 1:01:34  iter: 119  total_loss: 5.63  loss_sem_seg: 3.299  loss_center: 0.6517  loss_offset: 1.758  time: 0.3746  data_time: 0.0250  lr: 0.00029649  max_mem: 8976M
[12/10 06:19:20 d2.utils.events]:  eta: 1:01:27  iter: 139  total_loss: 5.345  loss_sem_seg: 2.83  loss_center: 0.8137  loss_offset: 1.618  time: 0.3746  data_time: 0.0264  lr: 0.00034528  max_mem: 8976M
[12/10 06:19:28 d2.utils.events]:  eta: 1:01:19  iter: 159  total_loss: 5.301  loss_sem_seg: 2.822  loss_center: 0.7517  loss_offset: 1.656  time: 0.3746  data_time: 0.0259  lr: 0.00039388  max_mem: 8976M
[12/10 06:19:35 d2.utils.events]:  eta: 1:01:12  iter: 179  total_loss: 5.236  loss_sem_seg: 2.941  loss_center: 0.7811  loss_offset: 1.473  time: 0.3745  data_time: 0.0247  lr: 0.0004423  max_mem: 8976M
[12/10 06:19:43 d2.utils.events]:  eta: 1:01:04  iter: 199  total_loss: 5.091  loss_sem_seg: 2.68  loss_center: 0.6944  loss_offset: 1.431  time: 0.3747  data_time: 0.0284  lr: 0.00049055  max_mem: 8976M
[12/10 06:19:50 d2.utils.events]:  eta: 1:00:56  iter: 219  total_loss: 4.969  loss_sem_seg: 2.714  loss_center: 0.5805  loss_offset: 1.56  time: 0.3747  data_time: 0.0264  lr: 0.00053861  max_mem: 8976M
[12/10 06:19:58 d2.utils.events]:  eta: 1:00:49  iter: 239  total_loss: 4.835  loss_sem_seg: 2.645  loss_center: 0.7178  loss_offset: 1.406  time: 0.3746  data_time: 0.0259  lr: 0.00058649  max_mem: 8976M
[12/10 06:20:05 d2.utils.events]:  eta: 1:00:42  iter: 259  total_loss: 4.984  loss_sem_seg: 2.724  loss_center: 0.8199  loss_offset: 1.486  time: 0.3748  data_time: 0.0274  lr: 0.0006342  max_mem: 8976M
[12/10 06:20:13 d2.utils.events]:  eta: 1:00:34  iter: 279  total_loss: 4.838  loss_sem_seg: 2.712  loss_center: 0.6057  loss_offset: 1.576  time: 0.3749  data_time: 0.0243  lr: 0.00068172  max_mem: 8976M
[12/10 06:20:20 d2.utils.events]:  eta: 1:00:25  iter: 299  total_loss: 4.945  loss_sem_seg: 2.529  loss_center: 0.8174  loss_offset: 1.515  time: 0.3747  data_time: 0.0245  lr: 0.00072906  max_mem: 8976M
[12/10 06:20:28 d2.utils.events]:  eta: 1:00:19  iter: 319  total_loss: 4.435  loss_sem_seg: 2.459  loss_center: 0.6412  loss_offset: 1.245  time: 0.3747  data_time: 0.0266  lr: 0.00077622  max_mem: 8976M
[12/10 06:20:35 d2.utils.events]:  eta: 1:00:12  iter: 339  total_loss: 4.907  loss_sem_seg: 2.718  loss_center: 0.7116  loss_offset: 1.462  time: 0.3747  data_time: 0.0243  lr: 0.0008232  max_mem: 8976M
[12/10 06:20:43 d2.utils.events]:  eta: 1:00:03  iter: 359  total_loss: 4.703  loss_sem_seg: 2.692  loss_center: 0.5492  loss_offset: 1.503  time: 0.3747  data_time: 0.0265  lr: 0.00087  max_mem: 8976M
[12/10 06:20:50 d2.utils.events]:  eta: 0:59:54  iter: 379  total_loss: 4.762  loss_sem_seg: 2.665  loss_center: 0.54  loss_offset: 1.343  time: 0.3746  data_time: 0.0250  lr: 0.00091662  max_mem: 8976M
[12/10 06:20:58 d2.utils.events]:  eta: 0:59:49  iter: 399  total_loss: 4.469  loss_sem_seg: 2.467  loss_center: 0.6616  loss_offset: 1.329  time: 0.3747  data_time: 0.0260  lr: 0.00096306  max_mem: 8976M
[12/10 06:21:05 d2.utils.events]:  eta: 0:59:42  iter: 419  total_loss: 4.732  loss_sem_seg: 2.676  loss_center: 0.6099  loss_offset: 1.359  time: 0.3748  data_time: 0.0251  lr: 0.0010093  max_mem: 8976M
[12/10 06:21:13 d2.utils.events]:  eta: 0:59:34  iter: 439  total_loss: 4.59  loss_sem_seg: 2.555  loss_center: 0.6511  loss_offset: 1.471  time: 0.3749  data_time: 0.0275  lr: 0.0010554  max_mem: 8976M
[12/10 06:21:20 d2.utils.events]:  eta: 0:59:27  iter: 459  total_loss: 4.01  loss_sem_seg: 2.348  loss_center: 0.6278  loss_offset: 1.184  time: 0.3749  data_time: 0.0260  lr: 0.0011013  max_mem: 8976M
[12/10 06:21:28 d2.utils.events]:  eta: 0:59:20  iter: 479  total_loss: 4.535  loss_sem_seg: 2.368  loss_center: 0.6908  loss_offset: 1.44  time: 0.3749  data_time: 0.0260  lr: 0.001147  max_mem: 8976M
[12/10 06:21:35 d2.utils.events]:  eta: 0:59:12  iter: 499  total_loss: 4.793  loss_sem_seg: 2.801  loss_center: 0.8846  loss_offset: 1.305  time: 0.3750  data_time: 0.0256  lr: 0.0011925  max_mem: 8976M
[12/10 06:21:43 d2.utils.events]:  eta: 0:59:08  iter: 519  total_loss: 4.699  loss_sem_seg: 2.339  loss_center: 0.7616  loss_offset: 1.298  time: 0.3752  data_time: 0.0270  lr: 0.0012379  max_mem: 8976M
[12/10 06:21:50 d2.utils.events]:  eta: 0:59:05  iter: 539  total_loss: 4.497  loss_sem_seg: 2.516  loss_center: 0.6911  loss_offset: 1.293  time: 0.3752  data_time: 0.0256  lr: 0.001283  max_mem: 8976M
[12/10 06:21:58 d2.utils.events]:  eta: 0:58:59  iter: 559  total_loss: 4.619  loss_sem_seg: 2.562  loss_center: 0.6546  loss_offset: 1.264  time: 0.3753  data_time: 0.0265  lr: 0.001328  max_mem: 8976M
[12/10 06:22:05 d2.utils.events]:  eta: 0:58:51  iter: 579  total_loss: 4.404  loss_sem_seg: 2.391  loss_center: 0.6719  loss_offset: 1.158  time: 0.3753  data_time: 0.0272  lr: 0.0013728  max_mem: 8976M
[12/10 06:22:13 d2.utils.events]:  eta: 0:58:43  iter: 599  total_loss: 4.361  loss_sem_seg: 2.405  loss_center: 0.7409  loss_offset: 1.178  time: 0.3753  data_time: 0.0263  lr: 0.0014175  max_mem: 8976M
[12/10 06:22:21 d2.utils.events]:  eta: 0:58:36  iter: 619  total_loss: 4.068  loss_sem_seg: 2.204  loss_center: 0.7719  loss_offset: 1.128  time: 0.3753  data_time: 0.0255  lr: 0.0014619  max_mem: 8976M
[12/10 06:22:28 d2.utils.events]:  eta: 0:58:30  iter: 639  total_loss: 4.421  loss_sem_seg: 2.252  loss_center: 0.8349  loss_offset: 1.016  time: 0.3754  data_time: 0.0267  lr: 0.0015062  max_mem: 8976M
[12/10 06:22:36 d2.utils.events]:  eta: 0:58:22  iter: 659  total_loss: 4.304  loss_sem_seg: 2.443  loss_center: 0.6525  loss_offset: 1.123  time: 0.3754  data_time: 0.0257  lr: 0.0015503  max_mem: 8976M
[12/10 06:22:43 d2.utils.events]:  eta: 0:58:14  iter: 679  total_loss: 4.675  loss_sem_seg: 2.812  loss_center: 0.6374  loss_offset: 1.277  time: 0.3754  data_time: 0.0260  lr: 0.0015942  max_mem: 8976M
[12/10 06:22:51 d2.utils.events]:  eta: 0:58:07  iter: 699  total_loss: 4.4  loss_sem_seg: 2.718  loss_center: 0.5322  loss_offset: 1.241  time: 0.3755  data_time: 0.0267  lr: 0.0016379  max_mem: 8976M
[12/10 06:22:58 d2.utils.events]:  eta: 0:58:00  iter: 719  total_loss: 4.335  loss_sem_seg: 2.205  loss_center: 0.715  loss_offset: 1.112  time: 0.3757  data_time: 0.0293  lr: 0.0016814  max_mem: 8976M
[12/10 06:23:06 d2.utils.events]:  eta: 0:57:52  iter: 739  total_loss: 4.331  loss_sem_seg: 2.434  loss_center: 0.7453  loss_offset: 1.169  time: 0.3757  data_time: 0.0276  lr: 0.0017248  max_mem: 8976M
[12/10 06:23:13 d2.utils.events]:  eta: 0:57:45  iter: 759  total_loss: 4.238  loss_sem_seg: 2.275  loss_center: 0.8575  loss_offset: 1.091  time: 0.3758  data_time: 0.0280  lr: 0.0017679  max_mem: 8976M
[12/10 06:23:21 d2.utils.events]:  eta: 0:57:38  iter: 779  total_loss: 4.358  loss_sem_seg: 2.527  loss_center: 0.7546  loss_offset: 1.104  time: 0.3759  data_time: 0.0283  lr: 0.0018109  max_mem: 8976M
[12/10 06:23:29 d2.utils.events]:  eta: 0:57:31  iter: 799  total_loss: 4.206  loss_sem_seg: 2.363  loss_center: 0.6108  loss_offset: 1.077  time: 0.3759  data_time: 0.0275  lr: 0.0018537  max_mem: 8976M
[12/10 06:23:36 d2.utils.events]:  eta: 0:57:23  iter: 819  total_loss: 4.246  loss_sem_seg: 2.09  loss_center: 0.6904  loss_offset: 1.178  time: 0.3760  data_time: 0.0262  lr: 0.0018964  max_mem: 8976M
[12/10 06:23:44 d2.utils.events]:  eta: 0:57:16  iter: 839  total_loss: 4.511  loss_sem_seg: 2.691  loss_center: 0.7249  loss_offset: 1.189  time: 0.3760  data_time: 0.0278  lr: 0.0019388  max_mem: 8976M
[12/10 06:23:51 d2.utils.events]:  eta: 0:57:08  iter: 859  total_loss: 3.928  loss_sem_seg: 2.097  loss_center: 0.8315  loss_offset: 0.9954  time: 0.3760  data_time: 0.0268  lr: 0.0019811  max_mem: 8976M
[12/10 06:23:59 d2.utils.events]:  eta: 0:57:01  iter: 879  total_loss: 4.261  loss_sem_seg: 2.413  loss_center: 0.7406  loss_offset: 1.095  time: 0.3760  data_time: 0.0264  lr: 0.0020231  max_mem: 8976M
[12/10 06:24:07 d2.utils.events]:  eta: 0:56:55  iter: 899  total_loss: 4.456  loss_sem_seg: 2.49  loss_center: 0.6578  loss_offset: 1.084  time: 0.3762  data_time: 0.0298  lr: 0.002065  max_mem: 8976M
[12/10 06:24:14 d2.utils.events]:  eta: 0:56:48  iter: 919  total_loss: 4.207  loss_sem_seg: 2.358  loss_center: 0.7578  loss_offset: 1.082  time: 0.3762  data_time: 0.0286  lr: 0.0021068  max_mem: 8976M
[12/10 06:24:22 d2.utils.events]:  eta: 0:56:41  iter: 939  total_loss: 4.038  loss_sem_seg: 2.031  loss_center: 0.6927  loss_offset: 1.132  time: 0.3762  data_time: 0.0254  lr: 0.0021483  max_mem: 8976M
[12/10 06:24:29 d2.utils.events]:  eta: 0:56:34  iter: 959  total_loss: 4.195  loss_sem_seg: 2.344  loss_center: 0.6554  loss_offset: 1.078  time: 0.3763  data_time: 0.0293  lr: 0.0021896  max_mem: 8976M
[12/10 06:24:37 d2.utils.events]:  eta: 0:56:27  iter: 979  total_loss: 4.511  loss_sem_seg: 2.604  loss_center: 0.7736  loss_offset: 1.084  time: 0.3764  data_time: 0.0270  lr: 0.0022308  max_mem: 8976M
[12/10 06:24:44 d2.utils.events]:  eta: 0:56:19  iter: 999  total_loss: 3.888  loss_sem_seg: 2.155  loss_center: 0.5856  loss_offset: 0.9638  time: 0.3763  data_time: 0.0271  lr: 0.0022718  max_mem: 8976M
[12/10 06:24:52 d2.utils.events]:  eta: 0:56:13  iter: 1019  total_loss: 4.308  loss_sem_seg: 2.357  loss_center: 0.668  loss_offset: 1.207  time: 0.3764  data_time: 0.0277  lr: 0.0022695  max_mem: 8976M
[12/10 06:25:00 d2.utils.events]:  eta: 0:56:07  iter: 1039  total_loss: 4.256  loss_sem_seg: 2.043  loss_center: 0.5699  loss_offset: 1.073  time: 0.3765  data_time: 0.0295  lr: 0.002265  max_mem: 8976M
[12/10 06:25:07 d2.utils.events]:  eta: 0:56:00  iter: 1059  total_loss: 4.025  loss_sem_seg: 2.11  loss_center: 0.6924  loss_offset: 1.053  time: 0.3764  data_time: 0.0259  lr: 0.0022604  max_mem: 8976M
[12/10 06:25:15 d2.utils.events]:  eta: 0:55:53  iter: 1079  total_loss: 4.269  loss_sem_seg: 2.365  loss_center: 0.8468  loss_offset: 0.9407  time: 0.3764  data_time: 0.0271  lr: 0.0022559  max_mem: 8976M
[12/10 06:25:22 d2.utils.events]:  eta: 0:55:46  iter: 1099  total_loss: 4.133  loss_sem_seg: 2.173  loss_center: 0.6844  loss_offset: 1.018  time: 0.3764  data_time: 0.0273  lr: 0.0022513  max_mem: 8976M
[12/10 06:25:30 d2.utils.events]:  eta: 0:55:39  iter: 1119  total_loss: 4.105  loss_sem_seg: 2.24  loss_center: 0.7309  loss_offset: 1.155  time: 0.3764  data_time: 0.0261  lr: 0.0022468  max_mem: 8976M
[12/10 06:25:37 d2.utils.events]:  eta: 0:55:32  iter: 1139  total_loss: 4.091  loss_sem_seg: 2.346  loss_center: 0.695  loss_offset: 1.056  time: 0.3764  data_time: 0.0266  lr: 0.0022422  max_mem: 8976M
[12/10 06:25:45 d2.utils.events]:  eta: 0:55:24  iter: 1159  total_loss: 4.262  loss_sem_seg: 2.37  loss_center: 0.6928  loss_offset: 1.14  time: 0.3764  data_time: 0.0275  lr: 0.0022376  max_mem: 8976M
[12/10 06:25:52 d2.utils.events]:  eta: 0:55:18  iter: 1179  total_loss: 3.941  loss_sem_seg: 2.115  loss_center: 0.7286  loss_offset: 1.089  time: 0.3764  data_time: 0.0264  lr: 0.0022331  max_mem: 8976M
[12/10 06:26:00 d2.utils.events]:  eta: 0:55:09  iter: 1199  total_loss: 3.654  loss_sem_seg: 2.055  loss_center: 0.7269  loss_offset: 0.9362  time: 0.3764  data_time: 0.0253  lr: 0.0022285  max_mem: 8976M
[12/10 06:26:07 d2.utils.events]:  eta: 0:55:03  iter: 1219  total_loss: 3.85  loss_sem_seg: 2.057  loss_center: 0.7848  loss_offset: 1.053  time: 0.3764  data_time: 0.0265  lr: 0.002224  max_mem: 8976M
[12/10 06:26:15 d2.utils.events]:  eta: 0:54:56  iter: 1239  total_loss: 3.798  loss_sem_seg: 1.953  loss_center: 0.7359  loss_offset: 0.9903  time: 0.3764  data_time: 0.0281  lr: 0.0022194  max_mem: 8976M
[12/10 06:26:22 d2.utils.events]:  eta: 0:54:49  iter: 1259  total_loss: 3.959  loss_sem_seg: 2.314  loss_center: 0.6345  loss_offset: 1.026  time: 0.3764  data_time: 0.0261  lr: 0.0022149  max_mem: 8976M
[12/10 06:26:30 d2.utils.events]:  eta: 0:54:42  iter: 1279  total_loss: 3.866  loss_sem_seg: 2.06  loss_center: 0.6627  loss_offset: 0.9959  time: 0.3764  data_time: 0.0268  lr: 0.0022103  max_mem: 8976M
[12/10 06:26:37 d2.utils.events]:  eta: 0:54:35  iter: 1299  total_loss: 4.25  loss_sem_seg: 2.27  loss_center: 0.7866  loss_offset: 1.076  time: 0.3764  data_time: 0.0274  lr: 0.0022057  max_mem: 8976M
[12/10 06:26:45 d2.utils.events]:  eta: 0:54:28  iter: 1319  total_loss: 3.891  loss_sem_seg: 2.144  loss_center: 0.6501  loss_offset: 0.9792  time: 0.3764  data_time: 0.0261  lr: 0.0022012  max_mem: 8976M
[12/10 06:26:53 d2.utils.events]:  eta: 0:54:20  iter: 1339  total_loss: 3.958  loss_sem_seg: 2.069  loss_center: 0.7983  loss_offset: 0.9642  time: 0.3764  data_time: 0.0278  lr: 0.0021966  max_mem: 8976M
[12/10 06:27:00 d2.utils.events]:  eta: 0:54:13  iter: 1359  total_loss: 3.925  loss_sem_seg: 2.175  loss_center: 0.6521  loss_offset: 1.045  time: 0.3765  data_time: 0.0268  lr: 0.002192  max_mem: 8976M
[12/10 06:27:08 d2.utils.events]:  eta: 0:54:06  iter: 1379  total_loss: 3.675  loss_sem_seg: 2.018  loss_center: 0.7661  loss_offset: 0.9437  time: 0.3765  data_time: 0.0270  lr: 0.0021875  max_mem: 8976M
[12/10 06:27:15 d2.utils.events]:  eta: 0:53:58  iter: 1399  total_loss: 3.838  loss_sem_seg: 2.235  loss_center: 0.6437  loss_offset: 1.05  time: 0.3765  data_time: 0.0280  lr: 0.0021829  max_mem: 8976M
[12/10 06:27:23 d2.utils.events]:  eta: 0:53:51  iter: 1419  total_loss: 3.82  loss_sem_seg: 2.02  loss_center: 0.6591  loss_offset: 1.06  time: 0.3765  data_time: 0.0280  lr: 0.0021783  max_mem: 8976M
[12/10 06:27:30 d2.utils.events]:  eta: 0:53:42  iter: 1439  total_loss: 3.878  loss_sem_seg: 2.169  loss_center: 0.665  loss_offset: 1.09  time: 0.3765  data_time: 0.0260  lr: 0.0021738  max_mem: 8976M
[12/10 06:27:38 d2.utils.events]:  eta: 0:53:35  iter: 1459  total_loss: 3.756  loss_sem_seg: 2.178  loss_center: 0.6342  loss_offset: 0.9571  time: 0.3765  data_time: 0.0266  lr: 0.0021692  max_mem: 8976M
[12/10 06:27:45 d2.utils.events]:  eta: 0:53:28  iter: 1479  total_loss: 3.742  loss_sem_seg: 2.042  loss_center: 0.7136  loss_offset: 1.055  time: 0.3765  data_time: 0.0271  lr: 0.0021646  max_mem: 8976M
[12/10 06:27:53 d2.utils.events]:  eta: 0:53:22  iter: 1499  total_loss: 3.892  loss_sem_seg: 2.086  loss_center: 0.6725  loss_offset: 1.066  time: 0.3765  data_time: 0.0279  lr: 0.00216  max_mem: 8976M
[12/10 06:28:01 d2.utils.events]:  eta: 0:53:13  iter: 1519  total_loss: 3.958  loss_sem_seg: 2.33  loss_center: 0.6047  loss_offset: 1.041  time: 0.3765  data_time: 0.0278  lr: 0.0021555  max_mem: 8976M
[12/10 06:28:08 d2.utils.events]:  eta: 0:53:06  iter: 1539  total_loss: 3.862  loss_sem_seg: 2.213  loss_center: 0.7015  loss_offset: 0.9654  time: 0.3766  data_time: 0.0274  lr: 0.0021509  max_mem: 8976M
[12/10 06:28:16 d2.utils.events]:  eta: 0:52:58  iter: 1559  total_loss: 3.696  loss_sem_seg: 2.115  loss_center: 0.5662  loss_offset: 0.9681  time: 0.3766  data_time: 0.0265  lr: 0.0021463  max_mem: 8976M
[12/10 06:28:23 d2.utils.events]:  eta: 0:52:50  iter: 1579  total_loss: 3.552  loss_sem_seg: 1.968  loss_center: 0.5496  loss_offset: 0.9563  time: 0.3765  data_time: 0.0266  lr: 0.0021417  max_mem: 8976M
[12/10 06:28:31 d2.utils.events]:  eta: 0:52:43  iter: 1599  total_loss: 3.713  loss_sem_seg: 2.101  loss_center: 0.5731  loss_offset: 0.9775  time: 0.3765  data_time: 0.0265  lr: 0.0021372  max_mem: 8976M
[12/10 06:28:38 d2.utils.events]:  eta: 0:52:35  iter: 1619  total_loss: 3.794  loss_sem_seg: 1.85  loss_center: 0.8179  loss_offset: 1.051  time: 0.3765  data_time: 0.0256  lr: 0.0021326  max_mem: 8976M
[12/10 06:28:46 d2.utils.events]:  eta: 0:52:27  iter: 1639  total_loss: 3.798  loss_sem_seg: 2.165  loss_center: 0.5679  loss_offset: 1.117  time: 0.3765  data_time: 0.0283  lr: 0.002128  max_mem: 8976M
[12/10 06:28:53 d2.utils.events]:  eta: 0:52:20  iter: 1659  total_loss: 3.541  loss_sem_seg: 1.987  loss_center: 0.5783  loss_offset: 0.9951  time: 0.3765  data_time: 0.0283  lr: 0.0021234  max_mem: 8976M
[12/10 06:29:01 d2.utils.events]:  eta: 0:52:14  iter: 1679  total_loss: 4.027  loss_sem_seg: 2.169  loss_center: 0.7138  loss_offset: 1.014  time: 0.3765  data_time: 0.0253  lr: 0.0021188  max_mem: 8976M
[12/10 06:29:09 d2.utils.events]:  eta: 0:52:07  iter: 1699  total_loss: 4.158  loss_sem_seg: 2.577  loss_center: 0.5926  loss_offset: 1.074  time: 0.3766  data_time: 0.0264  lr: 0.0021143  max_mem: 8976M
[12/10 06:29:16 d2.utils.events]:  eta: 0:52:00  iter: 1719  total_loss: 3.757  loss_sem_seg: 1.934  loss_center: 0.7081  loss_offset: 1.018  time: 0.3766  data_time: 0.0270  lr: 0.0021097  max_mem: 8976M
[12/10 06:29:24 d2.utils.events]:  eta: 0:51:52  iter: 1739  total_loss: 3.646  loss_sem_seg: 2.119  loss_center: 0.6782  loss_offset: 1.087  time: 0.3766  data_time: 0.0264  lr: 0.0021051  max_mem: 8976M
[12/10 06:29:31 d2.utils.events]:  eta: 0:51:45  iter: 1759  total_loss: 4.011  loss_sem_seg: 2.392  loss_center: 0.6384  loss_offset: 1.075  time: 0.3766  data_time: 0.0272  lr: 0.0021005  max_mem: 8976M
[12/10 06:29:39 d2.utils.events]:  eta: 0:51:37  iter: 1779  total_loss: 3.584  loss_sem_seg: 1.983  loss_center: 0.5612  loss_offset: 0.9722  time: 0.3766  data_time: 0.0277  lr: 0.0020959  max_mem: 8976M
[12/10 06:29:46 d2.utils.events]:  eta: 0:51:29  iter: 1799  total_loss: 3.757  loss_sem_seg: 1.842  loss_center: 0.7286  loss_offset: 1.009  time: 0.3766  data_time: 0.0282  lr: 0.0020913  max_mem: 8976M
[12/10 06:29:54 d2.utils.events]:  eta: 0:51:23  iter: 1819  total_loss: 3.822  loss_sem_seg: 2.027  loss_center: 0.7763  loss_offset: 0.95  time: 0.3766  data_time: 0.0270  lr: 0.0020867  max_mem: 8976M
[12/10 06:30:01 d2.utils.events]:  eta: 0:51:15  iter: 1839  total_loss: 3.696  loss_sem_seg: 1.906  loss_center: 0.7087  loss_offset: 0.9791  time: 0.3766  data_time: 0.0259  lr: 0.0020821  max_mem: 8976M
[12/10 06:30:09 d2.utils.events]:  eta: 0:51:08  iter: 1859  total_loss: 4.158  loss_sem_seg: 2.291  loss_center: 0.6019  loss_offset: 1.048  time: 0.3766  data_time: 0.0286  lr: 0.0020775  max_mem: 8976M
[12/10 06:30:16 d2.utils.events]:  eta: 0:51:00  iter: 1879  total_loss: 3.986  loss_sem_seg: 2.141  loss_center: 0.6595  loss_offset: 1.051  time: 0.3766  data_time: 0.0273  lr: 0.0020729  max_mem: 8976M
[12/10 06:30:24 d2.utils.events]:  eta: 0:50:52  iter: 1899  total_loss: 3.496  loss_sem_seg: 2.006  loss_center: 0.6238  loss_offset: 0.9245  time: 0.3766  data_time: 0.0261  lr: 0.0020684  max_mem: 8976M
[12/10 06:30:32 d2.utils.events]:  eta: 0:50:43  iter: 1919  total_loss: 3.682  loss_sem_seg: 1.949  loss_center: 0.554  loss_offset: 0.9835  time: 0.3766  data_time: 0.0307  lr: 0.0020638  max_mem: 8976M
[12/10 06:30:39 d2.utils.events]:  eta: 0:50:37  iter: 1939  total_loss: 3.693  loss_sem_seg: 2.102  loss_center: 0.6128  loss_offset: 0.9521  time: 0.3767  data_time: 0.0267  lr: 0.0020592  max_mem: 8976M
[12/10 06:30:47 d2.utils.events]:  eta: 0:50:28  iter: 1959  total_loss: 3.631  loss_sem_seg: 2.006  loss_center: 0.62  loss_offset: 0.9395  time: 0.3767  data_time: 0.0266  lr: 0.0020546  max_mem: 8976M
[12/10 06:30:54 d2.utils.events]:  eta: 0:50:21  iter: 1979  total_loss: 3.624  loss_sem_seg: 1.972  loss_center: 0.6257  loss_offset: 0.9777  time: 0.3767  data_time: 0.0261  lr: 0.00205  max_mem: 8976M
[12/10 06:31:02 d2.utils.events]:  eta: 0:50:15  iter: 1999  total_loss: 3.809  loss_sem_seg: 1.888  loss_center: 0.8686  loss_offset: 1.024  time: 0.3767  data_time: 0.0291  lr: 0.0020454  max_mem: 8976M
[12/10 06:31:09 d2.utils.events]:  eta: 0:50:07  iter: 2019  total_loss: 3.752  loss_sem_seg: 1.989  loss_center: 0.5761  loss_offset: 0.9591  time: 0.3767  data_time: 0.0262  lr: 0.0020408  max_mem: 8976M
[12/10 06:31:17 d2.utils.events]:  eta: 0:49:59  iter: 2039  total_loss: 3.415  loss_sem_seg: 1.668  loss_center: 0.6917  loss_offset: 0.9397  time: 0.3767  data_time: 0.0271  lr: 0.0020362  max_mem: 8976M
[12/10 06:31:25 d2.utils.events]:  eta: 0:49:53  iter: 2059  total_loss: 3.739  loss_sem_seg: 2.036  loss_center: 0.6412  loss_offset: 1.015  time: 0.3767  data_time: 0.0275  lr: 0.0020316  max_mem: 8976M
[12/10 06:31:32 d2.utils.events]:  eta: 0:49:46  iter: 2079  total_loss: 3.431  loss_sem_seg: 1.765  loss_center: 0.557  loss_offset: 0.9701  time: 0.3767  data_time: 0.0277  lr: 0.0020269  max_mem: 8976M
[12/10 06:31:40 d2.utils.events]:  eta: 0:49:39  iter: 2099  total_loss: 3.856  loss_sem_seg: 1.945  loss_center: 0.6333  loss_offset: 1.016  time: 0.3768  data_time: 0.0287  lr: 0.0020223  max_mem: 8976M
[12/10 06:31:47 d2.utils.events]:  eta: 0:49:31  iter: 2119  total_loss: 3.714  loss_sem_seg: 2.043  loss_center: 0.5729  loss_offset: 0.9728  time: 0.3768  data_time: 0.0277  lr: 0.0020177  max_mem: 8976M
[12/10 06:31:55 d2.utils.events]:  eta: 0:49:24  iter: 2139  total_loss: 3.717  loss_sem_seg: 2.073  loss_center: 0.6807  loss_offset: 1.01  time: 0.3768  data_time: 0.0288  lr: 0.0020131  max_mem: 8976M
[12/10 06:32:02 d2.utils.events]:  eta: 0:49:16  iter: 2159  total_loss: 3.839  loss_sem_seg: 2.003  loss_center: 0.7149  loss_offset: 1.005  time: 0.3768  data_time: 0.0260  lr: 0.0020085  max_mem: 8976M
[12/10 06:32:10 d2.utils.events]:  eta: 0:49:10  iter: 2179  total_loss: 3.755  loss_sem_seg: 1.956  loss_center: 0.7274  loss_offset: 0.9052  time: 0.3769  data_time: 0.0285  lr: 0.0020039  max_mem: 8976M
[12/10 06:32:18 d2.utils.events]:  eta: 0:49:04  iter: 2199  total_loss: 3.596  loss_sem_seg: 2.123  loss_center: 0.6278  loss_offset: 0.9159  time: 0.3769  data_time: 0.0273  lr: 0.0019993  max_mem: 8976M
[12/10 06:32:25 d2.utils.events]:  eta: 0:48:57  iter: 2219  total_loss: 3.732  loss_sem_seg: 2.01  loss_center: 0.7274  loss_offset: 1.004  time: 0.3769  data_time: 0.0300  lr: 0.0019947  max_mem: 8976M
[12/10 06:32:33 d2.utils.events]:  eta: 0:48:49  iter: 2239  total_loss: 3.464  loss_sem_seg: 1.837  loss_center: 0.6402  loss_offset: 0.9071  time: 0.3769  data_time: 0.0268  lr: 0.0019901  max_mem: 8976M
[12/10 06:32:40 d2.utils.events]:  eta: 0:48:41  iter: 2259  total_loss: 3.792  loss_sem_seg: 2.031  loss_center: 0.7363  loss_offset: 1.047  time: 0.3769  data_time: 0.0270  lr: 0.0019854  max_mem: 8976M
[12/10 06:32:48 d2.utils.events]:  eta: 0:48:34  iter: 2279  total_loss: 3.355  loss_sem_seg: 1.759  loss_center: 0.6309  loss_offset: 0.9192  time: 0.3769  data_time: 0.0261  lr: 0.0019808  max_mem: 8976M
[12/10 06:32:56 d2.utils.events]:  eta: 0:48:26  iter: 2299  total_loss: 3.656  loss_sem_seg: 2.035  loss_center: 0.6245  loss_offset: 0.9783  time: 0.3769  data_time: 0.0258  lr: 0.0019762  max_mem: 8976M
[12/10 06:33:03 d2.utils.events]:  eta: 0:48:18  iter: 2319  total_loss: 3.705  loss_sem_seg: 1.938  loss_center: 0.6816  loss_offset: 0.9167  time: 0.3769  data_time: 0.0257  lr: 0.0019716  max_mem: 8976M
[12/10 06:33:10 d2.utils.events]:  eta: 0:48:10  iter: 2339  total_loss: 3.563  loss_sem_seg: 1.825  loss_center: 0.7098  loss_offset: 0.9984  time: 0.3769  data_time: 0.0258  lr: 0.001967  max_mem: 8976M
[12/10 06:33:18 d2.utils.events]:  eta: 0:48:02  iter: 2359  total_loss: 3.373  loss_sem_seg: 1.844  loss_center: 0.6282  loss_offset: 0.9279  time: 0.3768  data_time: 0.0264  lr: 0.0019623  max_mem: 8976M
[12/10 06:33:25 d2.utils.events]:  eta: 0:47:53  iter: 2379  total_loss: 3.733  loss_sem_seg: 1.835  loss_center: 0.8063  loss_offset: 0.9039  time: 0.3768  data_time: 0.0264  lr: 0.0019577  max_mem: 8976M
[12/10 06:33:33 d2.utils.events]:  eta: 0:47:46  iter: 2399  total_loss: 3.704  loss_sem_seg: 1.866  loss_center: 0.6317  loss_offset: 0.9763  time: 0.3768  data_time: 0.0265  lr: 0.0019531  max_mem: 8976M
[12/10 06:33:41 d2.utils.events]:  eta: 0:47:38  iter: 2419  total_loss: 3.519  loss_sem_seg: 1.882  loss_center: 0.6107  loss_offset: 0.9902  time: 0.3768  data_time: 0.0256  lr: 0.0019485  max_mem: 8976M
[12/10 06:33:48 d2.utils.events]:  eta: 0:47:32  iter: 2439  total_loss: 3.643  loss_sem_seg: 1.918  loss_center: 0.7041  loss_offset: 0.9501  time: 0.3768  data_time: 0.0266  lr: 0.0019438  max_mem: 8976M
[12/10 06:33:56 d2.utils.events]:  eta: 0:47:23  iter: 2459  total_loss: 3.743  loss_sem_seg: 2.034  loss_center: 0.7957  loss_offset: 0.9307  time: 0.3768  data_time: 0.0283  lr: 0.0019392  max_mem: 8976M
[12/10 06:34:03 d2.utils.events]:  eta: 0:47:15  iter: 2479  total_loss: 3.61  loss_sem_seg: 2.019  loss_center: 0.6824  loss_offset: 0.9395  time: 0.3768  data_time: 0.0277  lr: 0.0019346  max_mem: 8976M
[12/10 06:34:11 d2.utils.events]:  eta: 0:47:08  iter: 2499  total_loss: 3.583  loss_sem_seg: 2.047  loss_center: 0.6228  loss_offset: 0.872  time: 0.3768  data_time: 0.0260  lr: 0.00193  max_mem: 8976M
[12/10 06:34:18 d2.utils.events]:  eta: 0:46:59  iter: 2519  total_loss: 3.661  loss_sem_seg: 2.07  loss_center: 0.7304  loss_offset: 0.9727  time: 0.3768  data_time: 0.0272  lr: 0.0019253  max_mem: 8976M
[12/10 06:34:26 d2.utils.events]:  eta: 0:46:50  iter: 2539  total_loss: 3.328  loss_sem_seg: 1.705  loss_center: 0.7125  loss_offset: 0.8849  time: 0.3768  data_time: 0.0258  lr: 0.0019207  max_mem: 8976M
[12/10 06:34:33 d2.utils.events]:  eta: 0:46:44  iter: 2559  total_loss: 3.557  loss_sem_seg: 1.883  loss_center: 0.6472  loss_offset: 0.9415  time: 0.3768  data_time: 0.0275  lr: 0.0019161  max_mem: 8976M
[12/10 06:34:41 d2.utils.events]:  eta: 0:46:37  iter: 2579  total_loss: 3.557  loss_sem_seg: 1.903  loss_center: 0.6964  loss_offset: 0.9235  time: 0.3768  data_time: 0.0258  lr: 0.0019114  max_mem: 8976M
[12/10 06:34:49 d2.utils.events]:  eta: 0:46:30  iter: 2599  total_loss: 3.693  loss_sem_seg: 2.077  loss_center: 0.762  loss_offset: 0.8963  time: 0.3768  data_time: 0.0280  lr: 0.0019068  max_mem: 8976M
[12/10 06:34:56 d2.utils.events]:  eta: 0:46:23  iter: 2619  total_loss: 3.829  loss_sem_seg: 2.091  loss_center: 0.6174  loss_offset: 0.9994  time: 0.3768  data_time: 0.0275  lr: 0.0019021  max_mem: 8976M
[12/10 06:35:04 d2.utils.events]:  eta: 0:46:15  iter: 2639  total_loss: 3.658  loss_sem_seg: 1.921  loss_center: 0.799  loss_offset: 0.9009  time: 0.3768  data_time: 0.0273  lr: 0.0018975  max_mem: 8976M
[12/10 06:35:11 d2.utils.events]:  eta: 0:46:07  iter: 2659  total_loss: 3.476  loss_sem_seg: 1.731  loss_center: 0.6697  loss_offset: 0.8799  time: 0.3768  data_time: 0.0278  lr: 0.0018929  max_mem: 8976M
[12/10 06:35:19 d2.utils.events]:  eta: 0:45:59  iter: 2679  total_loss: 3.683  loss_sem_seg: 1.878  loss_center: 0.6752  loss_offset: 1.045  time: 0.3768  data_time: 0.0265  lr: 0.0018882  max_mem: 8976M
[12/10 06:35:26 d2.utils.events]:  eta: 0:45:51  iter: 2699  total_loss: 3.451  loss_sem_seg: 1.816  loss_center: 0.6949  loss_offset: 0.8686  time: 0.3768  data_time: 0.0266  lr: 0.0018836  max_mem: 8976M
[12/10 06:35:34 d2.utils.events]:  eta: 0:45:44  iter: 2719  total_loss: 3.69  loss_sem_seg: 2.02  loss_center: 0.555  loss_offset: 1.097  time: 0.3768  data_time: 0.0269  lr: 0.0018789  max_mem: 8976M
[12/10 06:35:41 d2.utils.events]:  eta: 0:45:37  iter: 2739  total_loss: 3.716  loss_sem_seg: 1.891  loss_center: 0.6242  loss_offset: 1.031  time: 0.3768  data_time: 0.0280  lr: 0.0018743  max_mem: 8976M
[12/10 06:35:49 d2.utils.events]:  eta: 0:45:26  iter: 2759  total_loss: 3.649  loss_sem_seg: 2.031  loss_center: 0.6267  loss_offset: 0.9547  time: 0.3768  data_time: 0.0256  lr: 0.0018696  max_mem: 8976M
[12/10 06:35:56 d2.utils.events]:  eta: 0:45:18  iter: 2779  total_loss: 3.59  loss_sem_seg: 1.878  loss_center: 0.56  loss_offset: 1.034  time: 0.3768  data_time: 0.0276  lr: 0.001865  max_mem: 8976M
[12/10 06:36:04 d2.utils.events]:  eta: 0:45:10  iter: 2799  total_loss: 3.565  loss_sem_seg: 1.87  loss_center: 0.5935  loss_offset: 1.022  time: 0.3768  data_time: 0.0261  lr: 0.0018603  max_mem: 8976M
[12/10 06:36:12 d2.utils.events]:  eta: 0:45:02  iter: 2819  total_loss: 3.315  loss_sem_seg: 1.692  loss_center: 0.584  loss_offset: 0.9207  time: 0.3768  data_time: 0.0279  lr: 0.0018557  max_mem: 8976M
[12/10 06:36:19 d2.utils.events]:  eta: 0:44:54  iter: 2839  total_loss: 3.326  loss_sem_seg: 1.742  loss_center: 0.7367  loss_offset: 0.9015  time: 0.3768  data_time: 0.0258  lr: 0.001851  max_mem: 8976M
[12/10 06:36:27 d2.utils.events]:  eta: 0:44:46  iter: 2859  total_loss: 3.098  loss_sem_seg: 1.461  loss_center: 0.7781  loss_offset: 0.7992  time: 0.3768  data_time: 0.0291  lr: 0.0018464  max_mem: 8976M
[12/10 06:36:34 d2.utils.events]:  eta: 0:44:39  iter: 2879  total_loss: 3.266  loss_sem_seg: 1.936  loss_center: 0.5465  loss_offset: 0.8977  time: 0.3768  data_time: 0.0259  lr: 0.0018417  max_mem: 8976M
[12/10 06:36:42 d2.utils.events]:  eta: 0:44:32  iter: 2899  total_loss: 3.52  loss_sem_seg: 1.982  loss_center: 0.5767  loss_offset: 0.8923  time: 0.3768  data_time: 0.0280  lr: 0.0018371  max_mem: 8976M
[12/10 06:36:49 d2.utils.events]:  eta: 0:44:24  iter: 2919  total_loss: 3.231  loss_sem_seg: 1.632  loss_center: 0.5944  loss_offset: 0.9139  time: 0.3768  data_time: 0.0270  lr: 0.0018324  max_mem: 8976M
[12/10 06:36:57 d2.utils.events]:  eta: 0:44:16  iter: 2939  total_loss: 3.206  loss_sem_seg: 1.692  loss_center: 0.7768  loss_offset: 0.9672  time: 0.3768  data_time: 0.0249  lr: 0.0018278  max_mem: 8976M
[12/10 06:37:04 d2.utils.events]:  eta: 0:44:08  iter: 2959  total_loss: 3.355  loss_sem_seg: 1.659  loss_center: 0.668  loss_offset: 0.9123  time: 0.3768  data_time: 0.0283  lr: 0.0018231  max_mem: 8976M
[12/10 06:37:12 d2.utils.events]:  eta: 0:44:00  iter: 2979  total_loss: 3.23  loss_sem_seg: 1.713  loss_center: 0.6169  loss_offset: 0.7886  time: 0.3767  data_time: 0.0257  lr: 0.0018184  max_mem: 8976M
[12/10 06:37:19 d2.utils.events]:  eta: 0:43:52  iter: 2999  total_loss: 3.683  loss_sem_seg: 2.063  loss_center: 0.5722  loss_offset: 0.9481  time: 0.3767  data_time: 0.0264  lr: 0.0018138  max_mem: 8976M
[12/10 06:37:27 d2.utils.events]:  eta: 0:43:44  iter: 3019  total_loss: 3.649  loss_sem_seg: 1.925  loss_center: 0.8743  loss_offset: 1.012  time: 0.3767  data_time: 0.0269  lr: 0.0018091  max_mem: 8976M
[12/10 06:37:34 d2.utils.events]:  eta: 0:43:37  iter: 3039  total_loss: 3.778  loss_sem_seg: 1.943  loss_center: 0.6749  loss_offset: 0.999  time: 0.3767  data_time: 0.0276  lr: 0.0018044  max_mem: 8976M
[12/10 06:37:42 d2.utils.events]:  eta: 0:43:27  iter: 3059  total_loss: 3.411  loss_sem_seg: 1.819  loss_center: 0.6319  loss_offset: 0.8474  time: 0.3767  data_time: 0.0250  lr: 0.0017998  max_mem: 8976M
[12/10 06:37:49 d2.utils.events]:  eta: 0:43:18  iter: 3079  total_loss: 3.449  loss_sem_seg: 1.674  loss_center: 0.642  loss_offset: 0.9185  time: 0.3767  data_time: 0.0268  lr: 0.0017951  max_mem: 8976M
[12/10 06:37:57 d2.utils.events]:  eta: 0:43:10  iter: 3099  total_loss: 3.729  loss_sem_seg: 2.001  loss_center: 0.7268  loss_offset: 0.9371  time: 0.3767  data_time: 0.0285  lr: 0.0017904  max_mem: 8976M
[12/10 06:38:04 d2.utils.events]:  eta: 0:43:02  iter: 3119  total_loss: 3.623  loss_sem_seg: 1.855  loss_center: 0.7432  loss_offset: 0.9476  time: 0.3767  data_time: 0.0257  lr: 0.0017858  max_mem: 8976M
[12/10 06:38:12 d2.utils.events]:  eta: 0:42:53  iter: 3139  total_loss: 3.236  loss_sem_seg: 1.755  loss_center: 0.5385  loss_offset: 0.983  time: 0.3767  data_time: 0.0286  lr: 0.0017811  max_mem: 8976M
[12/10 06:38:19 d2.utils.events]:  eta: 0:42:46  iter: 3159  total_loss: 3.299  loss_sem_seg: 1.869  loss_center: 0.7057  loss_offset: 0.8651  time: 0.3767  data_time: 0.0279  lr: 0.0017764  max_mem: 8976M
[12/10 06:38:27 d2.utils.events]:  eta: 0:42:37  iter: 3179  total_loss: 3.358  loss_sem_seg: 1.867  loss_center: 0.5365  loss_offset: 0.871  time: 0.3767  data_time: 0.0266  lr: 0.0017718  max_mem: 8976M
[12/10 06:38:35 d2.utils.events]:  eta: 0:42:29  iter: 3199  total_loss: 3.448  loss_sem_seg: 2.004  loss_center: 0.6656  loss_offset: 0.8829  time: 0.3767  data_time: 0.0268  lr: 0.0017671  max_mem: 8976M
[12/10 06:38:42 d2.utils.events]:  eta: 0:42:21  iter: 3219  total_loss: 3.912  loss_sem_seg: 2.072  loss_center: 0.7552  loss_offset: 0.9915  time: 0.3767  data_time: 0.0279  lr: 0.0017624  max_mem: 8976M
[12/10 06:38:50 d2.utils.events]:  eta: 0:42:14  iter: 3239  total_loss: 3.491  loss_sem_seg: 1.922  loss_center: 0.582  loss_offset: 0.9846  time: 0.3767  data_time: 0.0262  lr: 0.0017577  max_mem: 8976M
[12/10 06:38:57 d2.utils.events]:  eta: 0:42:06  iter: 3259  total_loss: 3.525  loss_sem_seg: 2.004  loss_center: 0.6298  loss_offset: 0.8754  time: 0.3767  data_time: 0.0254  lr: 0.001753  max_mem: 8976M
[12/10 06:39:05 d2.utils.events]:  eta: 0:41:59  iter: 3279  total_loss: 3.449  loss_sem_seg: 1.777  loss_center: 0.7257  loss_offset: 0.8685  time: 0.3767  data_time: 0.0287  lr: 0.0017484  max_mem: 8976M
[12/10 06:39:12 d2.utils.events]:  eta: 0:41:52  iter: 3299  total_loss: 3.202  loss_sem_seg: 1.672  loss_center: 0.702  loss_offset: 0.8716  time: 0.3767  data_time: 0.0266  lr: 0.0017437  max_mem: 8976M
[12/10 06:39:20 d2.utils.events]:  eta: 0:41:45  iter: 3319  total_loss: 3.428  loss_sem_seg: 1.675  loss_center: 0.5987  loss_offset: 0.9792  time: 0.3767  data_time: 0.0262  lr: 0.001739  max_mem: 8976M
[12/10 06:39:27 d2.utils.events]:  eta: 0:41:37  iter: 3339  total_loss: 3.504  loss_sem_seg: 1.885  loss_center: 0.6366  loss_offset: 0.8489  time: 0.3767  data_time: 0.0260  lr: 0.0017343  max_mem: 8976M
[12/10 06:39:35 d2.utils.events]:  eta: 0:41:31  iter: 3359  total_loss: 3.493  loss_sem_seg: 1.768  loss_center: 0.76  loss_offset: 0.9255  time: 0.3767  data_time: 0.0283  lr: 0.0017296  max_mem: 8976M
[12/10 06:39:42 d2.utils.events]:  eta: 0:41:24  iter: 3379  total_loss: 3.421  loss_sem_seg: 1.69  loss_center: 0.6265  loss_offset: 0.89  time: 0.3767  data_time: 0.0277  lr: 0.0017249  max_mem: 8976M
[12/10 06:39:50 d2.utils.events]:  eta: 0:41:16  iter: 3399  total_loss: 3.395  loss_sem_seg: 1.861  loss_center: 0.6062  loss_offset: 0.8884  time: 0.3767  data_time: 0.0261  lr: 0.0017202  max_mem: 8976M
[12/10 06:39:58 d2.utils.events]:  eta: 0:41:09  iter: 3419  total_loss: 3.271  loss_sem_seg: 1.7  loss_center: 0.6636  loss_offset: 0.8757  time: 0.3767  data_time: 0.0278  lr: 0.0017155  max_mem: 8976M
[12/10 06:40:05 d2.utils.events]:  eta: 0:41:01  iter: 3439  total_loss: 3.468  loss_sem_seg: 1.837  loss_center: 0.6525  loss_offset: 0.9599  time: 0.3767  data_time: 0.0269  lr: 0.0017109  max_mem: 8976M
[12/10 06:40:13 d2.utils.events]:  eta: 0:40:53  iter: 3459  total_loss: 3.318  loss_sem_seg: 1.924  loss_center: 0.635  loss_offset: 0.8438  time: 0.3767  data_time: 0.0249  lr: 0.0017062  max_mem: 8976M
[12/10 06:40:20 d2.utils.events]:  eta: 0:40:45  iter: 3479  total_loss: 3.405  loss_sem_seg: 1.624  loss_center: 0.6376  loss_offset: 0.9294  time: 0.3767  data_time: 0.0253  lr: 0.0017015  max_mem: 8976M
[12/10 06:40:28 d2.utils.events]:  eta: 0:40:37  iter: 3499  total_loss: 3.907  loss_sem_seg: 2.077  loss_center: 0.6456  loss_offset: 0.9287  time: 0.3767  data_time: 0.0259  lr: 0.0016968  max_mem: 8976M
[12/10 06:40:35 d2.utils.events]:  eta: 0:40:31  iter: 3519  total_loss: 3.36  loss_sem_seg: 1.78  loss_center: 0.5279  loss_offset: 0.8954  time: 0.3767  data_time: 0.0279  lr: 0.0016921  max_mem: 8976M
[12/10 06:40:43 d2.utils.events]:  eta: 0:40:24  iter: 3539  total_loss: 3.399  loss_sem_seg: 1.778  loss_center: 0.6582  loss_offset: 0.9166  time: 0.3767  data_time: 0.0282  lr: 0.0016874  max_mem: 8976M
[12/10 06:40:50 d2.utils.events]:  eta: 0:40:16  iter: 3559  total_loss: 3.4  loss_sem_seg: 1.906  loss_center: 0.5931  loss_offset: 0.9414  time: 0.3767  data_time: 0.0271  lr: 0.0016827  max_mem: 8976M
[12/10 06:40:58 d2.utils.events]:  eta: 0:40:09  iter: 3579  total_loss: 3.311  loss_sem_seg: 1.767  loss_center: 0.6575  loss_offset: 0.9521  time: 0.3767  data_time: 0.0277  lr: 0.001678  max_mem: 8976M
[12/10 06:41:05 d2.utils.events]:  eta: 0:40:01  iter: 3599  total_loss: 3.632  loss_sem_seg: 2.041  loss_center: 0.6955  loss_offset: 0.935  time: 0.3767  data_time: 0.0272  lr: 0.0016733  max_mem: 8976M
[12/10 06:41:13 d2.utils.events]:  eta: 0:39:52  iter: 3619  total_loss: 3.564  loss_sem_seg: 2.048  loss_center: 0.7112  loss_offset: 0.875  time: 0.3767  data_time: 0.0262  lr: 0.0016686  max_mem: 8976M
[12/10 06:41:21 d2.utils.events]:  eta: 0:39:46  iter: 3639  total_loss: 3.278  loss_sem_seg: 1.693  loss_center: 0.778  loss_offset: 0.8039  time: 0.3767  data_time: 0.0273  lr: 0.0016638  max_mem: 8976M
[12/10 06:41:28 d2.utils.events]:  eta: 0:39:38  iter: 3659  total_loss: 3.131  loss_sem_seg: 1.513  loss_center: 0.7002  loss_offset: 0.7731  time: 0.3767  data_time: 0.0257  lr: 0.0016591  max_mem: 8976M
[12/10 06:41:36 d2.utils.events]:  eta: 0:39:31  iter: 3679  total_loss: 3.266  loss_sem_seg: 1.76  loss_center: 0.6708  loss_offset: 0.8375  time: 0.3767  data_time: 0.0300  lr: 0.0016544  max_mem: 8976M
[12/10 06:41:43 d2.utils.events]:  eta: 0:39:24  iter: 3699  total_loss: 3.318  loss_sem_seg: 1.634  loss_center: 0.6471  loss_offset: 0.887  time: 0.3767  data_time: 0.0257  lr: 0.0016497  max_mem: 8976M
[12/10 06:41:51 d2.utils.events]:  eta: 0:39:16  iter: 3719  total_loss: 3.534  loss_sem_seg: 1.963  loss_center: 0.6303  loss_offset: 1.023  time: 0.3767  data_time: 0.0285  lr: 0.001645  max_mem: 8976M
[12/10 06:41:58 d2.utils.events]:  eta: 0:39:08  iter: 3739  total_loss: 3.192  loss_sem_seg: 1.774  loss_center: 0.6459  loss_offset: 0.8126  time: 0.3767  data_time: 0.0273  lr: 0.0016403  max_mem: 8976M
[12/10 06:42:06 d2.utils.events]:  eta: 0:39:01  iter: 3759  total_loss: 3.263  loss_sem_seg: 1.835  loss_center: 0.5721  loss_offset: 0.8397  time: 0.3767  data_time: 0.0274  lr: 0.0016356  max_mem: 8976M
[12/10 06:42:13 d2.utils.events]:  eta: 0:38:55  iter: 3779  total_loss: 3.627  loss_sem_seg: 1.884  loss_center: 0.6626  loss_offset: 0.8765  time: 0.3767  data_time: 0.0277  lr: 0.0016309  max_mem: 8976M
[12/10 06:42:21 d2.utils.events]:  eta: 0:38:48  iter: 3799  total_loss: 2.934  loss_sem_seg: 1.563  loss_center: 0.649  loss_offset: 0.7683  time: 0.3767  data_time: 0.0258  lr: 0.0016261  max_mem: 8976M
[12/10 06:42:28 d2.utils.events]:  eta: 0:38:41  iter: 3819  total_loss: 3.2  loss_sem_seg: 1.724  loss_center: 0.6719  loss_offset: 0.8998  time: 0.3767  data_time: 0.0273  lr: 0.0016214  max_mem: 8976M
[12/10 06:42:36 d2.utils.events]:  eta: 0:38:33  iter: 3839  total_loss: 3.46  loss_sem_seg: 1.785  loss_center: 0.6833  loss_offset: 0.8693  time: 0.3767  data_time: 0.0260  lr: 0.0016167  max_mem: 8976M
[12/10 06:42:43 d2.utils.events]:  eta: 0:38:25  iter: 3859  total_loss: 3.486  loss_sem_seg: 1.807  loss_center: 0.6934  loss_offset: 0.8379  time: 0.3767  data_time: 0.0262  lr: 0.001612  max_mem: 8976M
[12/10 06:42:51 d2.utils.events]:  eta: 0:38:16  iter: 3879  total_loss: 3.237  loss_sem_seg: 1.828  loss_center: 0.596  loss_offset: 0.8607  time: 0.3767  data_time: 0.0251  lr: 0.0016072  max_mem: 8976M
[12/10 06:42:58 d2.utils.events]:  eta: 0:38:09  iter: 3899  total_loss: 3.235  loss_sem_seg: 1.62  loss_center: 0.7434  loss_offset: 0.8671  time: 0.3767  data_time: 0.0255  lr: 0.0016025  max_mem: 8976M
[12/10 06:43:06 d2.utils.events]:  eta: 0:37:59  iter: 3919  total_loss: 3.502  loss_sem_seg: 1.75  loss_center: 0.5873  loss_offset: 0.892  time: 0.3767  data_time: 0.0274  lr: 0.0015978  max_mem: 8976M
[12/10 06:43:13 d2.utils.events]:  eta: 0:37:52  iter: 3939  total_loss: 3.502  loss_sem_seg: 1.835  loss_center: 0.645  loss_offset: 0.8209  time: 0.3767  data_time: 0.0260  lr: 0.0015931  max_mem: 8976M
[12/10 06:43:21 d2.utils.events]:  eta: 0:37:44  iter: 3959  total_loss: 3.351  loss_sem_seg: 1.79  loss_center: 0.482  loss_offset: 0.93  time: 0.3767  data_time: 0.0277  lr: 0.0015883  max_mem: 8976M
[12/10 06:43:29 d2.utils.events]:  eta: 0:37:39  iter: 3979  total_loss: 3.444  loss_sem_seg: 1.648  loss_center: 0.5691  loss_offset: 0.9171  time: 0.3767  data_time: 0.0282  lr: 0.0015836  max_mem: 8976M
[12/10 06:43:36 d2.utils.events]:  eta: 0:37:31  iter: 3999  total_loss: 3.724  loss_sem_seg: 1.869  loss_center: 0.7247  loss_offset: 0.8853  time: 0.3767  data_time: 0.0266  lr: 0.0015789  max_mem: 8976M
[12/10 06:43:44 d2.utils.events]:  eta: 0:37:24  iter: 4019  total_loss: 3.264  loss_sem_seg: 1.861  loss_center: 0.5298  loss_offset: 0.811  time: 0.3767  data_time: 0.0291  lr: 0.0015741  max_mem: 8976M
[12/10 06:43:51 d2.utils.events]:  eta: 0:37:16  iter: 4039  total_loss: 3.367  loss_sem_seg: 1.705  loss_center: 0.6291  loss_offset: 0.9701  time: 0.3767  data_time: 0.0254  lr: 0.0015694  max_mem: 8976M
[12/10 06:43:59 d2.utils.events]:  eta: 0:37:09  iter: 4059  total_loss: 3.415  loss_sem_seg: 1.979  loss_center: 0.5502  loss_offset: 0.915  time: 0.3767  data_time: 0.0271  lr: 0.0015646  max_mem: 8976M
[12/10 06:44:06 d2.utils.events]:  eta: 0:37:02  iter: 4079  total_loss: 3.479  loss_sem_seg: 1.72  loss_center: 0.6983  loss_offset: 0.846  time: 0.3767  data_time: 0.0271  lr: 0.0015599  max_mem: 8976M
[12/10 06:44:14 d2.utils.events]:  eta: 0:36:55  iter: 4099  total_loss: 3.323  loss_sem_seg: 1.664  loss_center: 0.5768  loss_offset: 0.7905  time: 0.3767  data_time: 0.0263  lr: 0.0015552  max_mem: 8976M
[12/10 06:44:21 d2.utils.events]:  eta: 0:36:48  iter: 4119  total_loss: 3.33  loss_sem_seg: 1.938  loss_center: 0.5491  loss_offset: 0.9743  time: 0.3767  data_time: 0.0278  lr: 0.0015504  max_mem: 8976M
[12/10 06:44:29 d2.utils.events]:  eta: 0:36:41  iter: 4139  total_loss: 3.266  loss_sem_seg: 1.553  loss_center: 0.7438  loss_offset: 0.8172  time: 0.3767  data_time: 0.0264  lr: 0.0015457  max_mem: 8976M
[12/10 06:44:36 d2.utils.events]:  eta: 0:36:34  iter: 4159  total_loss: 3.24  loss_sem_seg: 1.749  loss_center: 0.6183  loss_offset: 0.8119  time: 0.3767  data_time: 0.0274  lr: 0.0015409  max_mem: 8976M
[12/10 06:44:44 d2.utils.events]:  eta: 0:36:27  iter: 4179  total_loss: 3.389  loss_sem_seg: 1.59  loss_center: 0.7365  loss_offset: 0.9683  time: 0.3767  data_time: 0.0272  lr: 0.0015362  max_mem: 8976M
[12/10 06:44:52 d2.utils.events]:  eta: 0:36:19  iter: 4199  total_loss: 3.309  loss_sem_seg: 1.775  loss_center: 0.6347  loss_offset: 0.9159  time: 0.3767  data_time: 0.0265  lr: 0.0015314  max_mem: 8976M
[12/10 06:44:59 d2.utils.events]:  eta: 0:36:12  iter: 4219  total_loss: 3.528  loss_sem_seg: 1.864  loss_center: 0.7172  loss_offset: 0.8573  time: 0.3767  data_time: 0.0271  lr: 0.0015267  max_mem: 8976M
[12/10 06:45:07 d2.utils.events]:  eta: 0:36:04  iter: 4239  total_loss: 3.399  loss_sem_seg: 1.854  loss_center: 0.6383  loss_offset: 0.8731  time: 0.3767  data_time: 0.0268  lr: 0.0015219  max_mem: 8976M
[12/10 06:45:14 d2.utils.events]:  eta: 0:35:57  iter: 4259  total_loss: 3.25  loss_sem_seg: 1.579  loss_center: 0.5758  loss_offset: 0.8061  time: 0.3767  data_time: 0.0264  lr: 0.0015172  max_mem: 8976M
[12/10 06:45:22 d2.utils.events]:  eta: 0:35:49  iter: 4279  total_loss: 3.232  loss_sem_seg: 1.661  loss_center: 0.5483  loss_offset: 0.8862  time: 0.3767  data_time: 0.0253  lr: 0.0015124  max_mem: 8976M
[12/10 06:45:29 d2.utils.events]:  eta: 0:35:41  iter: 4299  total_loss: 3.401  loss_sem_seg: 1.755  loss_center: 0.6509  loss_offset: 0.9245  time: 0.3767  data_time: 0.0261  lr: 0.0015076  max_mem: 8976M
[12/10 06:45:37 d2.utils.events]:  eta: 0:35:34  iter: 4319  total_loss: 3.293  loss_sem_seg: 1.655  loss_center: 0.7226  loss_offset: 0.8879  time: 0.3767  data_time: 0.0282  lr: 0.0015029  max_mem: 8976M
[12/10 06:45:44 d2.utils.events]:  eta: 0:35:27  iter: 4339  total_loss: 3.089  loss_sem_seg: 1.692  loss_center: 0.662  loss_offset: 0.8367  time: 0.3767  data_time: 0.0262  lr: 0.0014981  max_mem: 8976M
[12/10 06:45:52 d2.utils.events]:  eta: 0:35:19  iter: 4359  total_loss: 3.105  loss_sem_seg: 1.651  loss_center: 0.5264  loss_offset: 0.8784  time: 0.3767  data_time: 0.0261  lr: 0.0014933  max_mem: 8976M
[12/10 06:45:59 d2.utils.events]:  eta: 0:35:11  iter: 4379  total_loss: 3.538  loss_sem_seg: 1.774  loss_center: 0.7512  loss_offset: 0.9452  time: 0.3767  data_time: 0.0272  lr: 0.0014886  max_mem: 8976M
[12/10 06:46:07 d2.utils.events]:  eta: 0:35:03  iter: 4399  total_loss: 3.223  loss_sem_seg: 1.714  loss_center: 0.6967  loss_offset: 0.8965  time: 0.3767  data_time: 0.0261  lr: 0.0014838  max_mem: 8976M
[12/10 06:46:14 d2.utils.events]:  eta: 0:34:56  iter: 4419  total_loss: 3.429  loss_sem_seg: 1.876  loss_center: 0.5745  loss_offset: 0.9431  time: 0.3766  data_time: 0.0257  lr: 0.001479  max_mem: 8976M
[12/10 06:46:22 d2.utils.events]:  eta: 0:34:49  iter: 4439  total_loss: 3.376  loss_sem_seg: 1.874  loss_center: 0.6365  loss_offset: 0.8192  time: 0.3766  data_time: 0.0266  lr: 0.0014743  max_mem: 8976M
[12/10 06:46:29 d2.utils.events]:  eta: 0:34:42  iter: 4459  total_loss: 3.172  loss_sem_seg: 1.65  loss_center: 0.5464  loss_offset: 0.7696  time: 0.3766  data_time: 0.0258  lr: 0.0014695  max_mem: 8976M
[12/10 06:46:37 d2.utils.events]:  eta: 0:34:33  iter: 4479  total_loss: 3.093  loss_sem_seg: 1.592  loss_center: 0.6521  loss_offset: 0.8674  time: 0.3766  data_time: 0.0261  lr: 0.0014647  max_mem: 8976M
[12/10 06:46:44 d2.utils.events]:  eta: 0:34:26  iter: 4499  total_loss: 3.38  loss_sem_seg: 1.786  loss_center: 0.4523  loss_offset: 0.8343  time: 0.3766  data_time: 0.0265  lr: 0.0014599  max_mem: 8976M
[12/10 06:46:52 d2.utils.events]:  eta: 0:34:19  iter: 4519  total_loss: 3.311  loss_sem_seg: 1.609  loss_center: 0.6918  loss_offset: 0.9413  time: 0.3766  data_time: 0.0278  lr: 0.0014552  max_mem: 8976M
[12/10 06:46:59 d2.utils.events]:  eta: 0:34:11  iter: 4539  total_loss: 3.184  loss_sem_seg: 1.552  loss_center: 0.7274  loss_offset: 0.8169  time: 0.3766  data_time: 0.0264  lr: 0.0014504  max_mem: 8976M
[12/10 06:47:07 d2.utils.events]:  eta: 0:34:03  iter: 4559  total_loss: 3.337  loss_sem_seg: 1.685  loss_center: 0.8171  loss_offset: 0.8729  time: 0.3766  data_time: 0.0272  lr: 0.0014456  max_mem: 8976M
[12/10 06:47:15 d2.utils.events]:  eta: 0:33:56  iter: 4579  total_loss: 2.992  loss_sem_seg: 1.513  loss_center: 0.5115  loss_offset: 0.85  time: 0.3766  data_time: 0.0281  lr: 0.0014408  max_mem: 8976M
[12/10 06:47:22 d2.utils.events]:  eta: 0:33:49  iter: 4599  total_loss: 2.991  loss_sem_seg: 1.619  loss_center: 0.5147  loss_offset: 0.72  time: 0.3766  data_time: 0.0268  lr: 0.001436  max_mem: 8976M
[12/10 06:47:30 d2.utils.events]:  eta: 0:33:41  iter: 4619  total_loss: 3.238  loss_sem_seg: 1.695  loss_center: 0.6238  loss_offset: 0.8989  time: 0.3766  data_time: 0.0265  lr: 0.0014313  max_mem: 8976M
[12/10 06:47:37 d2.utils.events]:  eta: 0:33:33  iter: 4639  total_loss: 3.313  loss_sem_seg: 1.537  loss_center: 0.7271  loss_offset: 0.7177  time: 0.3766  data_time: 0.0262  lr: 0.0014265  max_mem: 8976M
[12/10 06:47:45 d2.utils.events]:  eta: 0:33:25  iter: 4659  total_loss: 3.389  loss_sem_seg: 1.952  loss_center: 0.6621  loss_offset: 0.8449  time: 0.3766  data_time: 0.0268  lr: 0.0014217  max_mem: 8976M
[12/10 06:47:52 d2.utils.events]:  eta: 0:33:18  iter: 4679  total_loss: 3.475  loss_sem_seg: 1.827  loss_center: 0.719  loss_offset: 0.9479  time: 0.3766  data_time: 0.0269  lr: 0.0014169  max_mem: 8976M
[12/10 06:48:00 d2.utils.events]:  eta: 0:33:10  iter: 4699  total_loss: 3.021  loss_sem_seg: 1.648  loss_center: 0.5368  loss_offset: 0.7672  time: 0.3766  data_time: 0.0266  lr: 0.0014121  max_mem: 8976M
[12/10 06:48:07 d2.utils.events]:  eta: 0:33:03  iter: 4719  total_loss: 3.044  loss_sem_seg: 1.68  loss_center: 0.5708  loss_offset: 0.8906  time: 0.3766  data_time: 0.0272  lr: 0.0014073  max_mem: 8976M
[12/10 06:48:15 d2.utils.events]:  eta: 0:32:55  iter: 4739  total_loss: 3.579  loss_sem_seg: 1.885  loss_center: 0.5548  loss_offset: 0.892  time: 0.3766  data_time: 0.0296  lr: 0.0014025  max_mem: 8976M
[12/10 06:48:22 d2.utils.events]:  eta: 0:32:48  iter: 4759  total_loss: 3.245  loss_sem_seg: 1.897  loss_center: 0.6212  loss_offset: 0.821  time: 0.3766  data_time: 0.0278  lr: 0.0013977  max_mem: 8976M
[12/10 06:48:30 d2.utils.events]:  eta: 0:32:40  iter: 4779  total_loss: 3.199  loss_sem_seg: 1.724  loss_center: 0.6292  loss_offset: 0.8633  time: 0.3766  data_time: 0.0258  lr: 0.0013929  max_mem: 8976M
[12/10 06:48:37 d2.utils.events]:  eta: 0:32:32  iter: 4799  total_loss: 3.325  loss_sem_seg: 1.888  loss_center: 0.4689  loss_offset: 0.8508  time: 0.3766  data_time: 0.0275  lr: 0.0013881  max_mem: 8976M
[12/10 06:48:45 d2.utils.events]:  eta: 0:32:25  iter: 4819  total_loss: 3.141  loss_sem_seg: 1.661  loss_center: 0.5995  loss_offset: 0.8766  time: 0.3766  data_time: 0.0266  lr: 0.0013833  max_mem: 8976M
[12/10 06:48:52 d2.utils.events]:  eta: 0:32:17  iter: 4839  total_loss: 3.153  loss_sem_seg: 1.605  loss_center: 0.7317  loss_offset: 0.8812  time: 0.3766  data_time: 0.0273  lr: 0.0013785  max_mem: 8976M
[12/10 06:49:00 d2.utils.events]:  eta: 0:32:10  iter: 4859  total_loss: 3.462  loss_sem_seg: 1.848  loss_center: 0.5107  loss_offset: 0.9224  time: 0.3766  data_time: 0.0256  lr: 0.0013737  max_mem: 8976M
[12/10 06:49:08 d2.utils.events]:  eta: 0:32:04  iter: 4879  total_loss: 3  loss_sem_seg: 1.673  loss_center: 0.5913  loss_offset: 0.9194  time: 0.3766  data_time: 0.0283  lr: 0.0013689  max_mem: 8976M
[12/10 06:49:15 d2.utils.events]:  eta: 0:31:57  iter: 4899  total_loss: 3.343  loss_sem_seg: 1.884  loss_center: 0.5115  loss_offset: 0.9054  time: 0.3766  data_time: 0.0266  lr: 0.001364  max_mem: 8976M
[12/10 06:49:23 d2.utils.events]:  eta: 0:31:49  iter: 4919  total_loss: 3.245  loss_sem_seg: 1.625  loss_center: 0.6547  loss_offset: 0.7739  time: 0.3766  data_time: 0.0251  lr: 0.0013592  max_mem: 8976M
[12/10 06:49:30 d2.utils.events]:  eta: 0:31:43  iter: 4939  total_loss: 3.189  loss_sem_seg: 1.687  loss_center: 0.6732  loss_offset: 0.7956  time: 0.3766  data_time: 0.0275  lr: 0.0013544  max_mem: 8976M
[12/10 06:49:38 d2.utils.events]:  eta: 0:31:35  iter: 4959  total_loss: 3.091  loss_sem_seg: 1.649  loss_center: 0.6664  loss_offset: 0.8042  time: 0.3766  data_time: 0.0265  lr: 0.0013496  max_mem: 8976M
[12/10 06:49:45 d2.utils.events]:  eta: 0:31:27  iter: 4979  total_loss: 3.139  loss_sem_seg: 1.849  loss_center: 0.5238  loss_offset: 0.7777  time: 0.3766  data_time: 0.0267  lr: 0.0013448  max_mem: 8976M
[12/10 06:49:53 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0004999.pth
[12/10 06:49:53 d2.utils.events]:  eta: 0:31:19  iter: 4999  total_loss: 3.348  loss_sem_seg: 1.762  loss_center: 0.6458  loss_offset: 0.7402  time: 0.3766  data_time: 0.0261  lr: 0.00134  max_mem: 8976M
[12/10 06:50:02 d2.utils.events]:  eta: 0:31:12  iter: 5019  total_loss: 2.941  loss_sem_seg: 1.526  loss_center: 0.4127  loss_offset: 0.8229  time: 0.3766  data_time: 0.0266  lr: 0.0013351  max_mem: 8976M
[12/10 06:50:09 d2.utils.events]:  eta: 0:31:05  iter: 5039  total_loss: 3.117  loss_sem_seg: 1.637  loss_center: 0.5583  loss_offset: 0.7951  time: 0.3766  data_time: 0.0281  lr: 0.0013303  max_mem: 8976M
[12/10 06:50:17 d2.utils.events]:  eta: 0:30:57  iter: 5059  total_loss: 3.252  loss_sem_seg: 1.604  loss_center: 0.6735  loss_offset: 0.8286  time: 0.3766  data_time: 0.0266  lr: 0.0013255  max_mem: 8976M
[12/10 06:50:24 d2.utils.events]:  eta: 0:30:49  iter: 5079  total_loss: 3.142  loss_sem_seg: 1.679  loss_center: 0.5947  loss_offset: 0.8045  time: 0.3766  data_time: 0.0264  lr: 0.0013207  max_mem: 8976M
[12/10 06:50:32 d2.utils.events]:  eta: 0:30:41  iter: 5099  total_loss: 3.177  loss_sem_seg: 1.641  loss_center: 0.684  loss_offset: 0.8368  time: 0.3765  data_time: 0.0256  lr: 0.0013158  max_mem: 8976M
[12/10 06:50:39 d2.utils.events]:  eta: 0:30:33  iter: 5119  total_loss: 3.302  loss_sem_seg: 1.673  loss_center: 0.6724  loss_offset: 0.8605  time: 0.3765  data_time: 0.0264  lr: 0.001311  max_mem: 8976M
[12/10 06:50:47 d2.utils.events]:  eta: 0:30:26  iter: 5139  total_loss: 2.929  loss_sem_seg: 1.441  loss_center: 0.5376  loss_offset: 0.8209  time: 0.3765  data_time: 0.0266  lr: 0.0013062  max_mem: 8976M
[12/10 06:50:54 d2.utils.events]:  eta: 0:30:17  iter: 5159  total_loss: 3.489  loss_sem_seg: 1.983  loss_center: 0.5408  loss_offset: 0.883  time: 0.3765  data_time: 0.0249  lr: 0.0013013  max_mem: 8976M
[12/10 06:51:02 d2.utils.events]:  eta: 0:30:10  iter: 5179  total_loss: 3.357  loss_sem_seg: 1.866  loss_center: 0.6479  loss_offset: 0.9699  time: 0.3765  data_time: 0.0270  lr: 0.0012965  max_mem: 8976M
[12/10 06:51:09 d2.utils.events]:  eta: 0:30:03  iter: 5199  total_loss: 3.478  loss_sem_seg: 1.807  loss_center: 0.5577  loss_offset: 0.9426  time: 0.3765  data_time: 0.0275  lr: 0.0012916  max_mem: 8976M
[12/10 06:51:17 d2.utils.events]:  eta: 0:29:55  iter: 5219  total_loss: 3.231  loss_sem_seg: 1.616  loss_center: 0.7191  loss_offset: 0.8331  time: 0.3765  data_time: 0.0260  lr: 0.0012868  max_mem: 8976M
[12/10 06:51:24 d2.utils.events]:  eta: 0:29:47  iter: 5239  total_loss: 3.206  loss_sem_seg: 1.783  loss_center: 0.5634  loss_offset: 0.8856  time: 0.3765  data_time: 0.0267  lr: 0.0012819  max_mem: 8976M
[12/10 06:51:32 d2.utils.events]:  eta: 0:29:40  iter: 5259  total_loss: 3.186  loss_sem_seg: 1.754  loss_center: 0.6549  loss_offset: 0.7699  time: 0.3765  data_time: 0.0275  lr: 0.0012771  max_mem: 8976M
[12/10 06:51:39 d2.utils.events]:  eta: 0:29:33  iter: 5279  total_loss: 3.08  loss_sem_seg: 1.652  loss_center: 0.5713  loss_offset: 0.8314  time: 0.3765  data_time: 0.0264  lr: 0.0012722  max_mem: 8976M
[12/10 06:51:47 d2.utils.events]:  eta: 0:29:25  iter: 5299  total_loss: 3.444  loss_sem_seg: 1.731  loss_center: 0.6124  loss_offset: 0.8737  time: 0.3765  data_time: 0.0264  lr: 0.0012674  max_mem: 8976M
[12/10 06:51:54 d2.utils.events]:  eta: 0:29:18  iter: 5319  total_loss: 3.261  loss_sem_seg: 1.625  loss_center: 0.6003  loss_offset: 0.8237  time: 0.3765  data_time: 0.0253  lr: 0.0012625  max_mem: 8976M
[12/10 06:52:02 d2.utils.events]:  eta: 0:29:10  iter: 5339  total_loss: 3.144  loss_sem_seg: 1.717  loss_center: 0.6351  loss_offset: 0.8656  time: 0.3765  data_time: 0.0259  lr: 0.0012577  max_mem: 8976M
[12/10 06:52:09 d2.utils.events]:  eta: 0:29:03  iter: 5359  total_loss: 3.285  loss_sem_seg: 1.627  loss_center: 0.6624  loss_offset: 0.8544  time: 0.3765  data_time: 0.0277  lr: 0.0012528  max_mem: 8976M
[12/10 06:52:17 d2.utils.events]:  eta: 0:28:55  iter: 5379  total_loss: 2.933  loss_sem_seg: 1.491  loss_center: 0.514  loss_offset: 0.8799  time: 0.3765  data_time: 0.0262  lr: 0.001248  max_mem: 8976M
[12/10 06:52:24 d2.utils.events]:  eta: 0:28:48  iter: 5399  total_loss: 2.859  loss_sem_seg: 1.479  loss_center: 0.6349  loss_offset: 0.8149  time: 0.3765  data_time: 0.0267  lr: 0.0012431  max_mem: 8976M
[12/10 06:52:32 d2.utils.events]:  eta: 0:28:40  iter: 5419  total_loss: 3.08  loss_sem_seg: 1.748  loss_center: 0.6935  loss_offset: 0.8417  time: 0.3765  data_time: 0.0249  lr: 0.0012382  max_mem: 8976M
[12/10 06:52:39 d2.utils.events]:  eta: 0:28:32  iter: 5439  total_loss: 3.283  loss_sem_seg: 1.625  loss_center: 0.6499  loss_offset: 0.7607  time: 0.3765  data_time: 0.0266  lr: 0.0012334  max_mem: 8976M
[12/10 06:52:47 d2.utils.events]:  eta: 0:28:25  iter: 5459  total_loss: 3.09  loss_sem_seg: 1.597  loss_center: 0.5156  loss_offset: 0.7945  time: 0.3765  data_time: 0.0274  lr: 0.0012285  max_mem: 8976M
[12/10 06:52:55 d2.utils.events]:  eta: 0:28:18  iter: 5479  total_loss: 3.303  loss_sem_seg: 1.719  loss_center: 0.5764  loss_offset: 0.7953  time: 0.3765  data_time: 0.0260  lr: 0.0012236  max_mem: 8976M
[12/10 06:53:02 d2.utils.events]:  eta: 0:28:11  iter: 5499  total_loss: 3.04  loss_sem_seg: 1.501  loss_center: 0.6811  loss_offset: 0.7849  time: 0.3765  data_time: 0.0258  lr: 0.0012188  max_mem: 8976M
[12/10 06:53:10 d2.utils.events]:  eta: 0:28:03  iter: 5519  total_loss: 3.143  loss_sem_seg: 1.674  loss_center: 0.6803  loss_offset: 0.8088  time: 0.3765  data_time: 0.0256  lr: 0.0012139  max_mem: 8976M
[12/10 06:53:17 d2.utils.events]:  eta: 0:27:55  iter: 5539  total_loss: 2.873  loss_sem_seg: 1.52  loss_center: 0.498  loss_offset: 0.7562  time: 0.3765  data_time: 0.0278  lr: 0.001209  max_mem: 8976M
[12/10 06:53:25 d2.utils.events]:  eta: 0:27:48  iter: 5559  total_loss: 3.495  loss_sem_seg: 1.913  loss_center: 0.5975  loss_offset: 0.9308  time: 0.3765  data_time: 0.0270  lr: 0.0012041  max_mem: 8976M
[12/10 06:53:32 d2.utils.events]:  eta: 0:27:40  iter: 5579  total_loss: 3.302  loss_sem_seg: 1.677  loss_center: 0.7187  loss_offset: 0.8871  time: 0.3765  data_time: 0.0263  lr: 0.0011992  max_mem: 8976M
[12/10 06:53:40 d2.utils.events]:  eta: 0:27:33  iter: 5599  total_loss: 3.348  loss_sem_seg: 1.666  loss_center: 0.6829  loss_offset: 0.8838  time: 0.3765  data_time: 0.0279  lr: 0.0011944  max_mem: 8976M
[12/10 06:53:47 d2.utils.events]:  eta: 0:27:25  iter: 5619  total_loss: 3.126  loss_sem_seg: 1.546  loss_center: 0.6089  loss_offset: 0.7744  time: 0.3765  data_time: 0.0254  lr: 0.0011895  max_mem: 8976M
[12/10 06:53:55 d2.utils.events]:  eta: 0:27:18  iter: 5639  total_loss: 2.92  loss_sem_seg: 1.504  loss_center: 0.5919  loss_offset: 0.745  time: 0.3765  data_time: 0.0256  lr: 0.0011846  max_mem: 8976M
[12/10 06:54:02 d2.utils.events]:  eta: 0:27:10  iter: 5659  total_loss: 3.026  loss_sem_seg: 1.521  loss_center: 0.5765  loss_offset: 0.9574  time: 0.3765  data_time: 0.0279  lr: 0.0011797  max_mem: 8976M
[12/10 06:54:10 d2.utils.events]:  eta: 0:27:02  iter: 5679  total_loss: 3.214  loss_sem_seg: 1.502  loss_center: 0.6416  loss_offset: 0.8789  time: 0.3765  data_time: 0.0254  lr: 0.0011748  max_mem: 8976M
[12/10 06:54:17 d2.utils.events]:  eta: 0:26:55  iter: 5699  total_loss: 2.896  loss_sem_seg: 1.488  loss_center: 0.5269  loss_offset: 0.802  time: 0.3765  data_time: 0.0256  lr: 0.0011699  max_mem: 8976M
[12/10 06:54:25 d2.utils.events]:  eta: 0:26:47  iter: 5719  total_loss: 3.157  loss_sem_seg: 1.713  loss_center: 0.4508  loss_offset: 0.8064  time: 0.3764  data_time: 0.0274  lr: 0.001165  max_mem: 8976M
[12/10 06:54:32 d2.utils.events]:  eta: 0:26:39  iter: 5739  total_loss: 2.933  loss_sem_seg: 1.66  loss_center: 0.6161  loss_offset: 0.7232  time: 0.3764  data_time: 0.0269  lr: 0.0011601  max_mem: 8976M
[12/10 06:54:40 d2.utils.events]:  eta: 0:26:31  iter: 5759  total_loss: 2.912  loss_sem_seg: 1.607  loss_center: 0.4851  loss_offset: 0.8511  time: 0.3764  data_time: 0.0268  lr: 0.0011552  max_mem: 8976M
[12/10 06:54:47 d2.utils.events]:  eta: 0:26:25  iter: 5779  total_loss: 3.408  loss_sem_seg: 1.891  loss_center: 0.5467  loss_offset: 0.8557  time: 0.3764  data_time: 0.0281  lr: 0.0011503  max_mem: 8976M
[12/10 06:54:55 d2.utils.events]:  eta: 0:26:17  iter: 5799  total_loss: 3.306  loss_sem_seg: 1.705  loss_center: 0.6098  loss_offset: 0.9053  time: 0.3764  data_time: 0.0265  lr: 0.0011454  max_mem: 8976M
[12/10 06:55:02 d2.utils.events]:  eta: 0:26:10  iter: 5819  total_loss: 3.008  loss_sem_seg: 1.498  loss_center: 0.6428  loss_offset: 0.7935  time: 0.3764  data_time: 0.0263  lr: 0.0011405  max_mem: 8976M
[12/10 06:55:10 d2.utils.events]:  eta: 0:26:02  iter: 5839  total_loss: 3.181  loss_sem_seg: 1.726  loss_center: 0.5783  loss_offset: 0.7531  time: 0.3764  data_time: 0.0257  lr: 0.0011356  max_mem: 8976M
[12/10 06:55:17 d2.utils.events]:  eta: 0:25:54  iter: 5859  total_loss: 3.138  loss_sem_seg: 1.68  loss_center: 0.642  loss_offset: 0.8483  time: 0.3764  data_time: 0.0269  lr: 0.0011307  max_mem: 8976M
[12/10 06:55:25 d2.utils.events]:  eta: 0:25:45  iter: 5879  total_loss: 3.215  loss_sem_seg: 1.483  loss_center: 0.7994  loss_offset: 0.8517  time: 0.3764  data_time: 0.0257  lr: 0.0011258  max_mem: 8976M
[12/10 06:55:33 d2.utils.events]:  eta: 0:25:37  iter: 5899  total_loss: 3.008  loss_sem_seg: 1.54  loss_center: 0.6009  loss_offset: 0.7942  time: 0.3764  data_time: 0.0273  lr: 0.0011208  max_mem: 8976M
[12/10 06:55:40 d2.utils.events]:  eta: 0:25:30  iter: 5919  total_loss: 3.277  loss_sem_seg: 1.623  loss_center: 0.686  loss_offset: 0.8177  time: 0.3764  data_time: 0.0275  lr: 0.0011159  max_mem: 8976M
[12/10 06:55:48 d2.utils.events]:  eta: 0:25:22  iter: 5939  total_loss: 2.842  loss_sem_seg: 1.476  loss_center: 0.4919  loss_offset: 0.8029  time: 0.3764  data_time: 0.0259  lr: 0.001111  max_mem: 8976M
[12/10 06:55:55 d2.utils.events]:  eta: 0:25:15  iter: 5959  total_loss: 3.196  loss_sem_seg: 1.466  loss_center: 0.7505  loss_offset: 0.9015  time: 0.3764  data_time: 0.0259  lr: 0.0011061  max_mem: 8976M
[12/10 06:56:03 d2.utils.events]:  eta: 0:25:07  iter: 5979  total_loss: 3.363  loss_sem_seg: 1.712  loss_center: 0.7059  loss_offset: 0.8992  time: 0.3764  data_time: 0.0262  lr: 0.0011011  max_mem: 8976M
[12/10 06:56:10 d2.utils.events]:  eta: 0:24:59  iter: 5999  total_loss: 3.149  loss_sem_seg: 1.598  loss_center: 0.6202  loss_offset: 0.8534  time: 0.3764  data_time: 0.0259  lr: 0.0010962  max_mem: 8976M
[12/10 06:56:18 d2.utils.events]:  eta: 0:24:52  iter: 6019  total_loss: 3.126  loss_sem_seg: 1.562  loss_center: 0.5833  loss_offset: 0.8216  time: 0.3764  data_time: 0.0257  lr: 0.0010913  max_mem: 8976M
[12/10 06:56:25 d2.utils.events]:  eta: 0:24:44  iter: 6039  total_loss: 3.251  loss_sem_seg: 1.681  loss_center: 0.6551  loss_offset: 0.8001  time: 0.3764  data_time: 0.0253  lr: 0.0010863  max_mem: 8976M
[12/10 06:56:33 d2.utils.events]:  eta: 0:24:37  iter: 6059  total_loss: 3.224  loss_sem_seg: 1.554  loss_center: 0.6612  loss_offset: 0.7959  time: 0.3764  data_time: 0.0251  lr: 0.0010814  max_mem: 8976M
[12/10 06:56:40 d2.utils.events]:  eta: 0:24:29  iter: 6079  total_loss: 3.071  loss_sem_seg: 1.498  loss_center: 0.5879  loss_offset: 0.8956  time: 0.3764  data_time: 0.0255  lr: 0.0010765  max_mem: 8976M
[12/10 06:56:48 d2.utils.events]:  eta: 0:24:22  iter: 6099  total_loss: 3.025  loss_sem_seg: 1.702  loss_center: 0.6828  loss_offset: 0.8199  time: 0.3764  data_time: 0.0280  lr: 0.0010715  max_mem: 8976M
[12/10 06:56:55 d2.utils.events]:  eta: 0:24:14  iter: 6119  total_loss: 3.175  loss_sem_seg: 1.537  loss_center: 0.6609  loss_offset: 0.8125  time: 0.3764  data_time: 0.0261  lr: 0.0010666  max_mem: 8976M
[12/10 06:57:03 d2.utils.events]:  eta: 0:24:07  iter: 6139  total_loss: 3.393  loss_sem_seg: 1.597  loss_center: 0.5935  loss_offset: 0.8103  time: 0.3764  data_time: 0.0251  lr: 0.0010616  max_mem: 8976M
[12/10 06:57:10 d2.utils.events]:  eta: 0:24:00  iter: 6159  total_loss: 3.201  loss_sem_seg: 1.587  loss_center: 0.5727  loss_offset: 0.9032  time: 0.3764  data_time: 0.0269  lr: 0.0010567  max_mem: 8976M
[12/10 06:57:18 d2.utils.events]:  eta: 0:23:52  iter: 6179  total_loss: 3.367  loss_sem_seg: 1.771  loss_center: 0.7268  loss_offset: 0.8389  time: 0.3764  data_time: 0.0270  lr: 0.0010517  max_mem: 8976M
[12/10 06:57:25 d2.utils.events]:  eta: 0:23:44  iter: 6199  total_loss: 2.81  loss_sem_seg: 1.469  loss_center: 0.5898  loss_offset: 0.7927  time: 0.3764  data_time: 0.0260  lr: 0.0010468  max_mem: 8976M
[12/10 06:57:33 d2.utils.events]:  eta: 0:23:37  iter: 6219  total_loss: 3.069  loss_sem_seg: 1.67  loss_center: 0.5762  loss_offset: 0.8218  time: 0.3764  data_time: 0.0257  lr: 0.0010418  max_mem: 8976M
[12/10 06:57:40 d2.utils.events]:  eta: 0:23:29  iter: 6239  total_loss: 2.857  loss_sem_seg: 1.563  loss_center: 0.5722  loss_offset: 0.725  time: 0.3763  data_time: 0.0264  lr: 0.0010368  max_mem: 8976M
[12/10 06:57:48 d2.utils.events]:  eta: 0:23:21  iter: 6259  total_loss: 3.263  loss_sem_seg: 1.776  loss_center: 0.5523  loss_offset: 0.8166  time: 0.3763  data_time: 0.0278  lr: 0.0010319  max_mem: 8976M
[12/10 06:57:55 d2.utils.events]:  eta: 0:23:14  iter: 6279  total_loss: 3.088  loss_sem_seg: 1.434  loss_center: 0.6407  loss_offset: 0.7776  time: 0.3763  data_time: 0.0260  lr: 0.0010269  max_mem: 8976M
[12/10 06:58:03 d2.utils.events]:  eta: 0:23:07  iter: 6299  total_loss: 2.836  loss_sem_seg: 1.382  loss_center: 0.637  loss_offset: 0.7195  time: 0.3763  data_time: 0.0268  lr: 0.0010219  max_mem: 8976M
[12/10 06:58:10 d2.utils.events]:  eta: 0:22:59  iter: 6319  total_loss: 3.143  loss_sem_seg: 1.613  loss_center: 0.5889  loss_offset: 0.8955  time: 0.3763  data_time: 0.0264  lr: 0.001017  max_mem: 8976M
[12/10 06:58:18 d2.utils.events]:  eta: 0:22:52  iter: 6339  total_loss: 3.122  loss_sem_seg: 1.636  loss_center: 0.6412  loss_offset: 0.7517  time: 0.3763  data_time: 0.0268  lr: 0.001012  max_mem: 8976M
[12/10 06:58:25 d2.utils.events]:  eta: 0:22:44  iter: 6359  total_loss: 3.042  loss_sem_seg: 1.552  loss_center: 0.7907  loss_offset: 0.66  time: 0.3763  data_time: 0.0257  lr: 0.001007  max_mem: 8976M
[12/10 06:58:33 d2.utils.events]:  eta: 0:22:37  iter: 6379  total_loss: 3.136  loss_sem_seg: 1.606  loss_center: 0.5844  loss_offset: 0.8349  time: 0.3763  data_time: 0.0267  lr: 0.001002  max_mem: 8976M
[12/10 06:58:40 d2.utils.events]:  eta: 0:22:29  iter: 6399  total_loss: 3.134  loss_sem_seg: 1.725  loss_center: 0.5766  loss_offset: 0.8681  time: 0.3763  data_time: 0.0258  lr: 0.00099706  max_mem: 8976M
[12/10 06:58:48 d2.utils.events]:  eta: 0:22:22  iter: 6419  total_loss: 3.162  loss_sem_seg: 1.699  loss_center: 0.589  loss_offset: 0.8703  time: 0.3763  data_time: 0.0256  lr: 0.00099207  max_mem: 8976M
[12/10 06:58:56 d2.utils.events]:  eta: 0:22:15  iter: 6439  total_loss: 2.984  loss_sem_seg: 1.492  loss_center: 0.6619  loss_offset: 0.7786  time: 0.3763  data_time: 0.0270  lr: 0.00098709  max_mem: 8976M
[12/10 06:59:03 d2.utils.events]:  eta: 0:22:07  iter: 6459  total_loss: 3.27  loss_sem_seg: 1.705  loss_center: 0.6178  loss_offset: 0.9255  time: 0.3763  data_time: 0.0269  lr: 0.00098209  max_mem: 8976M
[12/10 06:59:11 d2.utils.events]:  eta: 0:21:59  iter: 6479  total_loss: 2.755  loss_sem_seg: 1.521  loss_center: 0.4727  loss_offset: 0.7635  time: 0.3763  data_time: 0.0265  lr: 0.0009771  max_mem: 8976M
[12/10 06:59:18 d2.utils.events]:  eta: 0:21:52  iter: 6499  total_loss: 2.997  loss_sem_seg: 1.449  loss_center: 0.6893  loss_offset: 0.6937  time: 0.3763  data_time: 0.0261  lr: 0.0009721  max_mem: 8976M
[12/10 06:59:26 d2.utils.events]:  eta: 0:21:44  iter: 6519  total_loss: 3.004  loss_sem_seg: 1.51  loss_center: 0.6474  loss_offset: 0.7842  time: 0.3763  data_time: 0.0261  lr: 0.00096711  max_mem: 8976M
[12/10 06:59:33 d2.utils.events]:  eta: 0:21:37  iter: 6539  total_loss: 2.837  loss_sem_seg: 1.633  loss_center: 0.5262  loss_offset: 0.6575  time: 0.3763  data_time: 0.0273  lr: 0.0009621  max_mem: 8976M
[12/10 06:59:41 d2.utils.events]:  eta: 0:21:29  iter: 6559  total_loss: 2.871  loss_sem_seg: 1.423  loss_center: 0.5474  loss_offset: 0.8325  time: 0.3763  data_time: 0.0258  lr: 0.0009571  max_mem: 8976M
[12/10 06:59:48 d2.utils.events]:  eta: 0:21:22  iter: 6579  total_loss: 3.123  loss_sem_seg: 1.657  loss_center: 0.5937  loss_offset: 0.8184  time: 0.3763  data_time: 0.0271  lr: 0.00095209  max_mem: 8976M
[12/10 06:59:56 d2.utils.events]:  eta: 0:21:14  iter: 6599  total_loss: 3.101  loss_sem_seg: 1.51  loss_center: 0.6855  loss_offset: 0.7572  time: 0.3763  data_time: 0.0259  lr: 0.00094708  max_mem: 8976M
[12/10 07:00:03 d2.utils.events]:  eta: 0:21:07  iter: 6619  total_loss: 2.674  loss_sem_seg: 1.343  loss_center: 0.6856  loss_offset: 0.7381  time: 0.3763  data_time: 0.0258  lr: 0.00094206  max_mem: 8976M
[12/10 07:00:11 d2.utils.events]:  eta: 0:20:59  iter: 6639  total_loss: 3.116  loss_sem_seg: 1.604  loss_center: 0.6322  loss_offset: 0.778  time: 0.3763  data_time: 0.0263  lr: 0.00093705  max_mem: 8976M
[12/10 07:00:18 d2.utils.events]:  eta: 0:20:52  iter: 6659  total_loss: 3.2  loss_sem_seg: 1.515  loss_center: 0.6618  loss_offset: 0.8583  time: 0.3763  data_time: 0.0268  lr: 0.00093203  max_mem: 8976M
[12/10 07:00:26 d2.utils.events]:  eta: 0:20:45  iter: 6679  total_loss: 3.107  loss_sem_seg: 1.443  loss_center: 0.6954  loss_offset: 0.8844  time: 0.3763  data_time: 0.0273  lr: 0.000927  max_mem: 8976M
[12/10 07:00:33 d2.utils.events]:  eta: 0:20:37  iter: 6699  total_loss: 2.861  loss_sem_seg: 1.416  loss_center: 0.503  loss_offset: 0.8057  time: 0.3763  data_time: 0.0255  lr: 0.00092198  max_mem: 8976M
[12/10 07:00:41 d2.utils.events]:  eta: 0:20:30  iter: 6719  total_loss: 2.963  loss_sem_seg: 1.563  loss_center: 0.6007  loss_offset: 0.7417  time: 0.3763  data_time: 0.0279  lr: 0.00091695  max_mem: 8976M
[12/10 07:00:48 d2.utils.events]:  eta: 0:20:23  iter: 6739  total_loss: 2.821  loss_sem_seg: 1.574  loss_center: 0.5307  loss_offset: 0.764  time: 0.3763  data_time: 0.0257  lr: 0.00091192  max_mem: 8976M
[12/10 07:00:56 d2.utils.events]:  eta: 0:20:15  iter: 6759  total_loss: 3.161  loss_sem_seg: 1.649  loss_center: 0.6391  loss_offset: 0.7929  time: 0.3763  data_time: 0.0275  lr: 0.00090688  max_mem: 8976M
[12/10 07:01:04 d2.utils.events]:  eta: 0:20:08  iter: 6779  total_loss: 3.005  loss_sem_seg: 1.498  loss_center: 0.6592  loss_offset: 0.8643  time: 0.3763  data_time: 0.0271  lr: 0.00090184  max_mem: 8976M
[12/10 07:01:11 d2.utils.events]:  eta: 0:20:00  iter: 6799  total_loss: 3.128  loss_sem_seg: 1.538  loss_center: 0.6174  loss_offset: 0.8015  time: 0.3763  data_time: 0.0240  lr: 0.0008968  max_mem: 8976M
[12/10 07:01:18 d2.utils.events]:  eta: 0:19:53  iter: 6819  total_loss: 3.001  loss_sem_seg: 1.469  loss_center: 0.7605  loss_offset: 0.6828  time: 0.3763  data_time: 0.0273  lr: 0.00089176  max_mem: 8976M
[12/10 07:01:26 d2.utils.events]:  eta: 0:19:45  iter: 6839  total_loss: 3.073  loss_sem_seg: 1.499  loss_center: 0.5761  loss_offset: 0.772  time: 0.3763  data_time: 0.0266  lr: 0.00088671  max_mem: 8976M
[12/10 07:01:33 d2.utils.events]:  eta: 0:19:38  iter: 6859  total_loss: 2.56  loss_sem_seg: 1.342  loss_center: 0.6213  loss_offset: 0.6891  time: 0.3763  data_time: 0.0266  lr: 0.00088166  max_mem: 8976M
[12/10 07:01:41 d2.utils.events]:  eta: 0:19:30  iter: 6879  total_loss: 2.988  loss_sem_seg: 1.548  loss_center: 0.6104  loss_offset: 0.7406  time: 0.3763  data_time: 0.0257  lr: 0.00087661  max_mem: 8976M
[12/10 07:01:49 d2.utils.events]:  eta: 0:19:23  iter: 6899  total_loss: 3.042  loss_sem_seg: 1.657  loss_center: 0.5087  loss_offset: 0.6938  time: 0.3763  data_time: 0.0269  lr: 0.00087155  max_mem: 8976M
[12/10 07:01:56 d2.utils.events]:  eta: 0:19:15  iter: 6919  total_loss: 2.764  loss_sem_seg: 1.289  loss_center: 0.6143  loss_offset: 0.704  time: 0.3763  data_time: 0.0270  lr: 0.00086649  max_mem: 8976M
[12/10 07:02:04 d2.utils.events]:  eta: 0:19:08  iter: 6939  total_loss: 2.847  loss_sem_seg: 1.555  loss_center: 0.5557  loss_offset: 0.8052  time: 0.3763  data_time: 0.0271  lr: 0.00086142  max_mem: 8976M
[12/10 07:02:11 d2.utils.events]:  eta: 0:19:01  iter: 6959  total_loss: 2.802  loss_sem_seg: 1.402  loss_center: 0.515  loss_offset: 0.7143  time: 0.3763  data_time: 0.0275  lr: 0.00085636  max_mem: 8976M
[12/10 07:02:19 d2.utils.events]:  eta: 0:18:53  iter: 6979  total_loss: 3.046  loss_sem_seg: 1.472  loss_center: 0.6491  loss_offset: 0.7527  time: 0.3763  data_time: 0.0261  lr: 0.00085129  max_mem: 8976M
[12/10 07:02:26 d2.utils.events]:  eta: 0:18:46  iter: 6999  total_loss: 3.051  loss_sem_seg: 1.694  loss_center: 0.5542  loss_offset: 0.7441  time: 0.3763  data_time: 0.0275  lr: 0.00084621  max_mem: 8976M
[12/10 07:02:34 d2.utils.events]:  eta: 0:18:39  iter: 7019  total_loss: 2.826  loss_sem_seg: 1.493  loss_center: 0.5411  loss_offset: 0.7373  time: 0.3763  data_time: 0.0283  lr: 0.00084114  max_mem: 8976M
[12/10 07:02:41 d2.utils.events]:  eta: 0:18:31  iter: 7039  total_loss: 3.175  loss_sem_seg: 1.577  loss_center: 0.6005  loss_offset: 0.8912  time: 0.3763  data_time: 0.0267  lr: 0.00083605  max_mem: 8976M
[12/10 07:02:49 d2.utils.events]:  eta: 0:18:24  iter: 7059  total_loss: 3.302  loss_sem_seg: 1.734  loss_center: 0.5431  loss_offset: 0.8736  time: 0.3763  data_time: 0.0285  lr: 0.00083097  max_mem: 8976M
[12/10 07:02:56 d2.utils.events]:  eta: 0:18:16  iter: 7079  total_loss: 2.96  loss_sem_seg: 1.581  loss_center: 0.6149  loss_offset: 0.8403  time: 0.3763  data_time: 0.0257  lr: 0.00082588  max_mem: 8976M
[12/10 07:03:04 d2.utils.events]:  eta: 0:18:09  iter: 7099  total_loss: 2.714  loss_sem_seg: 1.45  loss_center: 0.5398  loss_offset: 0.7097  time: 0.3763  data_time: 0.0279  lr: 0.00082079  max_mem: 8976M
[12/10 07:03:12 d2.utils.events]:  eta: 0:18:01  iter: 7119  total_loss: 3.335  loss_sem_seg: 1.595  loss_center: 0.6525  loss_offset: 0.8072  time: 0.3763  data_time: 0.0280  lr: 0.0008157  max_mem: 8976M
[12/10 07:03:19 d2.utils.events]:  eta: 0:17:54  iter: 7139  total_loss: 3.01  loss_sem_seg: 1.618  loss_center: 0.5956  loss_offset: 0.6402  time: 0.3763  data_time: 0.0269  lr: 0.0008106  max_mem: 8976M
[12/10 07:03:27 d2.utils.events]:  eta: 0:17:46  iter: 7159  total_loss: 2.826  loss_sem_seg: 1.286  loss_center: 0.6214  loss_offset: 0.7593  time: 0.3763  data_time: 0.0262  lr: 0.0008055  max_mem: 8976M
[12/10 07:03:34 d2.utils.events]:  eta: 0:17:39  iter: 7179  total_loss: 2.922  loss_sem_seg: 1.421  loss_center: 0.7417  loss_offset: 0.7524  time: 0.3763  data_time: 0.0267  lr: 0.00080039  max_mem: 8976M
[12/10 07:03:42 d2.utils.events]:  eta: 0:17:32  iter: 7199  total_loss: 3.042  loss_sem_seg: 1.458  loss_center: 0.7437  loss_offset: 0.694  time: 0.3763  data_time: 0.0275  lr: 0.00079528  max_mem: 8976M
[12/10 07:03:49 d2.utils.events]:  eta: 0:17:25  iter: 7219  total_loss: 2.783  loss_sem_seg: 1.326  loss_center: 0.5331  loss_offset: 0.6865  time: 0.3763  data_time: 0.0262  lr: 0.00079017  max_mem: 8976M
[12/10 07:03:57 d2.utils.events]:  eta: 0:17:17  iter: 7239  total_loss: 3.068  loss_sem_seg: 1.473  loss_center: 0.5899  loss_offset: 0.7409  time: 0.3763  data_time: 0.0277  lr: 0.00078505  max_mem: 8976M
[12/10 07:04:04 d2.utils.events]:  eta: 0:17:10  iter: 7259  total_loss: 3.19  loss_sem_seg: 1.558  loss_center: 0.6351  loss_offset: 0.8682  time: 0.3763  data_time: 0.0271  lr: 0.00077993  max_mem: 8976M
[12/10 07:04:12 d2.utils.events]:  eta: 0:17:02  iter: 7279  total_loss: 3.053  loss_sem_seg: 1.653  loss_center: 0.6253  loss_offset: 0.7863  time: 0.3763  data_time: 0.0266  lr: 0.00077481  max_mem: 8976M
[12/10 07:04:19 d2.utils.events]:  eta: 0:16:54  iter: 7299  total_loss: 2.819  loss_sem_seg: 1.336  loss_center: 0.6204  loss_offset: 0.7254  time: 0.3763  data_time: 0.0266  lr: 0.00076968  max_mem: 8976M
[12/10 07:04:27 d2.utils.events]:  eta: 0:16:46  iter: 7319  total_loss: 3.341  loss_sem_seg: 1.698  loss_center: 0.6352  loss_offset: 0.7894  time: 0.3763  data_time: 0.0256  lr: 0.00076455  max_mem: 8976M
[12/10 07:04:34 d2.utils.events]:  eta: 0:16:38  iter: 7339  total_loss: 2.864  loss_sem_seg: 1.493  loss_center: 0.6313  loss_offset: 0.7033  time: 0.3763  data_time: 0.0265  lr: 0.00075942  max_mem: 8976M
[12/10 07:04:42 d2.utils.events]:  eta: 0:16:31  iter: 7359  total_loss: 2.971  loss_sem_seg: 1.577  loss_center: 0.5663  loss_offset: 0.7781  time: 0.3763  data_time: 0.0271  lr: 0.00075428  max_mem: 8976M
[12/10 07:04:50 d2.utils.events]:  eta: 0:16:23  iter: 7379  total_loss: 2.839  loss_sem_seg: 1.431  loss_center: 0.6922  loss_offset: 0.7627  time: 0.3763  data_time: 0.0260  lr: 0.00074914  max_mem: 8976M
[12/10 07:04:57 d2.utils.events]:  eta: 0:16:16  iter: 7399  total_loss: 2.789  loss_sem_seg: 1.503  loss_center: 0.3775  loss_offset: 0.8608  time: 0.3763  data_time: 0.0257  lr: 0.00074399  max_mem: 8976M
[12/10 07:05:05 d2.utils.events]:  eta: 0:16:08  iter: 7419  total_loss: 3.072  loss_sem_seg: 1.494  loss_center: 0.514  loss_offset: 0.8955  time: 0.3763  data_time: 0.0285  lr: 0.00073884  max_mem: 8976M
[12/10 07:05:12 d2.utils.events]:  eta: 0:16:01  iter: 7439  total_loss: 3.024  loss_sem_seg: 1.479  loss_center: 0.5882  loss_offset: 0.8097  time: 0.3763  data_time: 0.0265  lr: 0.00073368  max_mem: 8976M
[12/10 07:05:20 d2.utils.events]:  eta: 0:15:54  iter: 7459  total_loss: 3.116  loss_sem_seg: 1.455  loss_center: 0.7409  loss_offset: 0.7119  time: 0.3763  data_time: 0.0262  lr: 0.00072852  max_mem: 8976M
[12/10 07:05:27 d2.utils.events]:  eta: 0:15:46  iter: 7479  total_loss: 3.052  loss_sem_seg: 1.604  loss_center: 0.5478  loss_offset: 0.8602  time: 0.3763  data_time: 0.0269  lr: 0.00072336  max_mem: 8976M
[12/10 07:05:35 d2.utils.events]:  eta: 0:15:39  iter: 7499  total_loss: 3.121  loss_sem_seg: 1.562  loss_center: 0.6434  loss_offset: 0.89  time: 0.3763  data_time: 0.0274  lr: 0.00071819  max_mem: 8976M
[12/10 07:05:42 d2.utils.events]:  eta: 0:15:31  iter: 7519  total_loss: 2.953  loss_sem_seg: 1.531  loss_center: 0.6293  loss_offset: 0.73  time: 0.3763  data_time: 0.0268  lr: 0.00071302  max_mem: 8976M
[12/10 07:05:50 d2.utils.events]:  eta: 0:15:23  iter: 7539  total_loss: 3.171  loss_sem_seg: 1.563  loss_center: 0.8015  loss_offset: 0.8783  time: 0.3763  data_time: 0.0279  lr: 0.00070785  max_mem: 8976M
[12/10 07:05:57 d2.utils.events]:  eta: 0:15:16  iter: 7559  total_loss: 3.06  loss_sem_seg: 1.45  loss_center: 0.6792  loss_offset: 0.7126  time: 0.3763  data_time: 0.0266  lr: 0.00070267  max_mem: 8976M
[12/10 07:06:05 d2.utils.events]:  eta: 0:15:08  iter: 7579  total_loss: 2.54  loss_sem_seg: 1.311  loss_center: 0.6322  loss_offset: 0.6374  time: 0.3763  data_time: 0.0265  lr: 0.00069749  max_mem: 8976M
[12/10 07:06:12 d2.utils.events]:  eta: 0:15:01  iter: 7599  total_loss: 2.828  loss_sem_seg: 1.498  loss_center: 0.5158  loss_offset: 0.6445  time: 0.3763  data_time: 0.0274  lr: 0.0006923  max_mem: 8976M
[12/10 07:06:20 d2.utils.events]:  eta: 0:14:53  iter: 7619  total_loss: 3.061  loss_sem_seg: 1.643  loss_center: 0.4665  loss_offset: 0.8856  time: 0.3763  data_time: 0.0261  lr: 0.00068711  max_mem: 8976M
[12/10 07:06:27 d2.utils.events]:  eta: 0:14:46  iter: 7639  total_loss: 2.854  loss_sem_seg: 1.462  loss_center: 0.4852  loss_offset: 0.721  time: 0.3763  data_time: 0.0266  lr: 0.00068191  max_mem: 8976M
[12/10 07:06:35 d2.utils.events]:  eta: 0:14:38  iter: 7659  total_loss: 3.507  loss_sem_seg: 1.658  loss_center: 0.6023  loss_offset: 0.7997  time: 0.3763  data_time: 0.0269  lr: 0.00067671  max_mem: 8976M
[12/10 07:06:42 d2.utils.events]:  eta: 0:14:31  iter: 7679  total_loss: 3.043  loss_sem_seg: 1.571  loss_center: 0.5601  loss_offset: 0.7764  time: 0.3763  data_time: 0.0263  lr: 0.0006715  max_mem: 8976M
[12/10 07:06:50 d2.utils.events]:  eta: 0:14:23  iter: 7699  total_loss: 2.929  loss_sem_seg: 1.636  loss_center: 0.56  loss_offset: 0.6171  time: 0.3763  data_time: 0.0268  lr: 0.00066629  max_mem: 8976M
[12/10 07:06:57 d2.utils.events]:  eta: 0:14:15  iter: 7719  total_loss: 3.091  loss_sem_seg: 1.66  loss_center: 0.5516  loss_offset: 0.7712  time: 0.3763  data_time: 0.0271  lr: 0.00066108  max_mem: 8976M
[12/10 07:07:05 d2.utils.events]:  eta: 0:14:08  iter: 7739  total_loss: 2.712  loss_sem_seg: 1.254  loss_center: 0.6156  loss_offset: 0.6063  time: 0.3763  data_time: 0.0253  lr: 0.00065586  max_mem: 8976M
[12/10 07:07:13 d2.utils.events]:  eta: 0:14:00  iter: 7759  total_loss: 2.725  loss_sem_seg: 1.336  loss_center: 0.6454  loss_offset: 0.7952  time: 0.3763  data_time: 0.0273  lr: 0.00065064  max_mem: 8976M
[12/10 07:07:20 d2.utils.events]:  eta: 0:13:53  iter: 7779  total_loss: 2.741  loss_sem_seg: 1.359  loss_center: 0.5431  loss_offset: 0.569  time: 0.3763  data_time: 0.0255  lr: 0.00064541  max_mem: 8976M
[12/10 07:07:28 d2.utils.events]:  eta: 0:13:45  iter: 7799  total_loss: 3.038  loss_sem_seg: 1.58  loss_center: 0.5809  loss_offset: 0.7303  time: 0.3763  data_time: 0.0273  lr: 0.00064017  max_mem: 8976M
[12/10 07:07:35 d2.utils.events]:  eta: 0:13:37  iter: 7819  total_loss: 3.013  loss_sem_seg: 1.501  loss_center: 0.5066  loss_offset: 0.8048  time: 0.3763  data_time: 0.0277  lr: 0.00063494  max_mem: 8976M
[12/10 07:07:43 d2.utils.events]:  eta: 0:13:30  iter: 7839  total_loss: 2.758  loss_sem_seg: 1.4  loss_center: 0.5752  loss_offset: 0.6711  time: 0.3763  data_time: 0.0260  lr: 0.00062969  max_mem: 8976M
[12/10 07:07:50 d2.utils.events]:  eta: 0:13:22  iter: 7859  total_loss: 2.922  loss_sem_seg: 1.556  loss_center: 0.6141  loss_offset: 0.793  time: 0.3763  data_time: 0.0264  lr: 0.00062445  max_mem: 8976M
[12/10 07:07:58 d2.utils.events]:  eta: 0:13:15  iter: 7879  total_loss: 2.621  loss_sem_seg: 1.262  loss_center: 0.6086  loss_offset: 0.7082  time: 0.3763  data_time: 0.0256  lr: 0.00061919  max_mem: 8976M
[12/10 07:08:05 d2.utils.events]:  eta: 0:13:07  iter: 7899  total_loss: 2.73  loss_sem_seg: 1.493  loss_center: 0.5606  loss_offset: 0.744  time: 0.3763  data_time: 0.0265  lr: 0.00061394  max_mem: 8976M
[12/10 07:08:13 d2.utils.events]:  eta: 0:13:00  iter: 7919  total_loss: 3.006  loss_sem_seg: 1.782  loss_center: 0.3995  loss_offset: 0.7252  time: 0.3763  data_time: 0.0257  lr: 0.00060867  max_mem: 8976M
[12/10 07:08:20 d2.utils.events]:  eta: 0:12:52  iter: 7939  total_loss: 2.992  loss_sem_seg: 1.471  loss_center: 0.6311  loss_offset: 0.6963  time: 0.3762  data_time: 0.0266  lr: 0.00060341  max_mem: 8976M
[12/10 07:08:27 d2.utils.events]:  eta: 0:12:44  iter: 7959  total_loss: 2.821  loss_sem_seg: 1.45  loss_center: 0.5417  loss_offset: 0.8136  time: 0.3762  data_time: 0.0268  lr: 0.00059813  max_mem: 8976M
[12/10 07:08:35 d2.utils.events]:  eta: 0:12:37  iter: 7979  total_loss: 3.161  loss_sem_seg: 1.731  loss_center: 0.5412  loss_offset: 0.8299  time: 0.3762  data_time: 0.0268  lr: 0.00059286  max_mem: 8976M
[12/10 07:08:43 d2.utils.events]:  eta: 0:12:29  iter: 7999  total_loss: 2.902  loss_sem_seg: 1.421  loss_center: 0.6106  loss_offset: 0.73  time: 0.3762  data_time: 0.0273  lr: 0.00058757  max_mem: 8976M
[12/10 07:08:50 d2.utils.events]:  eta: 0:12:21  iter: 8019  total_loss: 2.677  loss_sem_seg: 1.27  loss_center: 0.5374  loss_offset: 0.6948  time: 0.3762  data_time: 0.0261  lr: 0.00058229  max_mem: 8976M
[12/10 07:08:58 d2.utils.events]:  eta: 0:12:14  iter: 8039  total_loss: 2.816  loss_sem_seg: 1.517  loss_center: 0.55  loss_offset: 0.7731  time: 0.3762  data_time: 0.0269  lr: 0.00057699  max_mem: 8976M
[12/10 07:09:05 d2.utils.events]:  eta: 0:12:07  iter: 8059  total_loss: 2.99  loss_sem_seg: 1.587  loss_center: 0.6006  loss_offset: 0.7821  time: 0.3762  data_time: 0.0268  lr: 0.00057169  max_mem: 8976M
[12/10 07:09:13 d2.utils.events]:  eta: 0:11:59  iter: 8079  total_loss: 2.801  loss_sem_seg: 1.549  loss_center: 0.6852  loss_offset: 0.7713  time: 0.3762  data_time: 0.0253  lr: 0.00056639  max_mem: 8976M
[12/10 07:09:20 d2.utils.events]:  eta: 0:11:52  iter: 8099  total_loss: 2.767  loss_sem_seg: 1.276  loss_center: 0.7139  loss_offset: 0.6916  time: 0.3762  data_time: 0.0272  lr: 0.00056108  max_mem: 8976M
[12/10 07:09:28 d2.utils.events]:  eta: 0:11:44  iter: 8119  total_loss: 2.704  loss_sem_seg: 1.355  loss_center: 0.6728  loss_offset: 0.7437  time: 0.3762  data_time: 0.0253  lr: 0.00055576  max_mem: 8976M
[12/10 07:09:35 d2.utils.events]:  eta: 0:11:37  iter: 8139  total_loss: 2.856  loss_sem_seg: 1.517  loss_center: 0.5078  loss_offset: 0.7139  time: 0.3762  data_time: 0.0257  lr: 0.00055044  max_mem: 8976M
[12/10 07:09:43 d2.utils.events]:  eta: 0:11:29  iter: 8159  total_loss: 2.797  loss_sem_seg: 1.364  loss_center: 0.5138  loss_offset: 0.6745  time: 0.3762  data_time: 0.0265  lr: 0.00054512  max_mem: 8976M
[12/10 07:09:50 d2.utils.events]:  eta: 0:11:21  iter: 8179  total_loss: 3.194  loss_sem_seg: 1.46  loss_center: 0.6298  loss_offset: 0.7275  time: 0.3762  data_time: 0.0266  lr: 0.00053978  max_mem: 8976M
[12/10 07:09:58 d2.utils.events]:  eta: 0:11:14  iter: 8199  total_loss: 2.362  loss_sem_seg: 1.291  loss_center: 0.549  loss_offset: 0.6527  time: 0.3762  data_time: 0.0258  lr: 0.00053444  max_mem: 8976M
[12/10 07:10:05 d2.utils.events]:  eta: 0:11:06  iter: 8219  total_loss: 2.811  loss_sem_seg: 1.385  loss_center: 0.6072  loss_offset: 0.8348  time: 0.3762  data_time: 0.0277  lr: 0.0005291  max_mem: 8976M
[12/10 07:10:13 d2.utils.events]:  eta: 0:10:59  iter: 8239  total_loss: 2.785  loss_sem_seg: 1.451  loss_center: 0.4317  loss_offset: 0.7455  time: 0.3762  data_time: 0.0269  lr: 0.00052375  max_mem: 8976M
[12/10 07:10:20 d2.utils.events]:  eta: 0:10:52  iter: 8259  total_loss: 2.54  loss_sem_seg: 1.243  loss_center: 0.5748  loss_offset: 0.6198  time: 0.3762  data_time: 0.0277  lr: 0.00051839  max_mem: 8976M
[12/10 07:10:28 d2.utils.events]:  eta: 0:10:44  iter: 8279  total_loss: 2.953  loss_sem_seg: 1.303  loss_center: 0.6443  loss_offset: 0.6887  time: 0.3762  data_time: 0.0264  lr: 0.00051303  max_mem: 8976M
[12/10 07:10:35 d2.utils.events]:  eta: 0:10:37  iter: 8299  total_loss: 2.886  loss_sem_seg: 1.411  loss_center: 0.7096  loss_offset: 0.8155  time: 0.3762  data_time: 0.0274  lr: 0.00050766  max_mem: 8976M
[12/10 07:10:43 d2.utils.events]:  eta: 0:10:30  iter: 8319  total_loss: 2.839  loss_sem_seg: 1.303  loss_center: 0.5852  loss_offset: 0.7641  time: 0.3762  data_time: 0.0281  lr: 0.00050229  max_mem: 8976M
[12/10 07:10:50 d2.utils.events]:  eta: 0:10:22  iter: 8339  total_loss: 2.712  loss_sem_seg: 1.346  loss_center: 0.595  loss_offset: 0.6295  time: 0.3762  data_time: 0.0265  lr: 0.0004969  max_mem: 8976M
[12/10 07:10:58 d2.utils.events]:  eta: 0:10:15  iter: 8359  total_loss: 3.172  loss_sem_seg: 1.637  loss_center: 0.5533  loss_offset: 0.7398  time: 0.3762  data_time: 0.0269  lr: 0.00049152  max_mem: 8976M
[12/10 07:11:06 d2.utils.events]:  eta: 0:10:07  iter: 8379  total_loss: 3.043  loss_sem_seg: 1.695  loss_center: 0.6727  loss_offset: 0.7724  time: 0.3762  data_time: 0.0259  lr: 0.00048612  max_mem: 8976M
[12/10 07:11:13 d2.utils.events]:  eta: 0:10:00  iter: 8399  total_loss: 2.939  loss_sem_seg: 1.526  loss_center: 0.6159  loss_offset: 0.7554  time: 0.3762  data_time: 0.0256  lr: 0.00048072  max_mem: 8976M
[12/10 07:11:21 d2.utils.events]:  eta: 0:09:52  iter: 8419  total_loss: 2.936  loss_sem_seg: 1.556  loss_center: 0.6639  loss_offset: 0.7579  time: 0.3762  data_time: 0.0260  lr: 0.00047531  max_mem: 8976M
[12/10 07:11:28 d2.utils.events]:  eta: 0:09:44  iter: 8439  total_loss: 2.914  loss_sem_seg: 1.42  loss_center: 0.6101  loss_offset: 0.7752  time: 0.3762  data_time: 0.0267  lr: 0.0004699  max_mem: 8976M
[12/10 07:11:36 d2.utils.events]:  eta: 0:09:37  iter: 8459  total_loss: 2.988  loss_sem_seg: 1.478  loss_center: 0.4832  loss_offset: 0.8033  time: 0.3762  data_time: 0.0276  lr: 0.00046448  max_mem: 8976M
[12/10 07:11:43 d2.utils.events]:  eta: 0:09:29  iter: 8479  total_loss: 2.779  loss_sem_seg: 1.335  loss_center: 0.6247  loss_offset: 0.8082  time: 0.3762  data_time: 0.0259  lr: 0.00045905  max_mem: 8976M
[12/10 07:11:51 d2.utils.events]:  eta: 0:09:22  iter: 8499  total_loss: 3.007  loss_sem_seg: 1.514  loss_center: 0.5586  loss_offset: 0.7174  time: 0.3762  data_time: 0.0276  lr: 0.00045361  max_mem: 8976M
[12/10 07:11:58 d2.utils.events]:  eta: 0:09:15  iter: 8519  total_loss: 2.839  loss_sem_seg: 1.407  loss_center: 0.5277  loss_offset: 0.8103  time: 0.3762  data_time: 0.0266  lr: 0.00044817  max_mem: 8976M
[12/10 07:12:06 d2.utils.events]:  eta: 0:09:07  iter: 8539  total_loss: 2.961  loss_sem_seg: 1.462  loss_center: 0.5087  loss_offset: 0.6826  time: 0.3762  data_time: 0.0264  lr: 0.00044272  max_mem: 8976M
[12/10 07:12:13 d2.utils.events]:  eta: 0:09:00  iter: 8559  total_loss: 3.083  loss_sem_seg: 1.541  loss_center: 0.5837  loss_offset: 0.8322  time: 0.3762  data_time: 0.0267  lr: 0.00043726  max_mem: 8976M
[12/10 07:12:21 d2.utils.events]:  eta: 0:08:52  iter: 8579  total_loss: 2.966  loss_sem_seg: 1.645  loss_center: 0.6174  loss_offset: 0.8418  time: 0.3762  data_time: 0.0278  lr: 0.00043179  max_mem: 8976M
[12/10 07:12:28 d2.utils.events]:  eta: 0:08:44  iter: 8599  total_loss: 2.953  loss_sem_seg: 1.603  loss_center: 0.616  loss_offset: 0.7542  time: 0.3762  data_time: 0.0269  lr: 0.00042632  max_mem: 8976M
[12/10 07:12:36 d2.utils.events]:  eta: 0:08:37  iter: 8619  total_loss: 2.807  loss_sem_seg: 1.317  loss_center: 0.718  loss_offset: 0.7047  time: 0.3762  data_time: 0.0266  lr: 0.00042084  max_mem: 8976M
[12/10 07:12:43 d2.utils.events]:  eta: 0:08:30  iter: 8639  total_loss: 2.745  loss_sem_seg: 1.324  loss_center: 0.6146  loss_offset: 0.7011  time: 0.3762  data_time: 0.0262  lr: 0.00041535  max_mem: 8976M
[12/10 07:12:51 d2.utils.events]:  eta: 0:08:22  iter: 8659  total_loss: 3.021  loss_sem_seg: 1.369  loss_center: 0.8401  loss_offset: 0.7369  time: 0.3762  data_time: 0.0254  lr: 0.00040985  max_mem: 8976M
[12/10 07:12:58 d2.utils.events]:  eta: 0:08:14  iter: 8679  total_loss: 2.919  loss_sem_seg: 1.381  loss_center: 0.6261  loss_offset: 0.8072  time: 0.3762  data_time: 0.0245  lr: 0.00040435  max_mem: 8976M
[12/10 07:13:06 d2.utils.events]:  eta: 0:08:07  iter: 8699  total_loss: 2.8  loss_sem_seg: 1.472  loss_center: 0.4049  loss_offset: 0.8716  time: 0.3762  data_time: 0.0266  lr: 0.00039883  max_mem: 8976M
[12/10 07:13:13 d2.utils.events]:  eta: 0:07:59  iter: 8719  total_loss: 2.91  loss_sem_seg: 1.542  loss_center: 0.6543  loss_offset: 0.745  time: 0.3762  data_time: 0.0261  lr: 0.00039331  max_mem: 8976M
[12/10 07:13:21 d2.utils.events]:  eta: 0:07:52  iter: 8739  total_loss: 2.932  loss_sem_seg: 1.492  loss_center: 0.5674  loss_offset: 0.747  time: 0.3762  data_time: 0.0271  lr: 0.00038778  max_mem: 8976M
[12/10 07:13:28 d2.utils.events]:  eta: 0:07:44  iter: 8759  total_loss: 2.613  loss_sem_seg: 1.359  loss_center: 0.6203  loss_offset: 0.7348  time: 0.3762  data_time: 0.0255  lr: 0.00038224  max_mem: 8976M
[12/10 07:13:36 d2.utils.events]:  eta: 0:07:37  iter: 8779  total_loss: 3.005  loss_sem_seg: 1.637  loss_center: 0.5473  loss_offset: 0.8213  time: 0.3762  data_time: 0.0255  lr: 0.00037669  max_mem: 8976M
[12/10 07:13:43 d2.utils.events]:  eta: 0:07:29  iter: 8799  total_loss: 2.799  loss_sem_seg: 1.459  loss_center: 0.5595  loss_offset: 0.7969  time: 0.3762  data_time: 0.0256  lr: 0.00037113  max_mem: 8976M
[12/10 07:13:51 d2.utils.events]:  eta: 0:07:22  iter: 8819  total_loss: 2.617  loss_sem_seg: 1.363  loss_center: 0.5646  loss_offset: 0.6764  time: 0.3762  data_time: 0.0248  lr: 0.00036557  max_mem: 8976M
[12/10 07:13:58 d2.utils.events]:  eta: 0:07:14  iter: 8839  total_loss: 2.694  loss_sem_seg: 1.455  loss_center: 0.5654  loss_offset: 0.6387  time: 0.3762  data_time: 0.0273  lr: 0.00035999  max_mem: 8976M
[12/10 07:14:06 d2.utils.events]:  eta: 0:07:07  iter: 8859  total_loss: 3.011  loss_sem_seg: 1.553  loss_center: 0.5705  loss_offset: 0.7407  time: 0.3761  data_time: 0.0267  lr: 0.0003544  max_mem: 8976M
[12/10 07:14:13 d2.utils.events]:  eta: 0:07:00  iter: 8879  total_loss: 3.066  loss_sem_seg: 1.584  loss_center: 0.6575  loss_offset: 0.6647  time: 0.3761  data_time: 0.0270  lr: 0.00034881  max_mem: 8976M
[12/10 07:14:21 d2.utils.events]:  eta: 0:06:52  iter: 8899  total_loss: 2.523  loss_sem_seg: 1.337  loss_center: 0.5139  loss_offset: 0.6924  time: 0.3762  data_time: 0.0274  lr: 0.0003432  max_mem: 8976M
[12/10 07:14:28 d2.utils.events]:  eta: 0:06:45  iter: 8919  total_loss: 2.747  loss_sem_seg: 1.554  loss_center: 0.5398  loss_offset: 0.7107  time: 0.3761  data_time: 0.0266  lr: 0.00033758  max_mem: 8976M
[12/10 07:14:36 d2.utils.events]:  eta: 0:06:37  iter: 8939  total_loss: 2.73  loss_sem_seg: 1.427  loss_center: 0.4681  loss_offset: 0.6866  time: 0.3761  data_time: 0.0268  lr: 0.00033196  max_mem: 8976M
[12/10 07:14:43 d2.utils.events]:  eta: 0:06:30  iter: 8959  total_loss: 2.827  loss_sem_seg: 1.346  loss_center: 0.6746  loss_offset: 0.8199  time: 0.3761  data_time: 0.0269  lr: 0.00032632  max_mem: 8976M
[12/10 07:14:51 d2.utils.events]:  eta: 0:06:22  iter: 8979  total_loss: 2.876  loss_sem_seg: 1.346  loss_center: 0.7265  loss_offset: 0.6915  time: 0.3761  data_time: 0.0249  lr: 0.00032067  max_mem: 8976M
[12/10 07:14:58 d2.utils.events]:  eta: 0:06:15  iter: 8999  total_loss: 2.926  loss_sem_seg: 1.354  loss_center: 0.505  loss_offset: 0.7906  time: 0.3761  data_time: 0.0271  lr: 0.00031501  max_mem: 8976M
[12/10 07:15:06 d2.utils.events]:  eta: 0:06:07  iter: 9019  total_loss: 2.907  loss_sem_seg: 1.351  loss_center: 0.5478  loss_offset: 0.7456  time: 0.3761  data_time: 0.0251  lr: 0.00030934  max_mem: 8976M
[12/10 07:15:13 d2.utils.events]:  eta: 0:06:00  iter: 9039  total_loss: 2.621  loss_sem_seg: 1.332  loss_center: 0.5861  loss_offset: 0.7502  time: 0.3761  data_time: 0.0261  lr: 0.00030366  max_mem: 8976M
[12/10 07:15:21 d2.utils.events]:  eta: 0:05:52  iter: 9059  total_loss: 2.829  loss_sem_seg: 1.286  loss_center: 0.6915  loss_offset: 0.6402  time: 0.3761  data_time: 0.0274  lr: 0.00029797  max_mem: 8976M
[12/10 07:15:28 d2.utils.events]:  eta: 0:05:45  iter: 9079  total_loss: 2.959  loss_sem_seg: 1.346  loss_center: 0.7865  loss_offset: 0.6269  time: 0.3761  data_time: 0.0245  lr: 0.00029226  max_mem: 8976M
[12/10 07:15:36 d2.utils.events]:  eta: 0:05:37  iter: 9099  total_loss: 2.388  loss_sem_seg: 1.139  loss_center: 0.5165  loss_offset: 0.6713  time: 0.3761  data_time: 0.0264  lr: 0.00028654  max_mem: 8976M
[12/10 07:15:43 d2.utils.events]:  eta: 0:05:29  iter: 9119  total_loss: 2.979  loss_sem_seg: 1.734  loss_center: 0.5707  loss_offset: 0.6705  time: 0.3761  data_time: 0.0266  lr: 0.00028081  max_mem: 8976M
[12/10 07:15:51 d2.utils.events]:  eta: 0:05:22  iter: 9139  total_loss: 2.74  loss_sem_seg: 1.38  loss_center: 0.622  loss_offset: 0.7562  time: 0.3761  data_time: 0.0277  lr: 0.00027507  max_mem: 8976M
[12/10 07:15:58 d2.utils.events]:  eta: 0:05:14  iter: 9159  total_loss: 2.686  loss_sem_seg: 1.341  loss_center: 0.6765  loss_offset: 0.6377  time: 0.3761  data_time: 0.0255  lr: 0.00026931  max_mem: 8976M
[12/10 07:16:06 d2.utils.events]:  eta: 0:05:07  iter: 9179  total_loss: 2.471  loss_sem_seg: 1.315  loss_center: 0.5001  loss_offset: 0.7089  time: 0.3761  data_time: 0.0263  lr: 0.00026354  max_mem: 8976M
[12/10 07:16:13 d2.utils.events]:  eta: 0:04:59  iter: 9199  total_loss: 3.11  loss_sem_seg: 1.562  loss_center: 0.52  loss_offset: 0.6958  time: 0.3761  data_time: 0.0270  lr: 0.00025776  max_mem: 8976M
[12/10 07:16:21 d2.utils.events]:  eta: 0:04:52  iter: 9219  total_loss: 2.947  loss_sem_seg: 1.624  loss_center: 0.6157  loss_offset: 0.7479  time: 0.3761  data_time: 0.0260  lr: 0.00025196  max_mem: 8976M
[12/10 07:16:28 d2.utils.events]:  eta: 0:04:44  iter: 9239  total_loss: 2.933  loss_sem_seg: 1.595  loss_center: 0.5859  loss_offset: 0.6487  time: 0.3761  data_time: 0.0268  lr: 0.00024614  max_mem: 8976M
[12/10 07:16:36 d2.utils.events]:  eta: 0:04:37  iter: 9259  total_loss: 2.475  loss_sem_seg: 1.29  loss_center: 0.5634  loss_offset: 0.6301  time: 0.3761  data_time: 0.0257  lr: 0.00024031  max_mem: 8976M
[12/10 07:16:43 d2.utils.events]:  eta: 0:04:29  iter: 9279  total_loss: 2.764  loss_sem_seg: 1.371  loss_center: 0.5425  loss_offset: 0.7743  time: 0.3761  data_time: 0.0263  lr: 0.00023447  max_mem: 8976M
[12/10 07:16:51 d2.utils.events]:  eta: 0:04:22  iter: 9299  total_loss: 2.542  loss_sem_seg: 1.248  loss_center: 0.5297  loss_offset: 0.6528  time: 0.3761  data_time: 0.0249  lr: 0.00022861  max_mem: 8976M
[12/10 07:16:58 d2.utils.events]:  eta: 0:04:14  iter: 9319  total_loss: 2.58  loss_sem_seg: 1.27  loss_center: 0.5935  loss_offset: 0.719  time: 0.3761  data_time: 0.0275  lr: 0.00022273  max_mem: 8976M
[12/10 07:17:06 d2.utils.events]:  eta: 0:04:07  iter: 9339  total_loss: 2.884  loss_sem_seg: 1.482  loss_center: 0.5966  loss_offset: 0.7717  time: 0.3761  data_time: 0.0270  lr: 0.00021683  max_mem: 8976M
[12/10 07:17:14 d2.utils.events]:  eta: 0:03:59  iter: 9359  total_loss: 2.485  loss_sem_seg: 1.289  loss_center: 0.5619  loss_offset: 0.5946  time: 0.3761  data_time: 0.0262  lr: 0.00021092  max_mem: 8976M
[12/10 07:17:21 d2.utils.events]:  eta: 0:03:52  iter: 9379  total_loss: 2.822  loss_sem_seg: 1.611  loss_center: 0.6663  loss_offset: 0.7737  time: 0.3761  data_time: 0.0276  lr: 0.00020499  max_mem: 8976M
[12/10 07:17:29 d2.utils.events]:  eta: 0:03:44  iter: 9399  total_loss: 2.632  loss_sem_seg: 1.304  loss_center: 0.6809  loss_offset: 0.6115  time: 0.3761  data_time: 0.0244  lr: 0.00019903  max_mem: 8976M
[12/10 07:17:36 d2.utils.events]:  eta: 0:03:37  iter: 9419  total_loss: 2.74  loss_sem_seg: 1.411  loss_center: 0.6083  loss_offset: 0.6076  time: 0.3761  data_time: 0.0264  lr: 0.00019306  max_mem: 8976M
[12/10 07:17:44 d2.utils.events]:  eta: 0:03:29  iter: 9439  total_loss: 3.087  loss_sem_seg: 1.575  loss_center: 0.6873  loss_offset: 0.8097  time: 0.3761  data_time: 0.0254  lr: 0.00018707  max_mem: 8976M
[12/10 07:17:51 d2.utils.events]:  eta: 0:03:21  iter: 9459  total_loss: 2.858  loss_sem_seg: 1.403  loss_center: 0.626  loss_offset: 0.7636  time: 0.3761  data_time: 0.0270  lr: 0.00018106  max_mem: 8976M
[12/10 07:17:59 d2.utils.events]:  eta: 0:03:14  iter: 9479  total_loss: 2.735  loss_sem_seg: 1.418  loss_center: 0.666  loss_offset: 0.6996  time: 0.3761  data_time: 0.0265  lr: 0.00017502  max_mem: 8976M
[12/10 07:18:06 d2.utils.events]:  eta: 0:03:06  iter: 9499  total_loss: 2.555  loss_sem_seg: 1.372  loss_center: 0.5173  loss_offset: 0.6464  time: 0.3761  data_time: 0.0261  lr: 0.00016896  max_mem: 8976M
[12/10 07:18:14 d2.utils.events]:  eta: 0:02:59  iter: 9519  total_loss: 2.54  loss_sem_seg: 1.426  loss_center: 0.5707  loss_offset: 0.6105  time: 0.3761  data_time: 0.0271  lr: 0.00016288  max_mem: 8976M
[12/10 07:18:21 d2.utils.events]:  eta: 0:02:51  iter: 9539  total_loss: 2.636  loss_sem_seg: 1.278  loss_center: 0.5378  loss_offset: 0.697  time: 0.3761  data_time: 0.0252  lr: 0.00015677  max_mem: 8976M
[12/10 07:18:29 d2.utils.events]:  eta: 0:02:44  iter: 9559  total_loss: 2.924  loss_sem_seg: 1.537  loss_center: 0.6352  loss_offset: 0.7074  time: 0.3761  data_time: 0.0265  lr: 0.00015064  max_mem: 8976M
[12/10 07:18:36 d2.utils.events]:  eta: 0:02:36  iter: 9579  total_loss: 3.044  loss_sem_seg: 1.57  loss_center: 0.5817  loss_offset: 0.6975  time: 0.3761  data_time: 0.0263  lr: 0.00014448  max_mem: 8976M
[12/10 07:18:44 d2.utils.events]:  eta: 0:02:29  iter: 9599  total_loss: 2.685  loss_sem_seg: 1.243  loss_center: 0.5685  loss_offset: 0.6012  time: 0.3761  data_time: 0.0250  lr: 0.00013828  max_mem: 8976M
[12/10 07:18:51 d2.utils.events]:  eta: 0:02:21  iter: 9619  total_loss: 2.795  loss_sem_seg: 1.443  loss_center: 0.442  loss_offset: 0.7688  time: 0.3761  data_time: 0.0264  lr: 0.00013206  max_mem: 8976M
[12/10 07:18:59 d2.utils.events]:  eta: 0:02:14  iter: 9639  total_loss: 2.5  loss_sem_seg: 1.27  loss_center: 0.6022  loss_offset: 0.6808  time: 0.3761  data_time: 0.0241  lr: 0.0001258  max_mem: 8976M
[12/10 07:19:06 d2.utils.events]:  eta: 0:02:07  iter: 9659  total_loss: 2.856  loss_sem_seg: 1.383  loss_center: 0.6665  loss_offset: 0.6881  time: 0.3761  data_time: 0.0257  lr: 0.00011951  max_mem: 8976M
[12/10 07:19:14 d2.utils.events]:  eta: 0:01:59  iter: 9679  total_loss: 2.82  loss_sem_seg: 1.389  loss_center: 0.5807  loss_offset: 0.7261  time: 0.3761  data_time: 0.0262  lr: 0.00011319  max_mem: 8976M
[12/10 07:19:21 d2.utils.events]:  eta: 0:01:52  iter: 9699  total_loss: 3.076  loss_sem_seg: 1.442  loss_center: 0.5824  loss_offset: 0.7202  time: 0.3761  data_time: 0.0266  lr: 0.00010682  max_mem: 8976M
[12/10 07:19:29 d2.utils.events]:  eta: 0:01:44  iter: 9719  total_loss: 2.979  loss_sem_seg: 1.471  loss_center: 0.5501  loss_offset: 0.6945  time: 0.3761  data_time: 0.0257  lr: 0.00010041  max_mem: 8976M
[12/10 07:19:36 d2.utils.events]:  eta: 0:01:37  iter: 9739  total_loss: 2.846  loss_sem_seg: 1.422  loss_center: 0.5204  loss_offset: 0.8095  time: 0.3761  data_time: 0.0267  lr: 9.3954e-05  max_mem: 8976M
[12/10 07:19:44 d2.utils.events]:  eta: 0:01:29  iter: 9759  total_loss: 2.899  loss_sem_seg: 1.513  loss_center: 0.6284  loss_offset: 0.7675  time: 0.3761  data_time: 0.0271  lr: 8.7449e-05  max_mem: 8976M
[12/10 07:19:51 d2.utils.events]:  eta: 0:01:22  iter: 9779  total_loss: 3.04  loss_sem_seg: 1.517  loss_center: 0.6453  loss_offset: 0.805  time: 0.3760  data_time: 0.0260  lr: 8.089e-05  max_mem: 8976M
[12/10 07:19:59 d2.utils.events]:  eta: 0:01:14  iter: 9799  total_loss: 2.606  loss_sem_seg: 1.403  loss_center: 0.5914  loss_offset: 0.6629  time: 0.3760  data_time: 0.0252  lr: 7.4271e-05  max_mem: 8976M
[12/10 07:20:06 d2.utils.events]:  eta: 0:01:07  iter: 9819  total_loss: 2.914  loss_sem_seg: 1.542  loss_center: 0.6403  loss_offset: 0.689  time: 0.3760  data_time: 0.0262  lr: 6.7585e-05  max_mem: 8976M
[12/10 07:20:14 d2.utils.events]:  eta: 0:00:59  iter: 9839  total_loss: 2.7  loss_sem_seg: 1.311  loss_center: 0.6259  loss_offset: 0.7361  time: 0.3760  data_time: 0.0277  lr: 6.0825e-05  max_mem: 8976M
[12/10 07:20:21 d2.utils.events]:  eta: 0:00:52  iter: 9859  total_loss: 2.791  loss_sem_seg: 1.407  loss_center: 0.5909  loss_offset: 0.6842  time: 0.3760  data_time: 0.0257  lr: 5.3981e-05  max_mem: 8976M
[12/10 07:20:29 d2.utils.events]:  eta: 0:00:44  iter: 9879  total_loss: 2.691  loss_sem_seg: 1.429  loss_center: 0.66  loss_offset: 0.6746  time: 0.3760  data_time: 0.0259  lr: 4.7038e-05  max_mem: 8976M
[12/10 07:20:36 d2.utils.events]:  eta: 0:00:37  iter: 9899  total_loss: 2.747  loss_sem_seg: 1.457  loss_center: 0.7426  loss_offset: 0.6926  time: 0.3760  data_time: 0.0262  lr: 3.9979e-05  max_mem: 8976M
[12/10 07:20:44 d2.utils.events]:  eta: 0:00:29  iter: 9919  total_loss: 2.918  loss_sem_seg: 1.599  loss_center: 0.7024  loss_offset: 0.7617  time: 0.3760  data_time: 0.0263  lr: 3.2778e-05  max_mem: 8976M
[12/10 07:20:51 d2.utils.events]:  eta: 0:00:22  iter: 9939  total_loss: 2.69  loss_sem_seg: 1.386  loss_center: 0.4772  loss_offset: 0.695  time: 0.3760  data_time: 0.0261  lr: 2.5394e-05  max_mem: 8976M
[12/10 07:20:59 d2.utils.events]:  eta: 0:00:14  iter: 9959  total_loss: 2.97  loss_sem_seg: 1.316  loss_center: 0.6645  loss_offset: 0.7598  time: 0.3760  data_time: 0.0274  lr: 1.776e-05  max_mem: 8976M
[12/10 07:21:06 d2.utils.events]:  eta: 0:00:07  iter: 9979  total_loss: 2.953  loss_sem_seg: 1.75  loss_center: 0.4716  loss_offset: 0.834  time: 0.3760  data_time: 0.0266  lr: 9.7261e-06  max_mem: 8976M
[12/10 07:21:14 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_0009999.pth
[12/10 07:21:15 fvcore.common.checkpoint]: Saving checkpoint to ./output/model_final.pth
[12/10 07:21:15 d2.utils.events]:  eta: 0:00:00  iter: 9999  total_loss: 2.907  loss_sem_seg: 1.522  loss_center: 0.6223  loss_offset: 0.7374  time: 0.3760  data_time: 0.0261  lr: 6.2797e-07  max_mem: 8976M
[12/10 07:21:16 d2.engine.hooks]: Overall training speed: 9998 iterations in 1:02:39 (0.3760 s / it)
[12/10 07:21:16 d2.engine.hooks]: Total training time: 1:02:47 (0:00:07 on hooks)
[12/10 07:21:16 d2.data.dataset_mapper]: [DatasetMapper] Augmentations used in inference: [ResizeShortestEdge(short_edge_length=(640, 640), max_size=640, sample_style='choice')]
[12/10 07:21:16 d2.data.common]: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/10 07:21:16 d2.data.common]: Serializing 5000 elements to byte tensors and concatenating them all ...
[12/10 07:21:16 d2.data.common]: Serialized dataset takes 3.40 MiB
/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:481: UserWarning: This DataLoader will create 10 worker processes in total. Our suggested max number of worker in current system is 8, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  cpuset_checked))
[12/10 07:21:17 d2.evaluation.evaluator]: Start inference on 5000 batches
/usr/local/lib/python3.7/dist-packages/torch/functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
[12/10 07:21:19 d2.evaluation.evaluator]: Inference done 11/5000. Dataloading: 0.0005 s/iter. Inference: 0.0526 s/iter. Eval: 0.0370 s/iter. Total: 0.0902 s/iter. ETA=0:07:29
[12/10 07:21:24 d2.evaluation.evaluator]: Inference done 72/5000. Dataloading: 0.0010 s/iter. Inference: 0.0508 s/iter. Eval: 0.0321 s/iter. Total: 0.0839 s/iter. ETA=0:06:53
[12/10 07:21:29 d2.evaluation.evaluator]: Inference done 125/5000. Dataloading: 0.0011 s/iter. Inference: 0.0528 s/iter. Eval: 0.0346 s/iter. Total: 0.0886 s/iter. ETA=0:07:11
[12/10 07:21:34 d2.evaluation.evaluator]: Inference done 181/5000. Dataloading: 0.0011 s/iter. Inference: 0.0528 s/iter. Eval: 0.0350 s/iter. Total: 0.0890 s/iter. ETA=0:07:08
[12/10 07:21:39 d2.evaluation.evaluator]: Inference done 239/5000. Dataloading: 0.0011 s/iter. Inference: 0.0525 s/iter. Eval: 0.0348 s/iter. Total: 0.0885 s/iter. ETA=0:07:01
[12/10 07:21:44 d2.evaluation.evaluator]: Inference done 296/5000. Dataloading: 0.0011 s/iter. Inference: 0.0524 s/iter. Eval: 0.0349 s/iter. Total: 0.0885 s/iter. ETA=0:06:56
[12/10 07:21:49 d2.evaluation.evaluator]: Inference done 355/5000. Dataloading: 0.0011 s/iter. Inference: 0.0522 s/iter. Eval: 0.0347 s/iter. Total: 0.0882 s/iter. ETA=0:06:49
[12/10 07:21:54 d2.evaluation.evaluator]: Inference done 414/5000. Dataloading: 0.0011 s/iter. Inference: 0.0520 s/iter. Eval: 0.0345 s/iter. Total: 0.0877 s/iter. ETA=0:06:42
[12/10 07:21:59 d2.evaluation.evaluator]: Inference done 475/5000. Dataloading: 0.0011 s/iter. Inference: 0.0516 s/iter. Eval: 0.0342 s/iter. Total: 0.0870 s/iter. ETA=0:06:33
[12/10 07:22:04 d2.evaluation.evaluator]: Inference done 531/5000. Dataloading: 0.0012 s/iter. Inference: 0.0517 s/iter. Eval: 0.0344 s/iter. Total: 0.0873 s/iter. ETA=0:06:30
[12/10 07:22:09 d2.evaluation.evaluator]: Inference done 587/5000. Dataloading: 0.0012 s/iter. Inference: 0.0518 s/iter. Eval: 0.0345 s/iter. Total: 0.0876 s/iter. ETA=0:06:26
[12/10 07:22:15 d2.evaluation.evaluator]: Inference done 644/5000. Dataloading: 0.0012 s/iter. Inference: 0.0519 s/iter. Eval: 0.0346 s/iter. Total: 0.0877 s/iter. ETA=0:06:22
[12/10 07:22:20 d2.evaluation.evaluator]: Inference done 701/5000. Dataloading: 0.0012 s/iter. Inference: 0.0519 s/iter. Eval: 0.0347 s/iter. Total: 0.0878 s/iter. ETA=0:06:17
[12/10 07:22:25 d2.evaluation.evaluator]: Inference done 759/5000. Dataloading: 0.0012 s/iter. Inference: 0.0518 s/iter. Eval: 0.0347 s/iter. Total: 0.0878 s/iter. ETA=0:06:12
[12/10 07:22:30 d2.evaluation.evaluator]: Inference done 819/5000. Dataloading: 0.0012 s/iter. Inference: 0.0516 s/iter. Eval: 0.0346 s/iter. Total: 0.0875 s/iter. ETA=0:06:05
[12/10 07:22:35 d2.evaluation.evaluator]: Inference done 878/5000. Dataloading: 0.0012 s/iter. Inference: 0.0515 s/iter. Eval: 0.0346 s/iter. Total: 0.0873 s/iter. ETA=0:05:59
[12/10 07:22:40 d2.evaluation.evaluator]: Inference done 940/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0344 s/iter. Total: 0.0869 s/iter. ETA=0:05:52
[12/10 07:22:45 d2.evaluation.evaluator]: Inference done 999/5000. Dataloading: 0.0012 s/iter. Inference: 0.0512 s/iter. Eval: 0.0343 s/iter. Total: 0.0868 s/iter. ETA=0:05:47
[12/10 07:22:50 d2.evaluation.evaluator]: Inference done 1058/5000. Dataloading: 0.0012 s/iter. Inference: 0.0512 s/iter. Eval: 0.0343 s/iter. Total: 0.0867 s/iter. ETA=0:05:41
[12/10 07:22:55 d2.evaluation.evaluator]: Inference done 1118/5000. Dataloading: 0.0012 s/iter. Inference: 0.0511 s/iter. Eval: 0.0343 s/iter. Total: 0.0866 s/iter. ETA=0:05:36
[12/10 07:23:00 d2.evaluation.evaluator]: Inference done 1177/5000. Dataloading: 0.0012 s/iter. Inference: 0.0511 s/iter. Eval: 0.0342 s/iter. Total: 0.0866 s/iter. ETA=0:05:31
[12/10 07:23:05 d2.evaluation.evaluator]: Inference done 1232/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0343 s/iter. Total: 0.0868 s/iter. ETA=0:05:27
[12/10 07:23:10 d2.evaluation.evaluator]: Inference done 1289/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0344 s/iter. Total: 0.0869 s/iter. ETA=0:05:22
[12/10 07:23:15 d2.evaluation.evaluator]: Inference done 1347/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0343 s/iter. Total: 0.0869 s/iter. ETA=0:05:17
[12/10 07:23:20 d2.evaluation.evaluator]: Inference done 1407/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0343 s/iter. Total: 0.0868 s/iter. ETA=0:05:11
[12/10 07:23:25 d2.evaluation.evaluator]: Inference done 1465/5000. Dataloading: 0.0012 s/iter. Inference: 0.0512 s/iter. Eval: 0.0343 s/iter. Total: 0.0868 s/iter. ETA=0:05:06
[12/10 07:23:30 d2.evaluation.evaluator]: Inference done 1522/5000. Dataloading: 0.0012 s/iter. Inference: 0.0512 s/iter. Eval: 0.0344 s/iter. Total: 0.0868 s/iter. ETA=0:05:02
[12/10 07:23:35 d2.evaluation.evaluator]: Inference done 1577/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0345 s/iter. Total: 0.0870 s/iter. ETA=0:04:57
[12/10 07:23:40 d2.evaluation.evaluator]: Inference done 1634/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0345 s/iter. Total: 0.0871 s/iter. ETA=0:04:53
[12/10 07:23:45 d2.evaluation.evaluator]: Inference done 1691/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0345 s/iter. Total: 0.0872 s/iter. ETA=0:04:48
[12/10 07:23:50 d2.evaluation.evaluator]: Inference done 1748/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0346 s/iter. Total: 0.0872 s/iter. ETA=0:04:43
[12/10 07:23:55 d2.evaluation.evaluator]: Inference done 1807/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0345 s/iter. Total: 0.0871 s/iter. ETA=0:04:38
[12/10 07:24:01 d2.evaluation.evaluator]: Inference done 1864/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0345 s/iter. Total: 0.0872 s/iter. ETA=0:04:33
[12/10 07:24:06 d2.evaluation.evaluator]: Inference done 1921/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0345 s/iter. Total: 0.0872 s/iter. ETA=0:04:28
[12/10 07:24:11 d2.evaluation.evaluator]: Inference done 1979/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0345 s/iter. Total: 0.0872 s/iter. ETA=0:04:23
[12/10 07:24:16 d2.evaluation.evaluator]: Inference done 2036/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0345 s/iter. Total: 0.0872 s/iter. ETA=0:04:18
[12/10 07:24:21 d2.evaluation.evaluator]: Inference done 2095/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0345 s/iter. Total: 0.0872 s/iter. ETA=0:04:13
[12/10 07:24:26 d2.evaluation.evaluator]: Inference done 2153/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0345 s/iter. Total: 0.0872 s/iter. ETA=0:04:08
[12/10 07:24:31 d2.evaluation.evaluator]: Inference done 2211/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0345 s/iter. Total: 0.0872 s/iter. ETA=0:04:03
[12/10 07:24:36 d2.evaluation.evaluator]: Inference done 2270/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0345 s/iter. Total: 0.0871 s/iter. ETA=0:03:57
[12/10 07:24:41 d2.evaluation.evaluator]: Inference done 2331/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0345 s/iter. Total: 0.0870 s/iter. ETA=0:03:52
[12/10 07:24:46 d2.evaluation.evaluator]: Inference done 2390/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0344 s/iter. Total: 0.0870 s/iter. ETA=0:03:47
[12/10 07:24:51 d2.evaluation.evaluator]: Inference done 2446/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0345 s/iter. Total: 0.0871 s/iter. ETA=0:03:42
[12/10 07:24:56 d2.evaluation.evaluator]: Inference done 2504/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0345 s/iter. Total: 0.0871 s/iter. ETA=0:03:37
[12/10 07:25:01 d2.evaluation.evaluator]: Inference done 2562/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0345 s/iter. Total: 0.0871 s/iter. ETA=0:03:32
[12/10 07:25:06 d2.evaluation.evaluator]: Inference done 2619/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0345 s/iter. Total: 0.0871 s/iter. ETA=0:03:27
[12/10 07:25:11 d2.evaluation.evaluator]: Inference done 2677/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0345 s/iter. Total: 0.0871 s/iter. ETA=0:03:22
[12/10 07:25:16 d2.evaluation.evaluator]: Inference done 2739/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0344 s/iter. Total: 0.0870 s/iter. ETA=0:03:16
[12/10 07:25:21 d2.evaluation.evaluator]: Inference done 2798/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0344 s/iter. Total: 0.0870 s/iter. ETA=0:03:11
[12/10 07:25:26 d2.evaluation.evaluator]: Inference done 2857/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0344 s/iter. Total: 0.0869 s/iter. ETA=0:03:06
[12/10 07:25:32 d2.evaluation.evaluator]: Inference done 2915/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0344 s/iter. Total: 0.0870 s/iter. ETA=0:03:01
[12/10 07:25:37 d2.evaluation.evaluator]: Inference done 2975/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0344 s/iter. Total: 0.0869 s/iter. ETA=0:02:55
[12/10 07:25:42 d2.evaluation.evaluator]: Inference done 3035/5000. Dataloading: 0.0012 s/iter. Inference: 0.0512 s/iter. Eval: 0.0344 s/iter. Total: 0.0868 s/iter. ETA=0:02:50
[12/10 07:25:47 d2.evaluation.evaluator]: Inference done 3096/5000. Dataloading: 0.0012 s/iter. Inference: 0.0512 s/iter. Eval: 0.0344 s/iter. Total: 0.0868 s/iter. ETA=0:02:45
[12/10 07:25:52 d2.evaluation.evaluator]: Inference done 3153/5000. Dataloading: 0.0012 s/iter. Inference: 0.0512 s/iter. Eval: 0.0344 s/iter. Total: 0.0868 s/iter. ETA=0:02:40
[12/10 07:25:57 d2.evaluation.evaluator]: Inference done 3210/5000. Dataloading: 0.0012 s/iter. Inference: 0.0512 s/iter. Eval: 0.0344 s/iter. Total: 0.0868 s/iter. ETA=0:02:35
[12/10 07:26:02 d2.evaluation.evaluator]: Inference done 3266/5000. Dataloading: 0.0012 s/iter. Inference: 0.0512 s/iter. Eval: 0.0344 s/iter. Total: 0.0869 s/iter. ETA=0:02:30
[12/10 07:26:07 d2.evaluation.evaluator]: Inference done 3321/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0344 s/iter. Total: 0.0869 s/iter. ETA=0:02:25
[12/10 07:26:12 d2.evaluation.evaluator]: Inference done 3377/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0345 s/iter. Total: 0.0870 s/iter. ETA=0:02:21
[12/10 07:26:17 d2.evaluation.evaluator]: Inference done 3435/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0345 s/iter. Total: 0.0870 s/iter. ETA=0:02:16
[12/10 07:26:22 d2.evaluation.evaluator]: Inference done 3495/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0345 s/iter. Total: 0.0870 s/iter. ETA=0:02:10
[12/10 07:26:27 d2.evaluation.evaluator]: Inference done 3551/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0345 s/iter. Total: 0.0870 s/iter. ETA=0:02:06
[12/10 07:26:32 d2.evaluation.evaluator]: Inference done 3608/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0345 s/iter. Total: 0.0870 s/iter. ETA=0:02:01
[12/10 07:26:37 d2.evaluation.evaluator]: Inference done 3669/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0344 s/iter. Total: 0.0870 s/iter. ETA=0:01:55
[12/10 07:26:42 d2.evaluation.evaluator]: Inference done 3728/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0344 s/iter. Total: 0.0869 s/iter. ETA=0:01:50
[12/10 07:26:47 d2.evaluation.evaluator]: Inference done 3785/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0344 s/iter. Total: 0.0869 s/iter. ETA=0:01:45
[12/10 07:26:52 d2.evaluation.evaluator]: Inference done 3839/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0344 s/iter. Total: 0.0870 s/iter. ETA=0:01:41
[12/10 07:26:57 d2.evaluation.evaluator]: Inference done 3900/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0344 s/iter. Total: 0.0870 s/iter. ETA=0:01:35
[12/10 07:27:02 d2.evaluation.evaluator]: Inference done 3957/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0344 s/iter. Total: 0.0870 s/iter. ETA=0:01:30
[12/10 07:27:07 d2.evaluation.evaluator]: Inference done 4015/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0344 s/iter. Total: 0.0870 s/iter. ETA=0:01:25
[12/10 07:27:12 d2.evaluation.evaluator]: Inference done 4072/5000. Dataloading: 0.0012 s/iter. Inference: 0.0514 s/iter. Eval: 0.0344 s/iter. Total: 0.0870 s/iter. ETA=0:01:20
[12/10 07:27:17 d2.evaluation.evaluator]: Inference done 4132/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0344 s/iter. Total: 0.0870 s/iter. ETA=0:01:15
[12/10 07:27:23 d2.evaluation.evaluator]: Inference done 4188/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0345 s/iter. Total: 0.0870 s/iter. ETA=0:01:10
[12/10 07:27:28 d2.evaluation.evaluator]: Inference done 4246/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0345 s/iter. Total: 0.0870 s/iter. ETA=0:01:05
[12/10 07:27:33 d2.evaluation.evaluator]: Inference done 4304/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0345 s/iter. Total: 0.0870 s/iter. ETA=0:01:00
[12/10 07:27:38 d2.evaluation.evaluator]: Inference done 4366/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0344 s/iter. Total: 0.0870 s/iter. ETA=0:00:55
[12/10 07:27:43 d2.evaluation.evaluator]: Inference done 4423/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0345 s/iter. Total: 0.0870 s/iter. ETA=0:00:50
[12/10 07:27:48 d2.evaluation.evaluator]: Inference done 4481/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0345 s/iter. Total: 0.0870 s/iter. ETA=0:00:45
[12/10 07:27:53 d2.evaluation.evaluator]: Inference done 4539/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0345 s/iter. Total: 0.0870 s/iter. ETA=0:00:40
[12/10 07:27:58 d2.evaluation.evaluator]: Inference done 4597/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0345 s/iter. Total: 0.0870 s/iter. ETA=0:00:35
[12/10 07:28:03 d2.evaluation.evaluator]: Inference done 4653/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0345 s/iter. Total: 0.0870 s/iter. ETA=0:00:30
[12/10 07:28:08 d2.evaluation.evaluator]: Inference done 4712/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0345 s/iter. Total: 0.0870 s/iter. ETA=0:00:25
[12/10 07:28:13 d2.evaluation.evaluator]: Inference done 4772/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0345 s/iter. Total: 0.0869 s/iter. ETA=0:00:19
[12/10 07:28:18 d2.evaluation.evaluator]: Inference done 4828/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0345 s/iter. Total: 0.0870 s/iter. ETA=0:00:14
[12/10 07:28:23 d2.evaluation.evaluator]: Inference done 4888/5000. Dataloading: 0.0012 s/iter. Inference: 0.0512 s/iter. Eval: 0.0345 s/iter. Total: 0.0869 s/iter. ETA=0:00:09
[12/10 07:28:28 d2.evaluation.evaluator]: Inference done 4945/5000. Dataloading: 0.0012 s/iter. Inference: 0.0513 s/iter. Eval: 0.0345 s/iter. Total: 0.0870 s/iter. ETA=0:00:04
[12/10 07:28:33 d2.evaluation.evaluator]: Total inference time: 0:07:14.482945 (0.086984 s / iter per device, on 1 devices)
[12/10 07:28:33 d2.evaluation.evaluator]: Total inference pure compute time: 0:04:15 (0.051241 s / iter per device, on 1 devices)
[12/10 07:28:33 d2.evaluation.panoptic_evaluation]: Writing all panoptic predictions to /tmp/panoptic_eval0pwo419h ...
[12/10 07:28:56 d2.evaluation.panoptic_evaluation]: Panoptic Evaluation Results:
|        |   PQ   |   SQ   |   RQ   |  #categories  |
|:------:|:------:|:------:|:------:|:-------------:|
|  All   | 8.060  | 49.480 | 10.821 |      133      |
| Things | 6.090  | 50.567 | 8.285  |      80       |
| Stuff  | 11.034 | 47.839 | 14.649 |      53       |
[12/10 07:28:57 d2.evaluation.coco_evaluation]: Preparing results for COCO format ...
[12/10 07:28:57 d2.evaluation.coco_evaluation]: Saving results to ./output/inference/coco_instances_results.json
[12/10 07:28:57 d2.evaluation.coco_evaluation]: Evaluating predictions with unofficial COCO API...
Loading and preparing results...
DONE (t=0.04s)
creating index...
index created!
[12/10 07:28:57 d2.evaluation.fast_eval_api]: Evaluate annotation type *bbox*
[12/10 07:29:05 d2.evaluation.fast_eval_api]: COCOeval_opt.evaluate() finished in 7.90 seconds.
[12/10 07:29:05 d2.evaluation.fast_eval_api]: Accumulating evaluation results...
[12/10 07:29:06 d2.evaluation.fast_eval_api]: COCOeval_opt.accumulate() finished in 0.64 seconds.
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.019
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.038
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.016
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.002
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.011
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.037
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.033
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.046
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.046
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.002
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.024
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.085
[12/10 07:29:06 d2.evaluation.coco_evaluation]: Evaluation results for bbox: 
|  AP   |  AP50  |  AP75  |  APs  |  APm  |  APl  |
|:-----:|:------:|:------:|:-----:|:-----:|:-----:|
| 1.862 | 3.828  | 1.642  | 0.168 | 1.138 | 3.734 |
[12/10 07:29:06 d2.evaluation.coco_evaluation]: Per-category bbox AP: 
| category      | AP    | category     | AP     | category       | AP     |
|:--------------|:------|:-------------|:-------|:---------------|:-------|
| person        | 7.841 | bicycle      | 0.166  | car            | 2.637  |
| motorcycle    | 1.189 | airplane     | 1.372  | bus            | 13.045 |
| train         | 5.248 | truck        | 0.099  | boat           | 0.199  |
| traffic light | 0.778 | fire hydrant | 2.730  | stop sign      | 19.192 |
| parking meter | 0.000 | bench        | 0.067  | bird           | 0.792  |
| cat           | 3.718 | dog          | 2.078  | horse          | 0.568  |
| sheep         | 1.782 | cow          | 3.542  | elephant       | 7.293  |
| bear          | 9.137 | zebra        | 17.316 | giraffe        | 11.518 |
| backpack      | 0.000 | umbrella     | 0.485  | handbag        | 0.000  |
| tie           | 0.000 | suitcase     | 0.099  | frisbee        | 0.990  |
| skis          | 0.037 | snowboard    | 0.000  | sports ball    | 1.114  |
| kite          | 2.745 | baseball bat | 0.000  | baseball glove | 0.000  |
| skateboard    | 0.048 | surfboard    | 1.238  | tennis racket  | 1.557  |
| bottle        | 0.315 | wine glass   | 0.000  | cup            | 0.142  |
| fork          | 0.000 | knife        | 0.000  | spoon          | 0.000  |
| bowl          | 0.156 | banana       | 0.326  | apple          | 0.330  |
| sandwich      | 0.041 | orange       | 1.035  | broccoli       | 0.119  |
| carrot        | 0.153 | hot dog      | 0.000  | pizza          | 1.487  |
| donut         | 0.000 | cake         | 0.000  | chair          | 0.812  |
| couch         | 1.617 | potted plant | 0.098  | bed            | 3.128  |
| dining table  | 1.311 | toilet       | 5.975  | tv             | 4.119  |
| laptop        | 1.868 | mouse        | 1.221  | remote         | 0.000  |
| keyboard      | 0.548 | cell phone   | 0.000  | microwave      | 0.000  |
| oven          | 0.182 | toaster      | 0.000  | sink           | 1.118  |
| refrigerator  | 0.607 | book         | 0.030  | clock          | 1.166  |
| vase          | 0.215 | scissors     | 0.000  | teddy bear     | 0.239  |
| hair drier    | 0.000 | toothbrush   | 0.000  |                |        |
Loading and preparing results...
DONE (t=0.48s)
creating index...
index created!
[12/10 07:29:07 d2.evaluation.fast_eval_api]: Evaluate annotation type *segm*
[12/10 07:29:16 d2.evaluation.fast_eval_api]: COCOeval_opt.evaluate() finished in 9.05 seconds.
[12/10 07:29:16 d2.evaluation.fast_eval_api]: Accumulating evaluation results...
[12/10 07:29:17 d2.evaluation.fast_eval_api]: COCOeval_opt.accumulate() finished in 0.69 seconds.
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.019
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.039
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.017
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.001
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.011
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.047
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.031
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.039
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.040
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.002
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.023
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.073
[12/10 07:29:19 d2.evaluation.coco_evaluation]: Evaluation results for segm: 
|  AP   |  AP50  |  AP75  |  APs  |  APm  |  APl  |
|:-----:|:------:|:------:|:-----:|:-----:|:-----:|
| 1.913 | 3.949  | 1.663  | 0.111 | 1.148 | 4.667 |
[12/10 07:29:19 d2.evaluation.coco_evaluation]: Per-category segm AP: 
| category      | AP    | category     | AP     | category       | AP     |
|:--------------|:------|:-------------|:-------|:---------------|:-------|
| person        | 4.852 | bicycle      | 0.073  | car            | 2.644  |
| motorcycle    | 0.851 | airplane     | 1.206  | bus            | 13.959 |
| train         | 6.708 | truck        | 0.050  | boat           | 0.076  |
| traffic light | 0.698 | fire hydrant | 2.861  | stop sign      | 21.584 |
| parking meter | 0.000 | bench        | 0.087  | bird           | 0.693  |
| cat           | 3.630 | dog          | 2.061  | horse          | 0.372  |
| sheep         | 1.707 | cow          | 2.829  | elephant       | 7.842  |
| bear          | 9.923 | zebra        | 16.160 | giraffe        | 8.887  |
| backpack      | 0.000 | umbrella     | 0.784  | handbag        | 0.000  |
| tie           | 0.000 | suitcase     | 0.132  | frisbee        | 0.594  |
| skis          | 0.000 | snowboard    | 0.000  | sports ball    | 0.965  |
| kite          | 2.770 | baseball bat | 0.000  | baseball glove | 0.000  |
| skateboard    | 0.000 | surfboard    | 1.118  | tennis racket  | 4.787  |
| bottle        | 0.354 | wine glass   | 0.000  | cup            | 0.396  |
| fork          | 0.000 | knife        | 0.000  | spoon          | 0.000  |
| bowl          | 0.426 | banana       | 0.251  | apple          | 0.891  |
| sandwich      | 0.025 | orange       | 2.109  | broccoli       | 0.003  |
| carrot        | 0.083 | hot dog      | 0.000  | pizza          | 1.646  |
| donut         | 0.000 | cake         | 0.000  | chair          | 0.599  |
| couch         | 0.908 | potted plant | 0.072  | bed            | 2.419  |
| dining table  | 0.187 | toilet       | 8.411  | tv             | 4.469  |
| laptop        | 2.541 | mouse        | 0.264  | remote         | 0.000  |
| keyboard      | 0.359 | cell phone   | 0.000  | microwave      | 0.000  |
| oven          | 0.040 | toaster      | 0.000  | sink           | 1.899  |
| refrigerator  | 0.078 | book         | 0.005  | clock          | 3.086  |
| vase          | 0.429 | scissors     | 0.000  | teddy bear     | 0.173  |
| hair drier    | 0.000 | toothbrush   | 0.000  |                |        |
[12/10 07:29:24 d2.engine.defaults]: Evaluation results for coco_2017_val_panoptic in csv format:
[12/10 07:29:24 d2.evaluation.testing]: copypaste: Task: panoptic_seg
[12/10 07:29:24 d2.evaluation.testing]: copypaste: PQ,SQ,RQ,PQ_th,SQ_th,RQ_th,PQ_st,SQ_st,RQ_st
[12/10 07:29:24 d2.evaluation.testing]: copypaste: 8.0602,49.4803,10.8212,6.0904,50.5673,8.2852,11.0335,47.8395,14.6491
[12/10 07:29:24 d2.evaluation.testing]: copypaste: Task: bbox
[12/10 07:29:24 d2.evaluation.testing]: copypaste: AP,AP50,AP75,APs,APm,APl
[12/10 07:29:24 d2.evaluation.testing]: copypaste: 1.8622,3.8277,1.6417,0.1685,1.1382,3.7340
[12/10 07:29:24 d2.evaluation.testing]: copypaste: Task: segm
[12/10 07:29:24 d2.evaluation.testing]: copypaste: AP,AP50,AP75,APs,APm,APl
[12/10 07:29:24 d2.evaluation.testing]: copypaste: 1.9128,3.9493,1.6630,0.1106,1.1482,4.6672